#######################################################################################################################################################################################################
#
# Changes made to this constructor
# General
#     2021-Sep-30: move this function out of BrooksCorey struct as an external method for the constructor (avoid dependency on ConstrainedRootSolvers)
#     2022-Apr-19: fix documentation
#     2022-Jul-15: BrooksCorey field changed, modify the constructor accordingly
#
#######################################################################################################################################################################################################
"""

    BrooksCorey{FT}(vg::VanGenuchten{FT}) where {FT<:AbstractFloat}

A constructor for BrooksCorey to create BrooksCorey type soil from VanGenuchten type, given
- `vg` `VanGenuchten` type soil water retention curve
"""
BrooksCorey{FT}(vg::VanGenuchten{FT}) where {FT<:AbstractFloat} = (
    # generate data to fit
    _Θs   = range(vg.Θ_RES+FT(1e-2); stop=vg.Θ_SAT-FT(1e-2), length=30);
    _Ψ_vG = -1 .* soil_ψ_25.([vg], _Θs);

    # function to fit BrooksCorey parameters
    @inline _fit(x) = (
        _bc   = BrooksCorey{FT}(K_MAX = vg.K_MAX, B = x[1], TYPE = vg.TYPE, Ψ_SAT = x[2], Θ_SAT = vg.Θ_SAT, Θ_RES = vg.Θ_RES);
        _Ψ_BC = -1 .* soil_ψ_25.([_bc], _Θs);
        _diff = sum( (log.(_Ψ_BC) .- log.(_Ψ_vG)) .^ 2 );
        return -_diff
    );

    _st  = SolutionToleranceND{FT}([1e-3, 1e-6], 30);
    _ms  = ReduceStepMethodND{FT}(x_mins = FT[1e-3, 1e-6], x_maxs = FT[ 100, 1000], x_inis = [(2*vg.N-1) / (vg.N-1), 1 / (vg.α)], Δ_inis = FT[0.1, 1e-3]);
    _sol = find_peak(_fit, _ms, _st);

    return BrooksCorey{FT}(K_MAX = vg.K_MAX, B = _sol[1], TYPE = vg.TYPE, Ψ_SAT = _sol[2], Θ_SAT = vg.Θ_SAT, Θ_RES = vg.Θ_RES);
);


#######################################################################################################################################################################################################
#
# Changes made to this function
# General
#     2021-Sep-30: create this function to work with two soil types using either VanGenuchten or BrooksCorey function
#     2022-Sep-07: add option to allow for soil water oversaturation
#
#######################################################################################################################################################################################################
"""

    soil_ψ_25(bc::BrooksCorey{FT}, θ::FT; oversaturation::Bool = false) where {FT<:AbstractFloat}
    soil_ψ_25(vg::VanGenuchten{FT}, θ::FT; oversaturation::Bool = false) where {FT<:AbstractFloat}

Return the soil metric potential, given
- `bc` or `vg` `BrooksCorey` or `VanGenuchten` type structure
- `θ` Soil volumetric water content (absolute value)
- `oversaturation` If true, allow for soil water oversaturation

"""
function soil_ψ_25 end

soil_ψ_25(bc::BrooksCorey{FT}, θ::FT; oversaturation::Bool = false) where {FT<:AbstractFloat} = (
    @unpack B, Ψ_SAT, Θ_RES, Θ_SAT = bc;

    # calculate effective θ
    _θ_e = max(0, (θ - Θ_RES) / (Θ_SAT - Θ_RES));

    # if _θ_e >= 1, use segmented function
    if _θ_e >= 1
        return oversaturation ? (θ - Θ_RES) - Ψ_SAT : -Ψ_SAT
    end;

    return -Ψ_SAT / (_θ_e ^ B)
);

soil_ψ_25(vg::VanGenuchten{FT}, θ::FT; oversaturation::Bool = false) where {FT<:AbstractFloat} = (
    @unpack M, N, α, Θ_RES, Θ_SAT = vg;

    # calculate effective θ
    _θ_e = max(0, (θ - Θ_RES) / (Θ_SAT - Θ_RES));

    # if _θ_e >= 1, use segmented function
    if _θ_e >= 1
        return oversaturation ? θ - Θ_RES : FT(0)
    end;

    return -1 * (_θ_e ^ (-1/M) - 1) ^ (1/N) / α
);


#######################################################################################################################################################################################################
#
# Changes to the function
# General
#     2022-Jun-01: migrate function to version v0.3 of PlantHydraulics v0.2
#
#######################################################################################################################################################################################################
"""

    soil_θ(bc::BrooksCorey{FT}, ψ_25::FT) where {FT<:AbstractFloat}
    soil_θ(vg::VanGenuchten{FT}, ψ_25::FT) where {FT<:AbstractFloat}

Return the soil water content, given
- `bc` or `vg` `BrooksCorey` or `VanGenuchten` type structure
- `ψ_25` Soil metric potential corrected to 25 Celcius

"""
function soil_θ end

soil_θ(bc::BrooksCorey{FT}, ψ_25::FT) where {FT<:AbstractFloat} = (
    @unpack B, Ψ_SAT, Θ_RES, Θ_SAT = bc;

    if ψ_25 >= 0
        return Θ_SAT
    end;

    return (-Ψ_SAT/ψ_25) ^ (1/B) * (Θ_SAT - Θ_RES) + Θ_RES
);

soil_θ(vg::VanGenuchten{FT}, ψ_25::FT) where {FT<:AbstractFloat} = (
    @unpack M, N, α, Θ_RES, Θ_SAT = vg;

    if ψ_25 >= 0
        return Θ_SAT
    end;

    return ( 1 / ( 1 + (-ψ_25 * α) ^ N ) ) ^ M * (Θ_SAT - Θ_RES) + Θ_RES
);


#######################################################################################################################################################################################################
#
# Changes to the function
# General
#     2022-Feb-01: migrate function to version v0.3 of PlantHydraulics
#     2022-Feb-01: add documentation
#     2022-Feb-01: rename the function to relative_hydraulic_conductance
#     2022-Feb-01: remove viscosity correction
#     2022-Apr-19: move function to SoilHydraulics from PlantHydraulics (will be imported in PlantHydraulics)
#     2022-May-31: add a controller to ψ_25 to make avoid numerical issue
#
#######################################################################################################################################################################################################
"""

    relative_hydraulic_conductance(bc::BrooksCorey{FT}, θ::FT) where {FT<:AbstractFloat}
    relative_hydraulic_conductance(bc::BrooksCorey{FT}, ψ::Bool, ψ_25::FT) where {FT<:AbstractFloat}
    relative_hydraulic_conductance(vg::VanGenuchten{FT}, θ::FT) where {FT<:AbstractFloat}
    relative_hydraulic_conductance(vg::VanGenuchten{FT}, ψ::Bool, ψ_25::FT) where {FT<:AbstractFloat}

Return the relative hydraulic conductance of the soil, given
- `bc` or `vg` `BrooksCorey` or `VanGenuchten` type structure
- `θ` Soil volumetric water content (absolute value)
- `ψ` Bool to indicate that next parameter is potential
- `ψ_25` Soil metric potential at a reference temperature of 25 °C

"""
function relative_hydraulic_conductance end

relative_hydraulic_conductance(bc::BrooksCorey{FT}, θ::FT) where {FT<:AbstractFloat} = (
    @unpack B, Θ_RES, Θ_SAT = bc;

    _θ_e = min(1, max(0, (θ - Θ_RES) / (Θ_SAT - Θ_RES)));

    return _θ_e ^ (2 * B + 3)
);

relative_hydraulic_conductance(bc::BrooksCorey{FT}, ψ::Bool, ψ_25::FT) where {FT<:AbstractFloat} = (
    @unpack B, Ψ_SAT = bc;

    # if the potential > 0, return 1
    if ψ_25 >= 0
        return FT(1)
    end;

    _θ_e = (-Ψ_SAT / ψ_25) ^ (1 / B);

    return _θ_e ^ (2 * B + 3)
);

relative_hydraulic_conductance(vg::VanGenuchten{FT}, θ::FT) where {FT<:AbstractFloat} = (
    @unpack M, N, Θ_RES, Θ_SAT = vg;

    _θ_e = min(1, max(0, (θ - Θ_RES) / (Θ_SAT - Θ_RES)));

    return sqrt(_θ_e) * (1 - (1 - _θ_e ^ (1 / M)) ^ M)^2
);

relative_hydraulic_conductance(vg::VanGenuchten{FT}, ψ::Bool, ψ_25::FT) where {FT<:AbstractFloat} = (
    @unpack M, N, α = vg;

    # if the potential > 0, return 1
    if ψ_25 >= 0
        return FT(1)
    end;

    _θ_e = (1 / (1 + (-ψ_25 * α) ^ N)) ^ M;

    return sqrt(_θ_e) * (1 - (1 - _θ_e ^ (1 / M)) ^ M)^2
);
