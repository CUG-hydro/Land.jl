var documenterSearchIndex = {"docs":
[{"location":"modules/PlantHydraulics/#API","page":"PlantHydraulics","title":"API","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"CurrentModule = PlantHydraulics","category":"page"},{"location":"modules/PlantHydraulics/#About","page":"PlantHydraulics","title":"About","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"PlantHydraulics.jl provides numerical hydraulic models that can be used to simulate the flow and pressure profiles in plants. In the model, hydraulic system is a combination of hydraulic organs, which are Root, Stem, and Leaf. And as a result, the functions to simulate flow and pressure profiles can be used at organ level and system level. For example, for the simplest case, one can simulate the pressure profile within a xylem segment; and for the most complex case, one can simulate the flow and pressure profiles in a tree with multiple roots, trunk, multiple canopy layers (a stem and a leaf per layer).","category":"page"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Although PlantHydraulics.jl is meant to server as a fundamental dependency package of the CliMA Land, it can also be used as a standalone package and thus to use with other vegetation modeling other than CliMA Land. Below, we will show some examples of how to use PlantHydraulics.jl at organ and plant level.","category":"page"},{"location":"modules/PlantHydraulics/#Organ-Level-Simulations","page":"PlantHydraulics","title":"Organ Level Simulations","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Root, Stem, and Leaf organs differ in the following:","category":"page"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Root has a rhizosphere component before the xylem\nLeaf has an extraxylary component after the xylem\nStem and Root have a height change to account for gravity\nStem and Root capacitance is along the flow path\nLeaf capacitance is at the end of the flow path (along with extraxylary component)","category":"page"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"For example in a Leaf, to simulate the flow and pressure profiles, what you need to do are","category":"page"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"using ClimaCache\nusing PlantHydraulics\nFT = Float64;\n\nleaf = ClimaCache.Leaf{FT}();\nstem = ClimaCache.Stem{FT}();\nroot = ClimaCache.Root{FT}();\nsoil = ClimaCache.SoilLayer{FT}();\nPlantHydraulics.xylem_flow_profile!(leaf, FT(1));\nPlantHydraulics.xylem_flow_profile!(stem, FT(1));\nPlantHydraulics.xylem_flow_profile!(root, FT(1));\nPlantHydraulics.xylem_pressure_profile!(leaf);\nPlantHydraulics.xylem_pressure_profile!(stem);\nPlantHydraulics.xylem_pressure_profile!(root, soil);","category":"page"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Note the second parameter FT(1) is the time step in second to use with non-steady state mode. If the flow mode is steady state, FT(1) will not be used; otherwise, water source/sink term will be applied based on the state of the capacitance tissue. As there is a rhizosphere component in the Root, which uses soil moisture retension curve to compute soil water potential, we need to pass soil information to the xylem_pressure_profile! function when updating soil pressure profile.","category":"page"},{"location":"modules/PlantHydraulics/#Plant-Level-Simulation","page":"PlantHydraulics","title":"Plant Level Simulation","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"While one can always customize the hydraulic system using functions xylem_flow_profile! and xylem_pressure_profile!, we provide shortcut functions to soil-plant-air continuum where soil layers, plant, and air layers are aligned. For example, a spac of a tree (MonoMLTreeSPAC).","category":"page"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"spac = ClimaCache.MonoMLTreeSPAC{FT}();\nPlantHydraulics.xylem_flow_profile!(spac, FT(1));\nPlantHydraulics.xylem_pressure_profile!(spac);","category":"page"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Similarly, one can use MonoMLGrassSPAC, MonoMLPalmSPAC, and MonoElementSPAC (Mono means mono species spac, ML means multiple root and canopy layers, Grass with no trunk and branch, Palm with no branch, and Element means the spac consists of one soil layer, root, stem, and leaf element each). Currently, the predefined SPAC only supports the four listed above. If you need more customized SPACs, you will need to combine the fundamental functions xylem_flow_profile! and xylem_pressure_profile! appropriately. Be carefuly to not forget to synchronize the flow rates with stomtal conductance (this is done automactically for predefined SPACs).","category":"page"},{"location":"modules/PlantHydraulics/#Vulnerability-curve","page":"PlantHydraulics","title":"Vulnerability curve","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"relative_hydraulic_conductance(vc::ComplexVC{FT}, p_25::FT) where {FT<:AbstractFloat}\ncritical_pressure","category":"page"},{"location":"modules/PlantHydraulics/#SoilHydraulics.relative_hydraulic_conductance-Union{Tuple{FT}, Tuple{ClimaCache.ComplexVC{FT}, FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"SoilHydraulics.relative_hydraulic_conductance","text":"relative_hydraulic_conductance(vc::ComplexVC{FT}, p_25::FT) where {FT<:AbstractFloat}\nrelative_hydraulic_conductance(vc::LogisticVC{FT}, p_25::FT) where {FT<:AbstractFloat}\n\nReturn the hydraulic conductance ralative to maximum at reference temperature, given\n\nvc ComplexVC, LogisticVC, PowerVC, or WeibullVC type vulnerability curve\np_25 Equivalent xylem water pressure at 298.15 K in [MPa] (surface tension correction made)\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#PlantHydraulics.critical_pressure","page":"PlantHydraulics","title":"PlantHydraulics.critical_pressure","text":"critical_pressure(vc::ComplexVC{FT}, kr::FT = FT(0.001)) where {FT<:AbstractFloat}\ncritical_pressure(vc::LogisticVC{FT}, kr::FT = FT(0.001)) where {FT<:AbstractFloat}\ncritical_pressure(vc::PowerVC{FT}, kr::FT = FT(0.001)) where {FT<:AbstractFloat}\ncritical_pressure(vc::WeibullVC{FT}, kr::FT = FT(0.001)) where {FT<:AbstractFloat}\n\nReturn the critical xylem water pressure at 25 °C that triggers a given amount of loss of conductance, given\n\nvc ComplexVC, LogisticVC, PowerVC, or WeibullVC type struct\nkr Reference conductance, default is 0.001\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#Pressure-volume-curve","page":"PlantHydraulics","title":"Pressure volume curve","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_pressure\ncapacitance_buffer","category":"page"},{"location":"modules/PlantHydraulics/#PlantHydraulics.xylem_pressure","page":"PlantHydraulics","title":"PlantHydraulics.xylem_pressure","text":"xylem_pressure(pv::LinearPVCurve{FT}, rvol::FT, T::FT) where {FT<:AbstractFloat}\nxylem_pressure(pv::SegmentedPVCurve{FT}, rvol::FT, T::FT) where {FT<:AbstractFloat}\n\nReturn the xylem water pressure in MPa, given\n\npv LinearPVCurve or SegmentedPVCurve type pressure volume curve\nrvol Relative volume (relative to maximum)\nT Temperature\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.capacitance_buffer","page":"PlantHydraulics","title":"PlantHydraulics.capacitance_buffer","text":"capacitance_buffer(pvc::LinearPVCurve{FT}) where {FT<:AbstractFloat}\ncapacitance_buffer(pvc::SegmentedPVCurve{FT}) where {FT<:AbstractFloat}\n\nReturn the relative capacictance buffer rate, given\n\npv LinearPVCurve or SegmentedPVCurve type pressure volume curve\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#Cavitation-legacy","page":"PlantHydraulics","title":"Cavitation legacy","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"clear_legacy!","category":"page"},{"location":"modules/PlantHydraulics/#PlantHydraulics.clear_legacy!","page":"PlantHydraulics","title":"PlantHydraulics.clear_legacy!","text":"clear_legacy!(spac::MonoElementSPAC{FT}) where {FT<:AbstractFloat}\nclear_legacy!(spac::MonoMLGrassSPAC{FT}) where {FT<:AbstractFloat}\nclear_legacy!(spac::MonoMLPalmSPAC{FT}) where {FT<:AbstractFloat}\nclear_legacy!(spac::MonoMLTreeSPAC{FT}) where {FT<:AbstractFloat}\nclear_legacy!(organ::Union{Leaf{FT}, Leaves2D{FT}, Root{FT}, Stem{FT}}) where {FT<:AbstractFloat}\nclear_legacy!(organ::Leaves1D{FT}) where {FT<:AbstractFloat}\n\nClear the legacy for hydraulic organ or system, given\n\nspac MonoElementSPAC, MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type structure\norgan Leaf, Leaves1D, Leaves2D, Root, or Stem type structure\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#FLow-profile","page":"PlantHydraulics","title":"FLow profile","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"flow_in\nflow_out\nroot_pk\nxylem_flow_profile!\nxylem_flow_profile!(organ::Union{Leaf{FT}, Leaves2D{FT}, Root{FT}, Stem{FT}}, Δt::FT) where {FT<:AbstractFloat}\nxylem_flow_profile!(spac::MonoElementSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/PlantHydraulics/#PlantHydraulics.flow_in","page":"PlantHydraulics","title":"PlantHydraulics.flow_in","text":"flow_in(organ::Union{Leaf{FT}, Leaves2D{FT}, Root{FT}, Stem{FT}}) where {FT<:AbstractFloat}\nflow_in(organ::Leaves1D{FT}) where {FT<:AbstractFloat}\nflow_in(organs::Vector{Leaves2D{FT}}) where {FT<:AbstractFloat}\nflow_in(organs::Vector{Stem{FT}}) where {FT<:AbstractFloat}\n\nReturn the flow rate, given\n\norgan Leaf, Leaves1D, Leaves2D, Root, or Stem type struct\norgans Vector of Leaves2D or Stem type struct\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.flow_out","page":"PlantHydraulics","title":"PlantHydraulics.flow_out","text":"flow_out(lf::Union{Leaf{FT}, Leaves2D{FT}}) where {FT<:AbstractFloat}\n\nReturn the net flow that escape from the leaf, given\n\nlf Leaf, Leaves2D, Root, or Stem type organ\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.root_pk","page":"PlantHydraulics","title":"PlantHydraulics.root_pk","text":"root_pk(root::Root{FT}) where {FT<:AbstractFloat}\n\nReturn the root end pressure and total hydraulic conductance to find solution of flow rates in all roots, given\n\nroot Root type struct\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.xylem_flow_profile!","page":"PlantHydraulics","title":"PlantHydraulics.xylem_flow_profile!","text":"This function is designed to serve the following functionalities:\n\nUpdate flow profile in different organs\nPartition root flow rates at different layers\nUpdate flow profile for entire SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.xylem_flow_profile!-Union{Tuple{FT}, Tuple{Union{ClimaCache.Leaf{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.Root{FT}, ClimaCache.Stem{FT}}, FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.xylem_flow_profile!","text":"xylem_flow_profile!(organ::Union{Leaf{FT}, Leaves2D{FT}, Root{FT}, Stem{FT}}, Δt::FT) where {FT<:AbstractFloat}\nxylem_flow_profile!(organ::Leaves1D{FT}, Δt::FT) where {FT<:AbstractFloat}\n\nUpdate organ flow rate profile after setting up the flow rate out, given\n\norgan Leaf, Leaves1D, Leaves2D, Root, or Stem type struct\nΔt Time step length\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#PlantHydraulics.xylem_flow_profile!-Union{Tuple{FT}, Tuple{ClimaCache.MonoElementSPAC{FT}, FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.xylem_flow_profile!","text":"xylem_flow_profile!(spac::MonoElementSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}\nxylem_flow_profile!(spac::MonoMLGrassSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}\nxylem_flow_profile!(spac::MonoMLPalmSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}\nxylem_flow_profile!(spac::MonoMLTreeSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}\n\nUpdate flow profiles for the soil-plant-air continuum (set up leaf flow rate from stomatal conductance first), given\n\nspac MonoElementSPAC, MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type SPAC system\nΔt Time step length\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#Pressure-profile","page":"PlantHydraulics","title":"Pressure profile","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_end_pressure\nxylem_pressure_profile!\nxylem_pressure_profile!(spac::MonoElementSPAC{FT}; update::Bool = true) where {FT<:AbstractFloat}\n∂E∂P","category":"page"},{"location":"modules/PlantHydraulics/#PlantHydraulics.xylem_end_pressure","page":"PlantHydraulics","title":"PlantHydraulics.xylem_end_pressure","text":"xylem_end_pressure(organ::Union{Leaf{FT}, Stem{FT}}, flow::FT) where {FT<:AbstractFloat}\nxylem_end_pressure(organ::Root{FT}, slayer::SoilLayer{FT}, flow::FT) where {FT<:AbstractFloat}\nxylem_end_pressure(spac::MonoElementSPAC{FT}, flow::FT) where {FT<:AbstractFloat}\n\nReturn the xylem end water pressure in MPa, given\n\norgan Leaf, Root, or Stem type struct\nslayer Soil layer corresponded to root\nflow Flow rate (per leaf area for Leaf) [mol (m⁻²) s⁻¹]\nspac MonoElementSPAC type struct\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.xylem_pressure_profile!","page":"PlantHydraulics","title":"PlantHydraulics.xylem_pressure_profile!","text":"This function is designed for the following purposes:\n\nUpdate organ pressure profile\nUpdate pressure profile for the entire SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.xylem_pressure_profile!-Union{Tuple{ClimaCache.MonoElementSPAC{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.xylem_pressure_profile!","text":"xylem_pressure_profile!(spac::MonoElementSPAC{FT}; update::Bool = true) where {FT<:AbstractFloat}\nxylem_pressure_profile!(spac::MonoMLGrassSPAC{FT}; update::Bool = true) where {FT<:AbstractFloat}\nxylem_pressure_profile!(spac::MonoMLPalmSPAC{FT}; update::Bool = true) where {FT<:AbstractFloat}\nxylem_pressure_profile!(spac::MonoMLTreeSPAC{FT}; update::Bool = true) where {FT<:AbstractFloat}\n\nUpdate xylem pressure profile (flow profile needs to be updated a priori), given\n\nspac MonoElementSPAC, MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type spac\nupdate If true, update xylem cavitation legacy\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#PlantHydraulics.∂E∂P","page":"PlantHydraulics","title":"PlantHydraulics.∂E∂P","text":"∂E∂P(lf::Union{Leaf{FT}, Leaves2D{FT}}, flow::FT; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂E∂P(lf::Leaves1D{FT}, flow::FT, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal hydraulic conductance, given\n\nlf Leaf, Leaves1D, or Leaves2D type struct\nflow Flow rate through the leaf xylem [mol m⁻² s⁻¹]\nδe Incremental flow rate, default is 1e-7\nind Which leaf in Leaves1D (1 for sunlit and 2 for shaded)\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#Critical-flow","page":"PlantHydraulics","title":"Critical flow","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"critical_flow\ncritical_flow(hs::LeafHydraulics{FT}, T::FT, ini::FT = FT(0.5); kr::FT = FT(0.001)) where {FT<:AbstractFloat}\ncritical_flow(spac::MonoElementSPAC{FT}, ini::FT = FT(0.5); kr::FT = FT(0.001)) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/PlantHydraulics/#PlantHydraulics.critical_flow","page":"PlantHydraulics","title":"PlantHydraulics.critical_flow","text":"This function returns the critical flow rate that triggers a given amount of loss of hydraulic conductance for\n\nLeaf hydraulic system\nMono element SPAC system\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.critical_flow-Union{Tuple{FT}, Tuple{ClimaCache.LeafHydraulics{FT}, FT}, Tuple{ClimaCache.LeafHydraulics{FT}, FT, FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.critical_flow","text":"critical_flow(hs::LeafHydraulics{FT}, T::FT, ini::FT = FT(0.5); kr::FT = FT(0.001)) where {FT<:AbstractFloat}\n\nReturn the critical flow rate that triggers a given amount of loss of conductance, given\n\nhs LeafHydraulics type struct\nT Liquid temperature\nini Initial guess\nkr Reference conductance, default is 0.001\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#PlantHydraulics.critical_flow-Union{Tuple{ClimaCache.MonoElementSPAC{FT}}, Tuple{FT}, Tuple{ClimaCache.MonoElementSPAC{FT}, FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.critical_flow","text":"critical_flow(spac::MonoElementSPAC{FT}, ini::FT = FT(0.5); kr::FT = FT(0.001)) where {FT<:AbstractFloat}\n\nReturn the critical flow rate that triggers a given amount of loss of conductance, given\n\nspac MonoElementSPAC type struct\nini Initial guess\nkr Reference conductance, default is 0.001\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#Tuning-factor","page":"PlantHydraulics","title":"Tuning factor","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"β_factor\nβ_factor!\nβ_factor!(spac::MonoElementSPAC{FT}) where {FT<:AbstractFloat}\nβ_factor!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/PlantHydraulics/#PlantHydraulics.β_factor","page":"PlantHydraulics","title":"PlantHydraulics.β_factor","text":"β_factor(f::Function, vc::AbstractXylemVC{FT}, x_25::FT) where {FT<:AbstractFloat}\nβ_factor(f::Function, vc::AbstractSoilVC{FT}, x_25::FT) where {FT<:AbstractFloat}\nβ_factor(f::Function, x_25::FT) where {FT<:AbstractFloat}\n\nReturn the β factor based on relative conductance or soil potential/pressure, given\n\nf Function to translate relative k to β, for example f(x) = x, f(x) = x², and f(x) = sqrt(x) for x in [0,1]\nvc Leaf vulnerability curve or soil vulnerability curve (moisture retention curve)\nx_25 Leaf xylem pressure corrected to 25 °C, soil water potential corrected to 25 °C (forcing on roots, note that this function may not be useful for plants with salt stress), or soil water   content\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.β_factor!","page":"PlantHydraulics","title":"PlantHydraulics.β_factor!","text":"This function updates the beta factor for SPAC if empirical models are used. The method is meant to support all SPAC defined in ClimaCache.jl:\n\nMonoElementSPAC\nMonoMLGrassSPAC\nMonoMLPalmSPAC\nMonoMLTreeSPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.β_factor!-Union{Tuple{ClimaCache.MonoElementSPAC{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.β_factor!","text":"β_factor!(spac::MonoElementSPAC{FT}) where {FT<:AbstractFloat}\n\nUpdate the beta factor for the LEAF component in SPAC, given\n\nspac MonoElementSPAC type SPAC\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#PlantHydraulics.β_factor!-Union{Tuple{Union{ClimaCache.MonoMLGrassSPAC{FT}, ClimaCache.MonoMLPalmSPAC{FT}, ClimaCache.MonoMLTreeSPAC{FT}}}, Tuple{FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.β_factor!","text":"β_factor!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nUpdate the β factor for the LEAVES component in SPAC, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type SPAC\n\nNote that if the β function is based on Kleaf or Pleaf, β factor is taken as that of leaf; if the β function is based on Ksoil, Psoil, or Θ, β is taken as the average weighted by flow rate in each     root.\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#Energy-budget","page":"PlantHydraulics","title":"Energy budget","text":"","category":"section"},{"location":"modules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"plant_energy!\nplant_energy!(spac::MonoMLGrassSPAC{FT}) where {FT<:AbstractFloat}\nplant_energy!(spac::MonoMLGrassSPAC{FT}, δt::FT) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/PlantHydraulics/#PlantHydraulics.plant_energy!","page":"PlantHydraulics","title":"PlantHydraulics.plant_energy!","text":"This function has two major functionalities:\n\nCompute marginal energy increase in each organ\nUpdate the temperature in each organ when time step provided\n\n\n\n\n\n","category":"function"},{"location":"modules/PlantHydraulics/#PlantHydraulics.plant_energy!-Union{Tuple{ClimaCache.MonoMLGrassSPAC{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.plant_energy!","text":"plant_energy!(spac::MonoMLGrassSPAC{FT}) where {FT<:AbstractFloat}\nplant_energy!(spac::MonoMLPalmSPAC{FT}) where {FT<:AbstractFloat}\nplant_energy!(spac::MonoMLTreeSPAC{FT}) where {FT<:AbstractFloat}\n\nCompute the marginal energy increase in spac, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type SPAC\n\n\n\n\n\n","category":"method"},{"location":"modules/PlantHydraulics/#PlantHydraulics.plant_energy!-Union{Tuple{FT}, Tuple{ClimaCache.MonoMLGrassSPAC{FT}, FT}} where FT<:AbstractFloat","page":"PlantHydraulics","title":"PlantHydraulics.plant_energy!","text":"plant_energy!(spac::MonoMLGrassSPAC{FT}, δt::FT) where {FT<:AbstractFloat}\nplant_energy!(spac::MonoMLPalmSPAC{FT}, δt::FT) where {FT<:AbstractFloat}\nplant_energy!(spac::MonoMLTreeSPAC{FT}, δt::FT) where {FT<:AbstractFloat}\n\nCompute the marginal energy increase in spac, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type SPAC\nδt Time step\n\n\n\n\n\n","category":"method"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum","text":"","category":"section"},{"location":"modules/SoilPlantAirContinuum/","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum","text":"CurrentModule = SoilPlantAirContinuum","category":"page"},{"location":"modules/SoilPlantAirContinuum/#Core-function","page":"SoilPlantAirContinuum","title":"Core function","text":"","category":"section"},{"location":"modules/SoilPlantAirContinuum/","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum","text":"initialize!\nsoil_plant_air_continuum!\nsoil_plant_air_continuum!(spac::Union{MonoMLGrassSPAC, MonoMLPalmSPAC, MonoMLTreeSPAC{FT}}, δt::FT; update::Bool = false, θ_on::Bool = true) where {FT<:AbstractFloat}\nadjusted_time\ntime_stepper!","category":"page"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.initialize!","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.initialize!","text":"initialize!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nInitialize the SPAC, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.soil_plant_air_continuum!","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.soil_plant_air_continuum!","text":"This function runs the model using the following steps:\n\nRun canopy RT model\nRun hydraulic model\nRun photosynthesis model\nRun canopy fluorescence model\nRun soil water and energy budget (calculate ∂Θ∂t and ∂e∂t only)\nRun leaf stomatal conductances (calculate ∂g∂t only)\nRun leaf energy budget (calculate ∂T∂t only)\nRun time stepper (using ∂X∂t * δt, and make sure δt is not too high)\n\nThis function is supposed to have the highest hierarchy, and should support all SPAC types defined in ClimaCache.jl. Note to update the water flow profile when initializing the SPAC.\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.soil_plant_air_continuum!-Union{Tuple{FT}, Tuple{Union{ClimaCache.MonoMLTreeSPAC{FT}, ClimaCache.MonoMLGrassSPAC, ClimaCache.MonoMLPalmSPAC}, FT}} where FT<:AbstractFloat","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.soil_plant_air_continuum!","text":"soil_plant_air_continuum!(spac::Union{MonoMLGrassSPAC, MonoMLPalmSPAC, MonoMLTreeSPAC{FT}}, δt::FT; update::Bool = false, θ_on::Bool = true, t_on::Bool = true) where {FT<:AbstractFloat}\nsoil_plant_air_continuum!(spac::Union{MonoMLGrassSPAC, MonoMLPalmSPAC, MonoMLTreeSPAC{FT}}; update::Bool = false) where {FT<:AbstractFloat}\n\nRun SPAC model and move forward in time with time stepper controller, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\nδt Time step (if not given, solve for steady state solution)\nupdate If true, update leaf xylem legacy effect\nθ_on If true, soil water budget is on (set false to run sensitivity analysis or prescribing mode)\nt_on If true, plant energy budget is on (set false to run sensitivity analysis or prescribing mode)\n\n\n\n\n\n","category":"method"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.adjusted_time","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.adjusted_time","text":"adjusted_time(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}, δt::FT; θ_on::Bool = true, t_on::Bool = true) where {FT<:AbstractFloat}\n\nReturn adjusted time that soil does not over saturate or drain, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\nδt Time step\nθ_on If true, soil water budget is on (set false to run sensitivity analysis or prescribing mode)\nt_on If true, plant energy budget is on (set false to run sensitivity analysis or prescribing mode)\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.time_stepper!","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.time_stepper!","text":"time_stepper!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}, δt::FT; update::Bool = false, θ_on::Bool = true, t_on::Bool = true) where {FT<:AbstractFloat}\ntime_stepper!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}; update::Bool = false) where {FT<:AbstractFloat}\n\nMove forward in time for SPAC with time stepper controller, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\nδt Time step (if not given, solve for steady state solution)\nupdate If true, update leaf xylem legacy effect\nθ_on If true, soil water budget is on (set false to run sensitivity analysis or prescribing mode)\nt_on If true, plant energy budget is on (set false to run sensitivity analysis or prescribing mode)\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilPlantAirContinuum/#Update-SPAC","page":"SoilPlantAirContinuum","title":"Update SPAC","text":"","category":"section"},{"location":"modules/SoilPlantAirContinuum/","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum","text":"update!\nupdate!(air::AirLayer{FT}; p_CO₂::Union{Number,Nothing} = nothing, p_H₂O::Union{Number,Nothing} = nothing, rh::Union{Number,Nothing} = nothing, t::Union{Number,Nothing} = nothing, vpd::Union{Number,Nothing} = nothing, wind::Union{Number,Nothing} = nothing) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.update!","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.update!","text":"This function updates the environmental conditions and the soil-plant-air-continuum. Supported functionalities are for\n\nAirLayer\nSoilPlantAirContinuum\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.update!-Union{Tuple{ClimaCache.AirLayer{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.update!","text":"update!(air::AirLayer{FT};\n        p_CO₂::Union{Number,Nothing} = nothing,\n        p_H₂O::Union{Number,Nothing} = nothing,\n        rh::Union{Number,Nothing} = nothing,\n        t::Union{Number,Nothing} = nothing,\n        vpd::Union{Number,Nothing} = nothing,\n        wind::Union{Number,Nothing} = nothing\n) where {FT<:AbstractFloat}\n\nUpdate the environmental conditions (such as saturated vapor pressure and relative humidity) of the air surrounding the leaf, given\n\nair AirLayer type structure\np_CO₂ CO₂ partial pressure in Pa. Optional, default is nothing\np_H₂O Vapor pressure in Pa. Optional, default is nothing\nrh Relatibe humidity (fraction). Optional, default is nothing\nt Air temperature in K. Optional, default is nothing\nvpd Vapor pressure deficit Pa. Optional, default is nothing\nwind Wind speed in m s⁻¹. Optional, default is nothing\n\n\n\n\n\n","category":"method"},{"location":"modules/SoilPlantAirContinuum/#Measures","page":"SoilPlantAirContinuum","title":"Measures","text":"","category":"section"},{"location":"modules/SoilPlantAirContinuum/","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum","text":"CNPP\nGPP\nPPAR\nT_VEG","category":"page"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.CNPP","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.CNPP","text":"CNPP(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nReturn the canopy net primary productivity per ground area, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.GPP","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.GPP","text":"GPP(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nReturn the gross primary productivity per ground area, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.PPAR","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.PPAR","text":"PPAR(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nReturn the canopy integrated PPAR per ground area, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilPlantAirContinuum/#SoilPlantAirContinuum.T_VEG","page":"SoilPlantAirContinuum","title":"SoilPlantAirContinuum.T_VEG","text":"T_VEG(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nReturn the transpiration rate per ground area, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilHydraulics/#API","page":"SoilHydraulics","title":"API","text":"","category":"section"},{"location":"modules/SoilHydraulics/","page":"SoilHydraulics","title":"SoilHydraulics","text":"CurrentModule = SoilHydraulics","category":"page"},{"location":"modules/SoilHydraulics/#Vulnerability-curve","page":"SoilHydraulics","title":"Vulnerability curve","text":"","category":"section"},{"location":"modules/SoilHydraulics/","page":"SoilHydraulics","title":"SoilHydraulics","text":"BrooksCorey{FT}(vg::VanGenuchten{FT}) where {FT<:AbstractFloat}\nsoil_θ\nsoil_ψ_25\nrelative_hydraulic_conductance","category":"page"},{"location":"modules/SoilHydraulics/#ClimaCache.BrooksCorey-Union{Tuple{ClimaCache.VanGenuchten{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"SoilHydraulics","title":"ClimaCache.BrooksCorey","text":"BrooksCorey{FT}(vg::VanGenuchten{FT}) where {FT<:AbstractFloat}\n\nA constructor for BrooksCorey to create BrooksCorey type soil from VanGenuchten type, given\n\nvg VanGenuchten type soil water retention curve\n\n\n\n\n\n","category":"method"},{"location":"modules/SoilHydraulics/#SoilHydraulics.soil_θ","page":"SoilHydraulics","title":"SoilHydraulics.soil_θ","text":"soil_θ(bc::BrooksCorey{FT}, ψ_25::FT) where {FT<:AbstractFloat}\nsoil_θ(vg::VanGenuchten{FT}, ψ_25::FT) where {FT<:AbstractFloat}\n\nReturn the soil water content, given\n\nbc or vg BrooksCorey or VanGenuchten type structure\nψ_25 Soil metric potential corrected to 25 Celcius\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilHydraulics/#SoilHydraulics.soil_ψ_25","page":"SoilHydraulics","title":"SoilHydraulics.soil_ψ_25","text":"soil_ψ_25(bc::BrooksCorey{FT}, θ::FT; oversaturation::Bool = false) where {FT<:AbstractFloat}\nsoil_ψ_25(vg::VanGenuchten{FT}, θ::FT; oversaturation::Bool = false) where {FT<:AbstractFloat}\n\nReturn the soil metric potential, given\n\nbc or vg BrooksCorey or VanGenuchten type structure\nθ Soil volumetric water content (absolute value)\noversaturation If true, allow for soil water oversaturation\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilHydraulics/#SoilHydraulics.relative_hydraulic_conductance","page":"SoilHydraulics","title":"SoilHydraulics.relative_hydraulic_conductance","text":"relative_hydraulic_conductance(bc::BrooksCorey{FT}, θ::FT) where {FT<:AbstractFloat}\nrelative_hydraulic_conductance(bc::BrooksCorey{FT}, ψ::Bool, ψ_25::FT) where {FT<:AbstractFloat}\nrelative_hydraulic_conductance(vg::VanGenuchten{FT}, θ::FT) where {FT<:AbstractFloat}\nrelative_hydraulic_conductance(vg::VanGenuchten{FT}, ψ::Bool, ψ_25::FT) where {FT<:AbstractFloat}\n\nReturn the relative hydraulic conductance of the soil, given\n\nbc or vg BrooksCorey or VanGenuchten type structure\nθ Soil volumetric water content (absolute value)\nψ Bool to indicate that next parameter is potential\nψ_25 Soil metric potential at a reference temperature of 25 °C\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilHydraulics/#Soil-energywater-budget","page":"SoilHydraulics","title":"Soil energy+water budget","text":"","category":"section"},{"location":"modules/SoilHydraulics/","page":"SoilHydraulics","title":"SoilHydraulics","text":"root_sink\nsoil_budget!\nsoil_budget!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\nsoil_budget!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}, δt::FT) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/SoilHydraulics/#SoilHydraulics.root_sink","page":"SoilHydraulics","title":"SoilHydraulics.root_sink","text":"root_sink(root::Root{FT}) where {FT<:AbstractFloat}\n\nReturn root water update, given\n\nroot Root type struct that may contain non- and steady state flow\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilHydraulics/#SoilHydraulics.soil_budget!","page":"SoilHydraulics","title":"SoilHydraulics.soil_budget!","text":"This function have two major features:\n\nCompute the marginal change of soil water content and energy\nUpdate soil water content and energy without over-saturating or draining the soil\n\n\n\n\n\n","category":"function"},{"location":"modules/SoilHydraulics/#SoilHydraulics.soil_budget!-Union{Tuple{Union{ClimaCache.MonoMLGrassSPAC{FT}, ClimaCache.MonoMLPalmSPAC{FT}, ClimaCache.MonoMLTreeSPAC{FT}}}, Tuple{FT}} where FT<:AbstractFloat","page":"SoilHydraulics","title":"SoilHydraulics.soil_budget!","text":"soil_budget!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nUpdate the marginal increase of soil water content and energy per layer, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\n\n\n\n\n\n","category":"method"},{"location":"modules/SoilHydraulics/#SoilHydraulics.soil_budget!-Union{Tuple{FT}, Tuple{Union{ClimaCache.MonoMLGrassSPAC{FT}, ClimaCache.MonoMLPalmSPAC{FT}, ClimaCache.MonoMLTreeSPAC{FT}}, FT}} where FT<:AbstractFloat","page":"SoilHydraulics","title":"SoilHydraulics.soil_budget!","text":"soil_budget!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}, δt::FT) where {FT<:AbstractFloat}\n\nRun soil water and energy budget, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC SPAC\nδt Time step\n\n\n\n\n\n","category":"method"},{"location":"modules/WaterPhysics/#API","page":"WaterPhysics","title":"API","text":"","category":"section"},{"location":"modules/WaterPhysics/","page":"WaterPhysics","title":"WaterPhysics","text":"CurrentModule = WaterPhysics","category":"page"},{"location":"modules/WaterPhysics/#Trace-molecule","page":"WaterPhysics","title":"Trace molecule","text":"","category":"section"},{"location":"modules/WaterPhysics/","page":"WaterPhysics","title":"WaterPhysics","text":"AbstractTrace\nAbstractTraceGas\nAbstractTraceLiquid\nTraceGasAir\nTraceGasCO₂\nTraceGasH₂O\nTraceGasN₂\nTraceGasO₂\nTraceLiquidH₂O","category":"page"},{"location":"modules/WaterPhysics/#WaterPhysics.AbstractTrace","page":"WaterPhysics","title":"WaterPhysics.AbstractTrace","text":"WaterPhysics uses the multiple dispatch approach to calculate the temperature and pressure dependent physical properties of water and other molecules, such as CO₂. The trace molecules and mediums     are catergorized to gas or liquid subject to a general type AbstractTrace. Hierarchy of AbstractTrace:\n\nAbstractTraceGas\nAbstractTraceLiquid\n\nabstract type AbstractTrace{FT<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#WaterPhysics.AbstractTraceGas","page":"WaterPhysics","title":"WaterPhysics.AbstractTraceGas","text":"The gas can be either the target trace molecule (e.g., when computing diffusive coefficient of CO₂ in water using diffusive_coefficient) or the medium (e.g., when computing diffusive     coefficient or CO₂ in air using diffusive_coefficient). Currently, WaterPhysics supports the following subtypes of AbstractTraceGas:\n\nTraceGasAir\nTraceGasCO₂\nTraceGasH₂O\nTraceGasO₂\n\nabstract type AbstractTraceGas{FT<:AbstractFloat} <: WaterPhysics.AbstractTrace{FT<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#WaterPhysics.AbstractTraceLiquid","page":"WaterPhysics","title":"WaterPhysics.AbstractTraceLiquid","text":"The liquid can be either the medium for gas (e.g., when computing diffusive coefficient of CO₂ in water using diffusive_coefficient) or the target molecule (e.g., when computing surface     tension of water using surface_tension). Currently. WaterPhysics supports the following subtypes of AbstractTraceLiquid:\n\nTraceLiquidH₂O\n\nabstract type AbstractTraceLiquid{FT<:AbstractFloat} <: WaterPhysics.AbstractTrace{FT<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#WaterPhysics.TraceGasAir","page":"WaterPhysics","title":"WaterPhysics.TraceGasAir","text":"struct TraceGasAir{FT<:AbstractFloat} <: WaterPhysics.AbstractTraceGas{FT<:AbstractFloat}\n\nIdentity trace label for air.\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#WaterPhysics.TraceGasCO₂","page":"WaterPhysics","title":"WaterPhysics.TraceGasCO₂","text":"struct TraceGasCO₂{FT<:AbstractFloat} <: WaterPhysics.AbstractTraceGas{FT<:AbstractFloat}\n\nIdentity trace label for gas phase CO₂.\n\nFields\n\nd_air::AbstractFloat\n\n: Diffusive coefficient in air in [m² s⁻¹]\n\na_298::AbstractFloat\n\n: Hydrodynamic radius of the solute in [m]\n\na_a::AbstractFloat\n\n: Coefficient to make temperature correction over ydrodynamic radius\n\nd_water::AbstractFloat\n\n: Diffusive coefficient in liquid water in [m² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#WaterPhysics.TraceGasH₂O","page":"WaterPhysics","title":"WaterPhysics.TraceGasH₂O","text":"struct TraceGasH₂O{FT<:AbstractFloat} <: WaterPhysics.AbstractTraceGas{FT<:AbstractFloat}\n\nIdentity trace label for gas phase H₂O.\n\nFields\n\nd_air::AbstractFloat\n\n: Diffusive coefficient in air in [m² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#WaterPhysics.TraceGasN₂","page":"WaterPhysics","title":"WaterPhysics.TraceGasN₂","text":"struct TraceGasN₂{FT<:AbstractFloat} <: WaterPhysics.AbstractTraceGas{FT<:AbstractFloat}\n\nIdentity trace label for gas phase N₂.\n\nFields\n\na_298::AbstractFloat\n\n: Hydrodynamic radius of the solute in [m]\n\na_a::AbstractFloat\n\n: Coefficient to make temperature correction over ydrodynamic radius\n\nd_water::AbstractFloat\n\n: Diffusive coefficient in liquid water in [m² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#WaterPhysics.TraceGasO₂","page":"WaterPhysics","title":"WaterPhysics.TraceGasO₂","text":"struct TraceGasO₂{FT<:AbstractFloat} <: WaterPhysics.AbstractTraceGas{FT<:AbstractFloat}\n\nIdentity trace label for gas phase O₂.\n\nFields\n\nd_air::AbstractFloat\n\n: Diffusive coefficient in air in [m² s⁻¹]\n\nd_water::AbstractFloat\n\n: Diffusive coefficient in liquid water in [m² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#WaterPhysics.TraceLiquidH₂O","page":"WaterPhysics","title":"WaterPhysics.TraceLiquidH₂O","text":"struct TraceLiquidH₂O{FT<:AbstractFloat} <: WaterPhysics.AbstractTraceLiquid{FT<:AbstractFloat}\n\nIdentity trace label for liquid phase H₂O.\n\nFields\n\nγ_cor::AbstractFloat\n\n: Surface tension coefficient correction\n\nγ_exp::AbstractFloat\n\n: Surface tension coefficient exponent\n\nγ_k::AbstractFloat\n\n: Surface tension coefficient k in [N m⁻¹]\n\nγ_ref::AbstractFloat\n\n: Surface tension at 298.15 K in [N m⁻¹]\n\nγ_T_c::AbstractFloat\n\n: Surface tension coefficient T_crit in [K]\n\nυ_A::AbstractFloat\n\n: Viscosity coefficient A in [Pa s]\n\nυ_B::AbstractFloat\n\n: Viscosity coefficient B in [K]\n\nυ_C::AbstractFloat\n\n: Viscosity coefficient C in [K⁻¹]\n\nυ_D::AbstractFloat\n\n: Viscosity coefficient D in [K⁻²]\n\n\n\n\n\n","category":"type"},{"location":"modules/WaterPhysics/#Capillary-pressure","page":"WaterPhysics","title":"Capillary pressure","text":"","category":"section"},{"location":"modules/WaterPhysics/","page":"WaterPhysics","title":"WaterPhysics","text":"capillary_pressure","category":"page"},{"location":"modules/WaterPhysics/#WaterPhysics.capillary_pressure","page":"WaterPhysics","title":"WaterPhysics.capillary_pressure","text":"Capillary pressure of the trace liquid in a pipe is a function of surface tension (γ), pipe raduis (r), and contact angle (α):\n\nP_c = dfrac2  γ  textcos(α)r\n\ncapillary_pressure(r::FT, T::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\ncapillary_pressure(r::FT, T::FT, α::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nCapillary pressure of trace liquid in [Pa], given\n\nr Curvature radius in [m]\nT Trace liquid temperature in [K]\nmed Medium. Optional. Default is liquid water\nα Contact angle in [°]\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#Diffusive-coefficient","page":"WaterPhysics","title":"Diffusive coefficient","text":"","category":"section"},{"location":"modules/WaterPhysics/","page":"WaterPhysics","title":"WaterPhysics","text":"diffusive_coefficient\nrelative_diffusive_coefficient","category":"page"},{"location":"modules/WaterPhysics/#WaterPhysics.diffusive_coefficient","page":"WaterPhysics","title":"WaterPhysics.diffusive_coefficient","text":"Diffusion of trace molecules in medium is temperature dependent, to calculate this temperature dependency, we provide a function to quick estimate this value for different trace molecules using     diffusive_coefficient. The methods supports the computation for the coefficient in gas and liquid.\n\nFor the diffusive coefficient of gas in air, the coefficient is simply treated as a function of temperature and the reference coefficient at 298.15 K:\n\nD = D_\\text{ref} ⋅ \\left( \\dfrac{T}{298.15} \\right)^{1.8}\n\ndiffusive_coefficient(T::FT, mol::Union{TraceGasCO₂{FT}, TraceGasH₂O{FT}, TraceGasO₂{FT}}, med::TraceGasAir{FT}) where {FT<:AbstractFloat}\n\nDiffusive coefficient of trace molecule in [m² s⁻¹], given\n\nT Trace medium temperature in [K]\nmol Trace molecule\nmed Diffusion medium (air)\n\nThe diffusive coefficient of disolved gas in liquid water is also a function of temperature. The calculation is based on the empirical formulation and variables from Cadogen et al. (2015) Diffusion     coefficients of CO₂ and N₂ in water at temperatures between 298.15 K and 423.15 K at pressures up to 45 MPa.\n\ndiffusive_coefficient(T::FT, mol::Union{TraceGasCO₂{FT}, TraceGasN₂{FT}}, med::TraceLiquidH₂O{FT}) where {FT<:AbstractFloat}\n\nDiffusive coefficient of trace molecule in [m² s⁻¹], given\n\nT Trace medium temperature in [K]\nmol Trace molecule\nmed Diffusion medium (liquid water)\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#WaterPhysics.relative_diffusive_coefficient","page":"WaterPhysics","title":"WaterPhysics.relative_diffusive_coefficient","text":"The temperature dependency of diffusive coefficient impacts leaf gas exchange via change the maximal stomatal conductance to H₂O vapor and CO₂, given that Since the stomatal conductance should not     exceed its structural limit. To account for this effect, we provide a function to calculate the diffusive coefficient relative to 25 Celcius.\n\nAs mentioned in diffusive_coefficient, relative diffusive coefficient of target gas in gas medium is calculated as an exponential function of temperature. The shortcut method is\n\nrelative_diffusive_coefficient(T::FT, mol::AbstractTraceGas{FT} = TraceGasH₂O{FT}(), med::AbstractTraceGas{FT} = TraceGasAir{FT}()) where {FT<:AbstractFloat}\n\nRelative diffusive coefficient of trace gas in medium, given\n\nT Water vapor temperature in [K]\nmol Trace molecule. Optional, default is water vapor\nmed Medium. Optional, default is air\n\nAs to disolved gas diffsuin in liquid medium, the relative coefficient is also computed based on the empirical formulation from Cadogan et al. (2014).\n\nrelative_diffusive_coefficient(T::FT, mol::Union{TraceGasCO₂{FT}, TraceGasN₂{FT}}, med::TraceLiquidH₂O{FT}) where {FT<:AbstractFloat}\n\nRelative diffusive coefficient of trace gas in medium, given\n\nT Water vapor temperature in [K]\nmol Trace molecule\nmed Medium (liquid water)\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#Latent-heat-of-evaporation","page":"WaterPhysics","title":"Latent heat of evaporation","text":"","category":"section"},{"location":"modules/WaterPhysics/","page":"WaterPhysics","title":"WaterPhysics","text":"latent_heat_vapor","category":"page"},{"location":"modules/WaterPhysics/#WaterPhysics.latent_heat_vapor","page":"WaterPhysics","title":"WaterPhysics.latent_heat_vapor","text":"Water evaporation from liquid phase is a key process to regulate leaf temperature, and to best represent this process. We computed the latent heat coefficient from water temperature:\n\nlatent_heat_vapor(T::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nLatent heat of vaporization in [J kg⁻¹], given\n\nT Medium temperature in [K]\nmed Medium. Optional. Default is liquid water\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#Surface-tension-of-air-water-interface","page":"WaterPhysics","title":"Surface tension of air-water interface","text":"","category":"section"},{"location":"modules/WaterPhysics/","page":"WaterPhysics","title":"WaterPhysics","text":"surface_tension\nrelative_surface_tension","category":"page"},{"location":"modules/WaterPhysics/#WaterPhysics.surface_tension","page":"WaterPhysics","title":"WaterPhysics.surface_tension","text":"When water temperature increases, the surface tension at the air-water interface decreases. Surface tension changes impacts the plant water transport via two aspects. First, if surface tension is     lower, for a constant soil water content, the soil matrix potential gets less negative because the capillary pressure at the air-water interface decreases. And this is beneficial to plants.     Second, the air-water interface at the pit membrane also has lower capillary pressure when temperature increases, meaning that the xylem conduits are less resistant to drought-induced air-seeded     cavitation. And this is harmful for plants. Though the surface tension does not differ much with temperature change within the plant physiological active range, we account for this effect in our     Land model. The equation used is (see http://www.iapws.org/relguide/Surf-H2O.html)\n\nγ = 02358  left( 1 - dfracTT_c right)^1256  left 1 - 0625  left( 1 - dfracTT_c right) right\n\nsurface_tension(T::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nSurface tension of trace liquid in [N m⁻¹], given\n\nT Liquid water temperature in [K]\nmed Medium. Optional. Default is liquid water\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#WaterPhysics.relative_surface_tension","page":"WaterPhysics","title":"WaterPhysics.relative_surface_tension","text":"relative_surface_tension(T::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nRelative surface tension of trace liquid relative to 298.15 K, given\n\nT Liquid water temperature in [K]\nmed Medium. Optional. Default is liquid water\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#Vapor-pressure","page":"WaterPhysics","title":"Vapor pressure","text":"","category":"section"},{"location":"modules/WaterPhysics/","page":"WaterPhysics","title":"WaterPhysics","text":"saturation_vapor_pressure\nsaturation_vapor_pressure_slope\npressure_correction","category":"page"},{"location":"modules/WaterPhysics/#WaterPhysics.saturation_vapor_pressure","page":"WaterPhysics","title":"WaterPhysics.saturation_vapor_pressure","text":"When temperature increases, liquid water vapor pressure increases exponentially. And this correlation is accounted for using the functions below:\n\nsaturation_vapor_pressure(T::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\nsaturation_vapor_pressure(T::FT, Ψ::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nSaturation vapor pressure in [Pa], given\n\nT Liquid water temperature in [K]\nmed Medium. Optional. Default is liquid water\nΨ Liquid water pressure in [Pa], positive/negative for convex/concave interface; if Ψ is given, pressure_correction is made\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#WaterPhysics.saturation_vapor_pressure_slope","page":"WaterPhysics","title":"WaterPhysics.saturation_vapor_pressure_slope","text":"Compute the the 1st order derivative of saturation vapor pressure over a plane surface by integration of the Clausius-Clapeyron relation. The re-arranged Clausius-Clapeyron relation is\n\nfracP_sat^*T = P_sat  dfrac LH_0 + Δc_p  (T - T_triple)\n\nsaturation_vapor_pressure_slope(T::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\nsaturation_vapor_pressure_slope(T::FT, Ψ::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nFirst order derivative of saturation vapor pressure in [Pa K⁻¹], given\n\nT Liquid water temperature in [K]\nmed Medium. Optional. Default is liquid water\nΨ Liquid water pressure in [Pa], positive/negative for convex/concave interface; if Ψ is given, pressure_correction is made\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#WaterPhysics.pressure_correction","page":"WaterPhysics","title":"WaterPhysics.pressure_correction","text":"Yet, the saturation vapor pressure is not only a function of temperature, but also a function of the air-water interface curvature, known as the Kelvin equation. The package provide     pressure_correction to make the correction. The Kelvin equation is\n\nlog left( dfracP_satP_sat^* right) = dfracΨ  V_mR  T\n\npressure_correction(T::FT, Ψ::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nKelvin correction factor for saturation vapor pressure, given\n\nT Liquid water temperature in [K]\nΨ Liquid water pressure in [Pa], positive/negative for convex/concave interface\nmed Medium. Optional. Default is liquid water\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#Viscosity-of-liquid-water","page":"WaterPhysics","title":"Viscosity of liquid water","text":"","category":"section"},{"location":"modules/WaterPhysics/","page":"WaterPhysics","title":"WaterPhysics","text":"viscosity\nrelative_viscosity","category":"page"},{"location":"modules/WaterPhysics/#WaterPhysics.viscosity","page":"WaterPhysics","title":"WaterPhysics.viscosity","text":"When temperature increases, liquid water viscosuty decreases, meaning that the resistance for water decreases and the pressure drop per flow rate decreases. This effect is pretty significant as 1     degree increase of temperature results in about 2.4% drop in viscosity, and this is very beneficial to plant water transport. Unfortunately, to our knowledge, very few models account for this     effect when modeling plant hydraulics because of the difficulty in modeling the energy budget along the flow path. We plan to have this effect accounted for in our CliMA Land model, by computing     the water tempreature along the flow path and thus the viscosity change.  Equation used is\n\nυ = A  exp left( dfracBT + CT + DT^2 right)\n\nand the fitting parameters are from Reid, Prausnitz, & Poling (1987), valid through 273-643 K\n\nA = 1.856E-14 # Pa s\nB = 4209      # K\nC = 0.04527   # K⁻¹\nD = -3.376E-5 # K⁻²\n\nviscosity(T::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nViscosity in [Pa s], given\n\nT Liquid water temperature in [K]\nmed Medium. Optional. Default is liquid water\n\n\n\n\n\n","category":"function"},{"location":"modules/WaterPhysics/#WaterPhysics.relative_viscosity","page":"WaterPhysics","title":"WaterPhysics.relative_viscosity","text":"relative_viscosity(T::FT, med::TraceLiquidH₂O{FT} = TraceLiquidH₂O{FT}()) where {FT<:AbstractFloat}\n\nViscosity relative to 298.15 K, given\n\nT Liquid water temperature in [K]\nliquid Optional. Default is liquid water\n\n\n\n\n\n","category":"function"},{"location":"tips/#Git-and-Julia-Tips-for-CliMA.Land","page":"Tips","title":"Git and Julia Tips for CliMA.Land","text":"","category":"section"},{"location":"tips/#Rebase-the-commits-before-merging-into-main","page":"Tips","title":"Rebase the commits before merging into main","text":"","category":"section"},{"location":"tips/","page":"Tips","title":"Tips","text":"Switch to the feature branch and make sure you have a clean workspace\ngit checkout FeatureBranch\ngit status to confirm zero uncommitted changes\nBackup current branch to avoid unexpected errors\ngit checkout -b FeatureBranch_Backup\nSync the main branch\ngit checkout main\ngit pull\nSwitch to the feature branch and merge main into it\ngit checkout FeatureBranch\ngit status to confirm zero uncommitted changes\ngit merge main\nResolve conflicts and commit them if any\nReabse the feature branch\ngit reset origin/main to rewrite history\ngit diff (optional) would show all the changes\ngit add --all to add local changes on top of main\ngit commit -m \"Single commit message\"\ngit push -f to force push because of the re-written history\nCreate a Pull Request\nThrough the web\nRemove local unnecessary branch (e.g., FeatureBranch_backup)\ngit branch -d FeatureBranch_Backup\ngit branch -D FeatureBranch_Backup to force remove","category":"page"},{"location":"modules/ClimaCache/#ClimaCache","page":"ClimaCache","title":"ClimaCache","text":"","category":"section"},{"location":"modules/ClimaCache/","page":"ClimaCache","title":"ClimaCache","text":"CurrentModule = ClimaCache","category":"page"},{"location":"modules/ClimaCache/#Environmental-Conditions","page":"ClimaCache","title":"Environmental Conditions","text":"","category":"section"},{"location":"modules/ClimaCache/","page":"ClimaCache","title":"ClimaCache","text":"AirLayer\nMeteorology\nAbstractSoilVC\nBrooksCorey\nVanGenuchten\nVanGenuchten{FT}(name::String) where {FT<:AbstractFloat}\nAbstractSoilAlbedo\nBroadbandSoilAlbedo\nHyperspectralSoilAlbedo\nSoilLayer\nSoil","category":"page"},{"location":"modules/ClimaCache/#ClimaCache.AirLayer","page":"ClimaCache","title":"ClimaCache.AirLayer","text":"mutable struct AirLayer{FT<:AbstractFloat}\n\nStructure that stores air layer information\n\nFields\n\nZ::AbstractFloat\n\n: Mean height of the layer [m]\n\nΔZ::AbstractFloat\n\n: Layer thickness [m]\n\nP_AIR::AbstractFloat\n\n: Atmospheric pressure [Pa]\n\np_CO₂::AbstractFloat\n\n: CO₂ partial pressure [Pa]\n\np_H₂O::AbstractFloat\n\n: H₂O partial pressure [Pa]\n\nt::AbstractFloat\n\n: Temperature [K]\n\nwind::AbstractFloat\n\n: Wind speed [m s⁻¹]\n\ne::AbstractFloat\n\n: Total energy within the air layer [J m⁻²]\n\nn_CO₂::AbstractFloat\n\n: Mole of CO₂ per surface area [mol m⁻²]\n\nn_H₂O::AbstractFloat\n\n: Mole of H₂O per surface area [mol m⁻²]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in total energy [J m⁻² s⁻¹]\n\n∂CO₂∂t::AbstractFloat\n\n: Marginal increase in total moles of CO₂ [mol m⁻² s⁻¹]\n\n∂H₂O∂t::AbstractFloat\n\n: Marginal increase in total moles of H₂O [mol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Meteorology","page":"ClimaCache","title":"ClimaCache.Meteorology","text":"mutable struct Meteorology{FT<:AbstractFloat}\n\nStructure that stores meteorological information\n\nFields\n\nrain::AbstractFloat\n\n: Precipitation in form of rain (before interception) [mol m⁻²]\n\nsnow::AbstractFloat\n\n: Precipitation in form of snow (before interception) [mol m⁻²]\n\nt_air::AbstractFloat\n\n: Air temperature as the boundary condition for canopy airspace [K]\n\nt_precip::AbstractFloat\n\n: Precipitation temperature [K]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractSoilVC","page":"ClimaCache","title":"ClimaCache.AbstractSoilVC","text":"abstract type AbstractSoilVC{FT<:AbstractFloat}\n\nHierarchy of AbstractSoilVC:\n\nBrooksCorey\nVanGenuchten\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BrooksCorey","page":"ClimaCache","title":"ClimaCache.BrooksCorey","text":"mutable struct BrooksCorey{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nBrooks Corey soil parameters\n\nFields\n\nK_MAX::AbstractFloat\n\n: Maximum soil hydraulic conductivity at 25 °C [mol m⁻¹ s⁻¹ MPa⁻¹]\n\nB::AbstractFloat\n\n: Soil b\n\nTYPE::String\n\n: Soil type\n\nΨ_SAT::AbstractFloat\n\n: Potential at saturation [MPa]\n\nΘ_SAT::AbstractFloat\n\n: Saturated soil volumetric water content\n\nΘ_RES::AbstractFloat\n\n: Residual soil volumetric water content\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.VanGenuchten","page":"ClimaCache","title":"ClimaCache.VanGenuchten","text":"mutable struct VanGenuchten{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nvan Genuchten soil parameters\n\nFields\n\nK_MAX::AbstractFloat\n\n: Maximum soil hydraulic conductivity at 25 °C [mol m⁻¹ s⁻¹ MPa⁻¹]\n\nN::AbstractFloat\n\n: Soil n is Measure of the pore-size distribution\n\nTYPE::String\n\n: Soil type\n\nα::AbstractFloat\n\n: Soil α is related to the inverse of the air entry suction, α > 0\n\nΘ_RES::AbstractFloat\n\n: Residual soil volumetric water content\n\nΘ_SAT::AbstractFloat\n\n: Saturated soil volumetric water content\n\nM::AbstractFloat\n\n: Soil m = 1 - 1/n\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.VanGenuchten-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"ClimaCache","title":"ClimaCache.VanGenuchten","text":"VanGenuchten{FT}(name::String) where {FT<:AbstractFloat}\n\nConstructor for VanGenuchten, given\n\nname Soil type name, need to be Sand, Loamy Sand, Sandy Loam, Loam (default), Sandy Clay Loam, Silt Loam, Silt, Clay Loam, Silty Clay Loam, Sandy Clay, Silty Clay, and Clay.\n\n\n\n\n\n","category":"method"},{"location":"modules/ClimaCache/#ClimaCache.AbstractSoilAlbedo","page":"ClimaCache","title":"ClimaCache.AbstractSoilAlbedo","text":"abstract type AbstractSoilAlbedo{FT<:AbstractFloat}\n\nHierarchy of AbstractSoilAlbedo:\n\nBroadbandSoilAlbedo\nHyperspectralSoilAlbedo\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BroadbandSoilAlbedo","page":"ClimaCache","title":"ClimaCache.BroadbandSoilAlbedo","text":"mutable struct BroadbandSoilAlbedo{FT<:AbstractFloat} <: ClimaCache.AbstractSoilAlbedo{FT<:AbstractFloat}\n\nStructure for broadband soil albedo\n\nFields\n\nρ_LW::AbstractFloat\n\n: Reflectance for longwave radiation\n\nα_CLM::Bool\n\n: Whether to use CLM soil albedo scheme\n\ne_net_diffuse::AbstractFloat\n\n: Net diffuse radiation at top soil [W m⁻²]\n\ne_net_direct::AbstractFloat\n\n: Net direct radiation at top soil [W m⁻²]\n\nr_net_lw::AbstractFloat\n\n: Net longwave energy absorption [W m⁻²]\n\nr_net_sw::AbstractFloat\n\n: Net shortwave energy absorption [W m⁻²]\n\nρ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Reflectance for shortwave radiation (for PAR and NIR)\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.HyperspectralSoilAlbedo","page":"ClimaCache","title":"ClimaCache.HyperspectralSoilAlbedo","text":"mutable struct HyperspectralSoilAlbedo{FT<:AbstractFloat} <: ClimaCache.AbstractSoilAlbedo{FT<:AbstractFloat}\n\nStructure for hyperspectral soil albedo\n\nFields\n\nDATASET::String\n\n: File path to the Netcdf dataset\n\nDIM_NIR::Int64\n\n: Number of wavelength bins for NIR\n\nDIM_WL::Int64\n\n: Number of wavelength bins\n\nα_CLM::Bool\n\n: Whether to use CLM soil albedo scheme\n\nMAT_ρ::Matrix{FT} where FT<:AbstractFloat\n\n: A matrix of characteristic curves\n\nρ_LW::AbstractFloat\n\n: Reflectance for longwave radiation\n\ne_net_diffuse::Vector{FT} where FT<:AbstractFloat\n\n: Net diffuse radiation at top soil [mW m⁻² nm⁻¹]\n\ne_net_direct::Vector{FT} where FT<:AbstractFloat\n\n: Net direct radiation at top soil [mW m⁻² nm⁻¹]\n\nr_net_lw::AbstractFloat\n\n: Net longwave energy absorption [W m⁻²]\n\nr_net_sw::AbstractFloat\n\n: Net shortwave energy absorption [W m⁻²]\n\nρ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Reflectance for shortwave radiation\n\n_tmp_vec_nir::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable with length of NIR\n\n_weight::Vector{FT} where FT<:AbstractFloat\n\n: Weights of the four characteristic curves\n\n_ρ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store ρPAR and ρNIR (a segmented curve)\n\n_θ::AbstractFloat\n\n: Last soil moisture used to compute albedo\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.SoilLayer","page":"ClimaCache","title":"ClimaCache.SoilLayer","text":"mutable struct SoilLayer{FT<:AbstractFloat}\n\nStructure for soil layer\n\nFields\n\nCP::AbstractFloat\n\n: Specific heat capacity of soil [J K⁻¹ kg⁻¹]\n\nΛ_THERMAL::AbstractFloat\n\n: Soil thermal conductivity [W m⁻¹ K⁻¹]\n\nρ::AbstractFloat\n\n: Dry soil density [kg m⁻³]\n\nVC::Union{ClimaCache.BrooksCorey{FT}, ClimaCache.VanGenuchten{FT}} where FT<:AbstractFloat\n\n: Soil moisture retention curve\n\nZS::Vector{FT} where FT<:AbstractFloat\n\n: Depth boundaries [m]\n\nZ::AbstractFloat\n\n: Mean depth [m]\n\nΔZ::AbstractFloat\n\n: Layer thickness [m]\n\nt::AbstractFloat\n\n: Temperature [K]\n\ne::AbstractFloat\n\n: Total stored energy per volume [J m⁻³]\n\nθ::AbstractFloat\n\n: Soil water content\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W m⁻²]\n\n∂θ∂t::AbstractFloat\n\n: Marginal increase in soil water content [s⁻¹]\n\nk::AbstractFloat\n\n: Soil hydraulic conductance per area [mol m⁻² s⁻¹ MPa⁻¹]\n\nψ::AbstractFloat\n\n: Matric potential [MPa]\n\n_cp::AbstractFloat\n\n: Combined specific heat capacity of soil [J K⁻¹ kg⁻¹]\n\n_λ_thermal::AbstractFloat\n\n: Combined soil thermal conductance [W m⁻² K⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Soil","page":"ClimaCache","title":"ClimaCache.Soil","text":"mutable struct Soil{FT<:AbstractFloat}\n\nStructure for Soil\n\nFields\n\nDIM_SOIL::Int64\n\n: Dimension of soil layers\n\nAREA::AbstractFloat\n\n: Total area of the soil [m²]\n\nCOLOR::Int64\n\n: Color class as in CLM\n\nZS::Vector{FT} where FT<:AbstractFloat\n\n: Soil layers boundaries\n\nALBEDO::Union{ClimaCache.BroadbandSoilAlbedo{FT}, ClimaCache.HyperspectralSoilAlbedo{FT}} where FT<:AbstractFloat\n\n: Albedo related structure\n\nLAYERS::Array{ClimaCache.SoilLayer{FT}, 1} where FT<:AbstractFloat\n\n: Soil layers\n\nrunoff::AbstractFloat\n\n: Surface runoff due to heavy precipitation during the time step [mol m⁻²]\n\n_k::Vector{FT} where FT<:AbstractFloat\n\n: Soil hydraulic conductance between layers per area [mol m⁻² s⁻¹ MPa⁻¹]\n\n_q::Vector{FT} where FT<:AbstractFloat\n\n: Flux between layers per area [mol m⁻² s⁻¹]\n\n_q_thermal::Vector{FT} where FT<:AbstractFloat\n\n: Thermal flux between layers per area [mol m⁻² s⁻¹]\n\n_δt::Vector{FT} where FT<:AbstractFloat\n\n: Soil temperature difference between layers [MPa]\n\n_δψ::Vector{FT} where FT<:AbstractFloat\n\n: Soil metric potential difference between layers [MPa]\n\n_λ_thermal::Vector{FT} where FT<:AbstractFloat\n\n: Soil thermal conductance between layers per area [W m⁻² K⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#Plant","page":"ClimaCache","title":"Plant","text":"","category":"section"},{"location":"modules/ClimaCache/#Hydraulics","page":"ClimaCache","title":"Hydraulics","text":"","category":"section"},{"location":"modules/ClimaCache/","page":"ClimaCache","title":"ClimaCache","text":"AbstractPVCurve\nLinearPVCurve\nSegmentedPVCurve\nAbstractHydraulicSystem\nAbstractXylemVC\nLogisticVC\nPowerVC\nWeibullVC\nComplexVC\nAbstractFlowProfile\nNonSteadyStateFlow\nSteadyStateFlow\nLeafHydraulics\nRootHydraulics\nStemHydraulics","category":"page"},{"location":"modules/ClimaCache/#ClimaCache.AbstractPVCurve","page":"ClimaCache","title":"ClimaCache.AbstractPVCurve","text":"abstract type AbstractPVCurve{FT<:AbstractFloat}\n\nHierarchy of AbstractPVCurve:\n\nLinearPVCurve\nSegmentedPVCurve\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.LinearPVCurve","page":"ClimaCache","title":"ClimaCache.LinearPVCurve","text":"mutable struct LinearPVCurve{FT<:AbstractFloat} <: ClimaCache.AbstractPVCurve{FT<:AbstractFloat}\n\nStruct that contains information for linear PV curve\n\nFields\n\nK_REFILL::AbstractFloat\n\n: Conductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\n\nSLOPE::AbstractFloat\n\n: Slope of the linear PV curve (relative to maximum) [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.SegmentedPVCurve","page":"ClimaCache","title":"ClimaCache.SegmentedPVCurve","text":"mutable struct SegmentedPVCurve{FT<:AbstractFloat} <: ClimaCache.AbstractPVCurve{FT<:AbstractFloat}\n\nStruct that contains information for segmented PV curve\n\nFields\n\nC_ALL::AbstractFloat\n\n: n_o / maximum V [mol m⁻³]\n\nK_REFILL::AbstractFloat\n\n: Conductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\n\nRWC_APO::AbstractFloat\n\n: Apoplastic water content relative to maximum water volume\n\nRWC_TLP::AbstractFloat\n\n: Relative water content at turgor loss point\n\nϵ_BULK::AbstractFloat\n\n: Bulk modulus of elasticity [MPa]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractHydraulicSystem","page":"ClimaCache","title":"ClimaCache.AbstractHydraulicSystem","text":"abstract type AbstractHydraulicSystem{FT<:AbstractFloat}\n\nHierarchy of AbstractHydraulicSystem:\n\nLeafHydraulics\nRootHydraulics\nStemHydraulics\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractXylemVC","page":"ClimaCache","title":"ClimaCache.AbstractXylemVC","text":"abstract type AbstractXylemVC{FT<:AbstractFloat}\n\nHierarchy of AbstractXylemVC:\n\nLogisticVC\nPowerVC\nWeibullVC\nComplexVC\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.LogisticVC","page":"ClimaCache","title":"ClimaCache.LogisticVC","text":"mutable struct LogisticVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nModified logistic function for vulnerability curve\n\nFields\n\nA::AbstractFloat\n\n: Multiplier to exponential component\n\nB::AbstractFloat\n\n: Multiplier to pressure [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.PowerVC","page":"ClimaCache","title":"ClimaCache.PowerVC","text":"mutable struct PowerVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nPower function for vulnerability curve\n\nFields\n\nA::AbstractFloat\n\n: Multiplier to power component [MPa⁻ᵇ]\n\nB::AbstractFloat\n\n: Power to pressure\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.WeibullVC","page":"ClimaCache","title":"ClimaCache.WeibullVC","text":"mutable struct WeibullVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nWeibull cumulative distribution function for vulnerability curve\n\nFields\n\nB::AbstractFloat\n\n: Numerator in the exponential component [MPa]\n\nC::AbstractFloat\n\n: Power to pressure component\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.ComplexVC","page":"ClimaCache","title":"ClimaCache.ComplexVC","text":"mutable struct ComplexVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nA complex struct for segmented vulnerability curve such as dual Weibull function\n\nFields\n\nPS::Vector{FT} where FT<:AbstractFloat\n\n: Percentages of each VC component\n\nVCS::Union{Array{ClimaCache.AbstractXylemVC{FT}, 1}, Array{ClimaCache.LogisticVC{FT}, 1}, Array{ClimaCache.PowerVC{FT}, 1}, Array{ClimaCache.WeibullVC{FT}, 1}} where FT<:AbstractFloat\n\n: Vector of vulnerability curve components\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractFlowProfile","page":"ClimaCache","title":"ClimaCache.AbstractFlowProfile","text":"abstract type AbstractFlowProfile{FT<:AbstractFloat}\n\nHierarchy of AbstractFlowProfile:\n\nNonSteadyStateFlow\nSteadyStateFlow\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.NonSteadyStateFlow","page":"ClimaCache","title":"ClimaCache.NonSteadyStateFlow","text":"mutable struct NonSteadyStateFlow{FT<:AbstractFloat} <: ClimaCache.AbstractFlowProfile{FT<:AbstractFloat}\n\nStruct that contains stem hydraulic system flow rates at non-steady state\n\nFields\n\nDIM_CAPACITY::Int64\n\n: Dimension of capaciatance elements\n\nf_in::AbstractFloat\n\n: Flow rate into the organ [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\nf_out::AbstractFloat\n\n: Flow rate out of the organ [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n_f_element::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water flow [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n_f_buffer::Vector{FT} where FT<:AbstractFloat\n\n: Vector of buffer water flow [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n_f_sum::Vector{FT} where FT<:AbstractFloat\n\n: Vector of sum buffer water flow [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.SteadyStateFlow","page":"ClimaCache","title":"ClimaCache.SteadyStateFlow","text":"mutable struct SteadyStateFlow{FT<:AbstractFloat} <: ClimaCache.AbstractFlowProfile{FT<:AbstractFloat}\n\nStruct that contains stem hydraulic system flow rates at steady state\n\nFields\n\nflow::AbstractFloat\n\n: Flow rate through the organ [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.LeafHydraulics","page":"ClimaCache","title":"ClimaCache.LeafHydraulics","text":"mutable struct LeafHydraulics{FT<:AbstractFloat} <: ClimaCache.AbstractHydraulicSystem{FT<:AbstractFloat}\n\nStruct that contains leaf hydraulic system\n\nFields\n\nDIM_XYLEM::Int64\n\n: Dimension of xylem slices\n\nAREA::AbstractFloat\n\n: Leaf area [m²]\n\nK_OX::AbstractFloat\n\n: Maximal extra-xylary hydraulic conductance [mol s⁻¹ MPa⁻¹ m⁻²]\n\nK_SLA::AbstractFloat\n\n: Maximal leaf xylem hydraulic conductance per leaf area [mol s⁻¹ MPa⁻¹ m⁻²]\n\nV_MAXIMUM::AbstractFloat\n\n: Total capaciatance at Ψ = 0 [mol m⁻²]\n\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT<:AbstractFloat\n\n: Flow profile\n\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT<:AbstractFloat\n\n: Pressure volume curve for storage\n\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT<:AbstractFloat\n\n: Vulnerability curve\n\np_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\nv_storage::AbstractFloat\n\n: Current capaciatance at Ψ_leaf [mol m⁻²]\n\np_leaf::AbstractFloat\n\n: Leaf end water pressure at air-water interface [MPa]\n\np_ups::AbstractFloat\n\n: Leaf xylem water pressure at the leaf base (upstream) [MPa]\n\n_e_crit::AbstractFloat\n\n: Critical flow rate [mol s⁻¹ m⁻²]\n\n_k_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of leaf kr history per element [-]\n\n_p_dos::AbstractFloat\n\n: Leaf xylem water pressure at the downstream end of leaf xylem [MPa]\n\n_p_element::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure [MPa]\n\n_p_storage::AbstractFloat\n\n: Pressure of storage\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.RootHydraulics","page":"ClimaCache","title":"ClimaCache.RootHydraulics","text":"mutable struct RootHydraulics{FT<:AbstractFloat} <: ClimaCache.AbstractHydraulicSystem{FT<:AbstractFloat}\n\nStruct that contains root hydraulic system\n\nFields\n\nDIM_XYLEM::Int64\n\n: Dimension of xylem slices\n\nAREA::AbstractFloat\n\n: Root cross-section area [m²]\n\nK_RHIZ::AbstractFloat\n\n: Rhizosphere  conductance [mol s⁻¹ MPa⁻¹]\n\nK_X::AbstractFloat\n\n: Maximal xylem hydraulic conductivity [mol s⁻¹ MPa⁻¹ m⁻²]\n\nL::AbstractFloat\n\n: Length [m]\n\nV_MAXIMUM::Vector{FT} where FT<:AbstractFloat\n\n: Maximal storage per element [mol]\n\nΔH::AbstractFloat\n\n: Root z difference [m]\n\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT<:AbstractFloat\n\n: Flow profile\n\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT<:AbstractFloat\n\n: Pressure volume curve for storage\n\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT<:AbstractFloat\n\n: Vulnerability curve\n\np_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\nv_storage::Vector{FT} where FT<:AbstractFloat\n\n: Storage per element [mol]\n\np_dos::AbstractFloat\n\n: Xylem water pressure at the downstream end of xylem [MPa]\n\np_ups::AbstractFloat\n\n: Soil matrix potential [MPa]\n\nψ_osm::AbstractFloat\n\n: Soil osmotic potential at 298.15 K `[MPa]\n\n_k_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of leaf kr history per element\n\n_p_element::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure [MPa]\n\n_p_rhiz::AbstractFloat\n\n: Xylem-rhizosphere interface water pressure [MPa]\n\n_p_storage::Vector{FT} where FT<:AbstractFloat\n\n: Pressure of storage per element [MPa]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.StemHydraulics","page":"ClimaCache","title":"ClimaCache.StemHydraulics","text":"mutable struct StemHydraulics{FT<:AbstractFloat} <: ClimaCache.AbstractHydraulicSystem{FT<:AbstractFloat}\n\nStruct that contains stem hydraulic system\n\nFields\n\nDIM_XYLEM::Int64\n\n: Dimension of xylem slices\n\nAREA::AbstractFloat\n\n: Root cross-section area [m²]\n\nK_X::AbstractFloat\n\n: Maximal xylem hydraulic conductivity (per root depth) [mol s⁻¹ MPa⁻¹ m⁻²]\n\nL::AbstractFloat\n\n: Length [m]\n\nV_MAXIMUM::Vector{FT} where FT<:AbstractFloat\n\n: Maximal storage per element [mol]\n\nΔH::AbstractFloat\n\n: Root z difference [m]\n\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT<:AbstractFloat\n\n: Flow profile\n\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT<:AbstractFloat\n\n: Pressure volume curve for storage\n\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT<:AbstractFloat\n\n: Vulnerability curve\n\np_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\nv_storage::Vector{FT} where FT<:AbstractFloat\n\n: Storage per element [mol]\n\np_dos::AbstractFloat\n\n: Xylem water pressure at the downstream end of xylem [MPa]\n\np_ups::AbstractFloat\n\n: Soil matrix potential [MPa]\n\n_k_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of leaf kr history per element\n\n_p_element::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure [MPa]\n\n_p_storage::Vector{FT} where FT<:AbstractFloat\n\n: Pressure of storage per element\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#Leaf-Level","page":"ClimaCache","title":"Leaf Level","text":"","category":"section"},{"location":"modules/ClimaCache/","page":"ClimaCache","title":"ClimaCache","text":"AbstractLeafBiophysics\nBroadbandLeafBiophysics\nHyperspectralLeafBiophysics\nVanDerTolFluorescenceModel\nVDTModelAll\nVDTModelDrought\nAbstractReactionCenter\nCytochromeReactionCenter\nVJPReactionCenter\nAbstractPhotosynthesisModel\nC3CytochromeModel\nC3VJPModel\nC4VJPModel\nAbstractPhotosynthesisMode\nGCO₂Mode\nPCO₂Mode\nAbstractTemperatureDependency\nArrhenius\nArrheniusPeak\nQ10\nQ10Peak\nAbstractLeaf\nLeaf\nLeaves1D\nLeaves2D","category":"page"},{"location":"modules/ClimaCache/#ClimaCache.AbstractLeafBiophysics","page":"ClimaCache","title":"ClimaCache.AbstractLeafBiophysics","text":"abstract type AbstractLeafBiophysics{FT<:AbstractFloat}\n\nHierarchy of AbstractLeafBiophysics:\n\nBroadbandLeafBiophysics\nHyperspectralLeafBiophysics\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BroadbandLeafBiophysics","page":"ClimaCache","title":"ClimaCache.BroadbandLeafBiophysics","text":"mutable struct BroadbandLeafBiophysics{FT<:AbstractFloat} <: ClimaCache.AbstractLeafBiophysics{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflectance and transmittance.\n\nFields\n\nα_NIR::AbstractFloat\n\n: Broadband absorption fraction at the NIR region\n\nα_PAR::AbstractFloat\n\n: Broadband absorption fraction at the PAR region\n\nϵ_LW::AbstractFloat\n\n: Emissivity for longwave radiation\n\nlma::AbstractFloat\n\n: Dry matter content (dry leaf mass per unit area) [g cm⁻²]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.HyperspectralLeafBiophysics","page":"ClimaCache","title":"ClimaCache.HyperspectralLeafBiophysics","text":"mutable struct HyperspectralLeafBiophysics{FT<:AbstractFloat} <: ClimaCache.AbstractLeafBiophysics{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflectance and transmittance.\n\nFields\n\nDIM_SIF::Int64\n\n: Dimension of SIF wave length bins\n\nDIM_SIFE::Int64\n\n: Dimension of SIF excitation wave length bins\n\nDIM_WL::Int64\n\n: Dimension of short wave length bins\n\nMESOPHYLL_N::AbstractFloat\n\n: Leaf mesophyll structural parameter that describes mesophyll reflectance and transmittance\n\nNDUB::Int64\n\n: Doubling adding layers\n\nρ_LW::AbstractFloat\n\n: Broadband thermal reflectance, related to blackbody emittance [-]\n\nτ_LW::AbstractFloat\n\n: Broadband thermal transmission, related to blackbody emittance [-]\n\nant::AbstractFloat\n\n: Anthocyanin content [μg cm⁻²]\n\nbrown::AbstractFloat\n\n: Senescent material (brown pigments) fraction [-]\n\ncab::AbstractFloat\n\n: Chlorophyll a and b content [μg cm⁻²]\n\ncar::AbstractFloat\n\n: Carotenoid content [μg cm⁻²]\n\ncbc::AbstractFloat\n\n: Carbon-based constituents in lma [g cm⁻²]\n\nf_zeax::AbstractFloat\n\n: Zeaxanthin fraction in Carotenoid (1=all Zeaxanthin, 0=all Violaxanthin) [-]\n\nlma::AbstractFloat\n\n: Dry matter content (dry leaf mass per unit area) [g cm⁻²]\n\npro::AbstractFloat\n\n: Protein content in lma (pro = lma - cbc) [g cm⁻²]\n\nk_all::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of all materials\n\nmat_b::Matrix{FT} where FT<:AbstractFloat\n\n: Fluorescence excitation matrix backwards [-]\n\nmat_f::Matrix{FT} where FT<:AbstractFloat\n\n: Fluorescence excitation matrix forwards [-]\n\nα_cab::Vector{FT} where FT<:AbstractFloat\n\n: Relative absorption by Chlorophyll [-]\n\nα_cabcar::Vector{FT} where FT<:AbstractFloat\n\n: Relative absorption by Chlorophyll+Carotenoid [-]\n\nα_sw::Vector{FT} where FT<:AbstractFloat\n\n: Shortwave absorption, 1 .- ρsw .- τsw  [-]\n\nρ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Shortwave leaf reflectance [-]\n\nτ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Shortwave leaf transmission [-]\n\n_v_storage::AbstractFloat\n\n: Leaf water content history used to compute leaf spectra [mol m⁻²]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.VanDerTolFluorescenceModel","page":"ClimaCache","title":"ClimaCache.VanDerTolFluorescenceModel","text":"mutable struct VanDerTolFluorescenceModel{FT<:AbstractFloat}\n\nStructure that stores van der Tol et al. (2014) fluorescence model parameters.\n\nFields\n\nK_0::AbstractFloat\n\n: Fitting parameter K_0\n\nK_A::AbstractFloat\n\n: Fitting parameter α\n\nK_B::AbstractFloat\n\n: Fitting parameter β\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.VDTModelAll","page":"ClimaCache","title":"ClimaCache.VDTModelAll","text":"VanDerTolFluorescenceModel that uses data from all observations \n\n\n\n\n\n","category":"function"},{"location":"modules/ClimaCache/#ClimaCache.VDTModelDrought","page":"ClimaCache","title":"ClimaCache.VDTModelDrought","text":"VanDerTolFluorescenceModel that uses data from drought stressed observations \n\n\n\n\n\n","category":"function"},{"location":"modules/ClimaCache/#ClimaCache.AbstractReactionCenter","page":"ClimaCache","title":"ClimaCache.AbstractReactionCenter","text":"abstract type AbstractReactionCenter{FT<:AbstractFloat}\n\nAbstract type for reaction center\n\nHierarchy of the AbstractReactionCenter\n\nVJPReactionCenter\nCytochromeReactionCenter\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.CytochromeReactionCenter","page":"ClimaCache","title":"ClimaCache.CytochromeReactionCenter","text":"mutable struct CytochromeReactionCenter{FT<:AbstractFloat} <: ClimaCache.AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nFields\n\nF_PSI::AbstractFloat\n\n: Fraction of absorbed light used by PSI ETR\n\nK_D::AbstractFloat\n\n: Rate constant of consititutive heat loss from the antennae [ns⁻¹]\n\nK_F::AbstractFloat\n\n: Rate constant of fluorescence [ns⁻¹]\n\nK_PSI::AbstractFloat\n\n: Rate constant of photochemistry for PS I [ns⁻¹]\n\nK_PSII::AbstractFloat\n\n: Rate constant of photochemistry for PS II [ns⁻¹]\n\nK_U::AbstractFloat\n\n: Rate constant of excitation sharing for PS II [ns⁻¹]\n\nK_X::AbstractFloat\n\n: Rate constant of regulated heat loss via oxidized PS I center [s⁻¹]\n\nΦ_PSI_MAX::AbstractFloat\n\n: Maximal PS I photochemical yield\n\nϵ_1::AbstractFloat\n\n: Weight factor that PSI fluorescence reaches sensor (after reabsorption)\n\nϵ_2::AbstractFloat\n\n: Weight factor that PSII fluorescence reaches sensor (after reabsorption)\n\nϕ_f::AbstractFloat\n\n: Fluorescence yield\n\nϕ_p::AbstractFloat\n\n: Photochemical yield\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.VJPReactionCenter","page":"ClimaCache","title":"ClimaCache.VJPReactionCenter","text":"mutable struct VJPReactionCenter{FT<:AbstractFloat} <: ClimaCache.AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nFields\n\nF_PSII::AbstractFloat\n\n: Fraction of absorbed light used by PSII ETR\n\nK_D::AbstractFloat\n\n: Rate constant for thermal dissipation\n\nK_F::AbstractFloat\n\n: Rate constant for fluorescence\n\nK_P_MAX::AbstractFloat\n\n: Maximal rate constant for photochemistry\n\nΦ_PSII_MAX::AbstractFloat\n\n: max PSII yield (knpqr=0, all RC open)\n\nFLM::ClimaCache.VanDerTolFluorescenceModel\n\n: Fluorescence model\n\nk_npq_sus::AbstractFloat\n\n: Sustained NPQ rate constant (for seasonal changes, default is zero)\n\nϕ_f::AbstractFloat\n\n: Fluorescence yield\n\nϕ_p::AbstractFloat\n\n: Photochemical yield\n\n_f_m::AbstractFloat\n\n: Dark adapted yield (Kp=0)\n\n_f_m′::AbstractFloat\n\n: Light adapted yield (Kp=0)\n\n_f_o::AbstractFloat\n\n: Dark-adapted fluorescence yield (Kp=max)\n\n_f_o′::AbstractFloat\n\n: Light-adapted fluorescence yield in the dark (Kp=max)\n\n_k_npq_rev::AbstractFloat\n\n: Reversible NPQ rate constant (initially zero)\n\n_k_p::AbstractFloat\n\n: Rate constant for photochemistry\n\n_npq::AbstractFloat\n\n: Non-Photochemical quenching\n\n_q_e::AbstractFloat\n\n: Energy quenching\n\n_q_p::AbstractFloat\n\n: Photochemical quenching\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractPhotosynthesisModel","page":"ClimaCache","title":"ClimaCache.AbstractPhotosynthesisModel","text":"abstract type AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nHierarchy of AbstractPhotosynthesisModel:\n\nC3CytochromeModel\nC3VJPModel\nC4VJPModel\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.C3CytochromeModel","page":"ClimaCache","title":"ClimaCache.C3CytochromeModel","text":"mutable struct C3CytochromeModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C3 Cytochrome photosynthesis system information\n\nFields\n\nEFF_1::AbstractFloat\n\n: Coefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\n\nEFF_2::AbstractFloat\n\n: Coefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ac and Aj => Ai\n\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ai and Ap => Ag\n\nCOLIMIT_J::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for J\n\nTD_KC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Kc temperature dependency\n\nTD_KO::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Ko temperature dependency\n\nTD_KQ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Kq temperature dependency\n\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type respiration temperature dependency\n\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Vcmax temperature dependency\n\nTD_Γ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Γ* temperature dependency\n\nTD_ηC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type η_C temperature dependency\n\nTD_ηL::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type η_L temperature dependency\n\nb₆f::AbstractFloat\n\n: Total concentration of Cytochrome b₆f [μmol m⁻²]\n\nr_d25::AbstractFloat\n\n: Respiration rate at 298.15 K [μmol m⁻² s⁻¹]\n\nv_cmax25::AbstractFloat\n\n: Maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\n\na_gross::AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_c::AbstractFloat\n\n: RubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_j::AbstractFloat\n\n: Light limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_p::AbstractFloat\n\n: Product limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_e_to_c::AbstractFloat\n\n: Electron to CO₂ coefficient\n\n_j_pot::AbstractFloat\n\n: Potential Electron Transport Rate [μmol e⁻ m⁻² s⁻¹]\n\n_j_psi::AbstractFloat\n\n: PSI electron transport rate after colimitation\n\n_k_c::AbstractFloat\n\n: RubisCO coefficient Kc [Pa]\n\n_k_m::AbstractFloat\n\n: Michaelis-Menten's coefficient [Pa]\n\n_k_o::AbstractFloat\n\n: RubisCO coefficient Ko [Pa]\n\n_k_q::AbstractFloat\n\n: Maximal turnover rate of Cytochrome b₆f [e⁻ s⁻¹]\n\n_r_d::AbstractFloat\n\n: Respiration rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_t::AbstractFloat\n\n: Last leaf temperature. If different from leaf t, then make temperature correction\n\n_v_cmax::AbstractFloat\n\n: Maximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_v_qmax::AbstractFloat\n\n: Maximal Cytochrome b₆f activity [μmol e⁻ m⁻² s⁻¹]\n\n_η::AbstractFloat\n\n: ratio between JP700 and JP680\n\n_η_c::AbstractFloat\n\n: Coupling efficiency of cyclic electron flow [mol ATP mol⁻¹ e⁻]\n\n_η_l::AbstractFloat\n\n: Coupling efficiency of linear electron flow [mol ATP mol⁻¹ e⁻]\n\n_γ_star::AbstractFloat\n\n: CO₂ compensation point with the absence of Rd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.C3VJPModel","page":"ClimaCache","title":"ClimaCache.C3VJPModel","text":"mutable struct C3VJPModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C3 photosynthesis system information\n\nFields\n\nEFF_1::AbstractFloat\n\n: Coefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\n\nEFF_2::AbstractFloat\n\n: Coefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ac and Aj => Ai\n\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ai and Ap => Ag\n\nCOLIMIT_J::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for J\n\nTD_JMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Jmax temperature dependency\n\nTD_KC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Kc temperature dependency\n\nTD_KO::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Ko temperature dependency\n\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type respiration temperature dependency\n\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Vcmax temperature dependency\n\nTD_Γ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Γ* temperature dependency\n\nj_max25::AbstractFloat\n\n: Maximal electron transport rate at 298.15 K [μmol m⁻² s⁻¹]\n\nr_d25::AbstractFloat\n\n: Respiration rate at 298.15 K [μmol m⁻² s⁻¹]\n\nv_cmax25::AbstractFloat\n\n: Maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\n\na_gross::AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_c::AbstractFloat\n\n: RubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_j::AbstractFloat\n\n: Light limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_p::AbstractFloat\n\n: Product limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_e_to_c::AbstractFloat\n\n: Electron to CO₂ coefficient\n\n_j::AbstractFloat\n\n: Electron transport [μmol m⁻² s⁻¹]\n\n_j_max::AbstractFloat\n\n: Maximal electron transport rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_j_pot::AbstractFloat\n\n: Potential Electron Transport Rate [μmol m⁻² s⁻¹]\n\n_k_c::AbstractFloat\n\n: RubisCO coefficient Kc [Pa]\n\n_k_m::AbstractFloat\n\n: Michaelis-Menten's coefficient [Pa]\n\n_k_o::AbstractFloat\n\n: RubisCO coefficient Ko [Pa]\n\n_r_d::AbstractFloat\n\n: Respiration rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_t::AbstractFloat\n\n: Last leaf temperature. If different from leaf t, then make temperature correction\n\n_v_cmax::AbstractFloat\n\n: Maximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_γ_star::AbstractFloat\n\n: CO₂ compensation point with the absence of Rd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.C4VJPModel","page":"ClimaCache","title":"ClimaCache.C4VJPModel","text":"mutable struct C4VJPModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C4 photosynthesis system information\n\nFields\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ac and Aj => Ai\n\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ai and Ap => Ag\n\nTD_KPEP::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Kpep temperature dependency\n\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type  respiration temperature dependency\n\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Vcmax temperature dependency\n\nTD_VPMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Vpmax temperature dependency\n\nr_d25::AbstractFloat\n\n: Respiration rate at 298.15 K [μmol m⁻² s⁻¹]\n\nv_cmax25::AbstractFloat\n\n: Maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\n\nv_pmax25::AbstractFloat\n\n: Maximal PEP carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\n\na_gross::AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_c::AbstractFloat\n\n: RubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_j::AbstractFloat\n\n: Light limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_p::AbstractFloat\n\n: Product limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_e_to_c::AbstractFloat\n\n: Electron to CO₂ coefficient\n\n_j_pot::AbstractFloat\n\n: Potential Electron Transport Rate [μmol m⁻² s⁻¹]\n\n_k_pep::AbstractFloat\n\n: PEP coefficient Kpep [Pa]\n\n_r_d::AbstractFloat\n\n: Respiration rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_t::AbstractFloat\n\n: Last leaf temperature. If different from leaf t, then make temperature correction\n\n_v_cmax::AbstractFloat\n\n: Maximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_v_pmax::AbstractFloat\n\n: Maximal PEP carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractPhotosynthesisMode","page":"ClimaCache","title":"ClimaCache.AbstractPhotosynthesisMode","text":"abstract type AbstractPhotosynthesisMode\n\nHierarchy of AbstractPhotosynthesisMode:\n\nGCO₂Mode\nPCO₂Mode\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.GCO₂Mode","page":"ClimaCache","title":"ClimaCache.GCO₂Mode","text":"An empty structure to signal the function to calculate photosynthetic rates based on leaf diffusive conductance to CO₂ \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.PCO₂Mode","page":"ClimaCache","title":"ClimaCache.PCO₂Mode","text":"An empty structure to signal the function to calculate photosynthetic rates based on CO₂ partial pressure \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractTemperatureDependency","page":"ClimaCache","title":"ClimaCache.AbstractTemperatureDependency","text":"abstract type AbstractTemperatureDependency{FT<:AbstractFloat}\n\nHierarchy of AbstractTemperatureDependency:\n\nArrhenius\nArrheniusPeak\nQ10\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Arrhenius","page":"ClimaCache","title":"ClimaCache.Arrhenius","text":"mutable struct Arrhenius{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn Arrhenius type struct using\n\nY_1 = Y_0 cdot exp left( dfracH_aR T_0 - dfracH_aR T_1 right)\n\nFields\n\nT_REF::AbstractFloat\n\n: Reference temperature [K]\n\nVAL_REF::AbstractFloat\n\n: Uncorrected vakye at reference temperature\n\nΔHA::AbstractFloat\n\n: Activation energy\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.ArrheniusPeak","page":"ClimaCache","title":"ClimaCache.ArrheniusPeak","text":"mutable struct ArrheniusPeak{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn ArrheniusPeak type struct using\n\nY_1 = Y_0 cdot exp left( dfracH_aR T_0 - dfracH_aR T_1 right)\n          cdot dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n                         1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nFields\n\nT_REF::AbstractFloat\n\n: Reference temperature [K]\n\nVAL_REF::AbstractFloat\n\n: Uncorrected vakye at reference temperature\n\nΔHA::AbstractFloat\n\n: Activation energy\n\nΔHD::AbstractFloat\n\n: Deactivation energy\n\nΔSV::AbstractFloat\n\n: Entropy factor\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Q10","page":"ClimaCache","title":"ClimaCache.Q10","text":"mutable struct Q10{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nA Q10 type struct using\n\nY_1 = Y_0 cdot Q_10 ^ dfracT_1 - T_010\n\nFields\n\nQ_10::AbstractFloat\n\n: Power of Q10 correction\n\nT_REF::AbstractFloat\n\n: Reference temperature [K]\n\nVAL_REF::AbstractFloat\n\n: Uncorrected vakye at reference temperature\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Q10Peak","page":"ClimaCache","title":"ClimaCache.Q10Peak","text":"mutable struct Q10Peak{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nA Q10Peak type struct using\n\nY_1 = Y_0 cdot Q_10 ^ dfracT_1 - T_010\n          cdot dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n                         1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nFields\n\nQ_10::AbstractFloat\n\n: Power of Q10 correction\n\nT_REF::AbstractFloat\n\n: Reference temperature [K]\n\nVAL_REF::AbstractFloat\n\n: Uncorrected vakye at reference temperature\n\nΔHD::AbstractFloat\n\n: Deactivation energy\n\nΔSV::AbstractFloat\n\n: Entropy factor\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractLeaf","page":"ClimaCache","title":"ClimaCache.AbstractLeaf","text":"abstract type AbstractLeaf{FT<:AbstractFloat}\n\nAbstract type for leaf\n\nHierarchy of the AbstractLeaf\n\nLeaf\nLeaves1D\nLeaves2D\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Leaf","page":"ClimaCache","title":"ClimaCache.Leaf","text":"mutable struct Leaf{FT<:AbstractFloat} <: ClimaCache.AbstractLeaf{FT<:AbstractFloat}\n\nStructure to save leaf parameters. This structure is meant for leaf level research and canopy radiative transfer scheme without sunlit and shaded partitioning (ppar and ppar-dependent variables).\n\nFields\n\nAPAR_CAR::Bool\n\n: Whether APAR absorbed by carotenoid is counted as PPAR\n\nCP::AbstractFloat\n\n: Specific heat capacity of leaf [J K⁻¹ kg⁻¹]\n\nG_LIMITS::Vector{FT} where FT<:AbstractFloat\n\n: Minimal and maximum stomatal conductance for H₂O at 25 °C [mol m⁻² s⁻¹]\n\nWIDTH::AbstractFloat\n\n: Leaf width [m]\n\nBIO::Union{ClimaCache.BroadbandLeafBiophysics{FT}, ClimaCache.HyperspectralLeafBiophysics{FT}} where FT<:AbstractFloat\n\n: AbstractLeafBiophysics type leaf biophysical parameters\n\nHS::ClimaCache.LeafHydraulics\n\n: LeafHydraulics type leaf hydraulic system\n\nPRC::Union{ClimaCache.CytochromeReactionCenter{FT}, ClimaCache.VJPReactionCenter{FT}} where FT<:AbstractFloat\n\n: AbstractReactionCenter type photosynthesis reaction center\n\nPSM::Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}, ClimaCache.C4VJPModel{FT}} where FT<:AbstractFloat\n\n: AbstractPhotosynthesisModel type photosynthesis model\n\nSM::ClimaCache.AbstractStomataModel\n\n: Stomatal model\n\ng_CO₂_b::AbstractFloat\n\n: Boundary leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\nppar::AbstractFloat\n\n: Absorbed photosynthetically active radiation used for photosynthesis [μmol m⁻² s⁻¹]\n\nt::AbstractFloat\n\n: Current leaf temperature\n\ne::AbstractFloat\n\n: Total stored energy per area [J m⁻²]\n\ng_H₂O_s::AbstractFloat\n\n: Stomatal conductance to water vapor [mol m⁻² s⁻¹]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W m⁻²]\n\n∂g∂t::AbstractFloat\n\n: Marginal increase of conductance per time [mol m⁻² s⁻²]\n\na_gross::AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_cp::AbstractFloat\n\n: Combined specific heat capacity of leaf per area [J K⁻¹ m⁻²]\n\n_g_CO₂::AbstractFloat\n\n: Total leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\n_p_CO₂_i::AbstractFloat\n\n: Leaf internal CO₂ partial pressure [Pa]\n\n_p_CO₂_s::AbstractFloat\n\n: Leaf surface CO₂ partial pressure [Pa]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Leaves1D","page":"ClimaCache","title":"ClimaCache.Leaves1D","text":"mutable struct Leaves1D{FT<:AbstractFloat} <: ClimaCache.AbstractLeaf{FT<:AbstractFloat}\n\nStructure to save leaf parameters for a single canopy layer. This structure is meant for canopy level research and canopy radiative transfer scheme with sunlit and shaded partitioning.\n\nFields\n\nCP::AbstractFloat\n\n: Specific heat capacity of leaf [J K⁻¹ kg⁻¹]\n\nG_LIMITS::Vector{FT} where FT<:AbstractFloat\n\n: Minimal and maximum stomatal conductance for H₂O at 25 °C [mol m⁻² s⁻¹]\n\nWIDTH::AbstractFloat\n\n: Leaf width [m]\n\nBIO::ClimaCache.BroadbandLeafBiophysics\n\n: BroadbandLeafBiophysics type leaf biophysical parameters\n\nHS::ClimaCache.LeafHydraulics\n\n: LeafHydraulics type leaf hydraulic system\n\nHS2::ClimaCache.LeafHydraulics\n\n: LeafHydraulics type leaf hydraulic system used for other calculations (say sunlit and shaded leaf partitioning)\n\nPRC::Union{ClimaCache.CytochromeReactionCenter{FT}, ClimaCache.VJPReactionCenter{FT}} where FT<:AbstractFloat\n\n: AbstractReactionCenter type photosynthesis reaction center\n\nPSM::Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}, ClimaCache.C4VJPModel{FT}} where FT<:AbstractFloat\n\n: AbstractPhotosynthesisModel type photosynthesis model\n\nSM::ClimaCache.AbstractStomataModel\n\n: Stomatal model\n\ng_CO₂_b::Vector{FT} where FT<:AbstractFloat\n\n: Boundary leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\nppar::Vector{FT} where FT<:AbstractFloat\n\n: Absorbed photosynthetically active radiation used for photosynthesis [μmol m⁻² s⁻¹]\n\nt::Vector{FT} where FT<:AbstractFloat\n\n: Current leaf temperature\n\ne::Vector{FT} where FT<:AbstractFloat\n\n: Total stored energy per area [J m⁻²]\n\ng_H₂O_s::Vector{FT} where FT<:AbstractFloat\n\n: Stomatal conductance to water vapor [mol m⁻² s⁻¹]\n\n∂e∂t::Vector{FT} where FT<:AbstractFloat\n\n: Marginal increase in energy [W m⁻²]\n\n∂g∂t::Vector{FT} where FT<:AbstractFloat\n\n: Marginal increase of conductance per time [mol m⁻² s⁻²]\n\na_gross::Vector{FT} where FT<:AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::Vector{FT} where FT<:AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_cp::Vector{FT} where FT<:AbstractFloat\n\n: Combined specific heat capacity of leaf per area [J K⁻¹ m⁻²]\n\n_g_CO₂::Vector{FT} where FT<:AbstractFloat\n\n: Total leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\n_p_CO₂_i::Vector{FT} where FT<:AbstractFloat\n\n: Leaf internal CO₂ partial pressure [Pa]\n\n_p_CO₂_s::Vector{FT} where FT<:AbstractFloat\n\n: Leaf surface CO₂ partial pressure [Pa]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Leaves2D","page":"ClimaCache","title":"ClimaCache.Leaves2D","text":"mutable struct Leaves2D{FT<:AbstractFloat} <: ClimaCache.AbstractLeaf{FT<:AbstractFloat}\n\nStructure to save leaf parameters for a single canopy layer. This structure is meant for canopy level research and canopy radiative transfer scheme with sunlit and shaded partitioning as well as leaf     angular distribution.\n\nFields\n\nDIM_AZI::Int64\n\n: Dimension of azimuth angles\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nAPAR_CAR::Bool\n\n: Whether APAR absorbed by carotenoid is counted as PPAR\n\nCP::AbstractFloat\n\n: Specific heat capacity of leaf [J K⁻¹ kg⁻¹]\n\nG_LIMITS::Vector{FT} where FT<:AbstractFloat\n\n: Minimal and maximum stomatal conductance for H₂O at 25 °C [mol m⁻² s⁻¹]\n\nWIDTH::AbstractFloat\n\n: Leaf width [m]\n\nBIO::ClimaCache.HyperspectralLeafBiophysics\n\n: HyperspectralLeafBiophysics type leaf biophysical parameters\n\nHS::ClimaCache.LeafHydraulics\n\n: LeafHydraulics type leaf hydraulic system\n\nPRC::Union{ClimaCache.CytochromeReactionCenter{FT}, ClimaCache.VJPReactionCenter{FT}} where FT<:AbstractFloat\n\n: AbstractReactionCenter type photosynthesis reaction center\n\nPSM::Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}, ClimaCache.C4VJPModel{FT}} where FT<:AbstractFloat\n\n: AbstractPhotosynthesisModel type photosynthesis model\n\nSM::ClimaCache.AbstractStomataModel\n\n: Stomatal model\n\ng_CO₂_b::AbstractFloat\n\n: Boundary leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\nppar_shaded::AbstractFloat\n\n: Absorbed photosynthetically active radiation used for photosynthesis for shaded leaves [μmol m⁻² s⁻¹]\n\nppar_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Absorbed photosynthetically active radiation used for photosynthesis for sunlit leaves [μmol m⁻² s⁻¹]\n\nt::AbstractFloat\n\n: Current leaf temperature [K]\n\ne::AbstractFloat\n\n: Total stored energy per area [J m⁻²]\n\ng_H₂O_s_shaded::AbstractFloat\n\n: Stomatal conductance to water vapor for shaded leaves [mol m⁻² s⁻¹]\n\ng_H₂O_s_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Stomatal conductance to water vapor for sunlit leaves [mol m⁻² s⁻¹]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W m⁻²]\n\n∂g∂t_shaded::AbstractFloat\n\n: Marginal increase of conductance per time for shaded leaves [mol m⁻² s⁻²]\n\n∂g∂t_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Marginal increase of conductance per timefor sunlit leaves [mol m⁻² s⁻²]\n\na_gross_shaded::AbstractFloat\n\n: Gross photosynthetic rate for shaded leaves [μmol m⁻² s⁻¹]\n\na_gross_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Gross photosynthetic rate for sunlit leaves [μmol m⁻² s⁻¹]\n\na_net_shaded::AbstractFloat\n\n: Net photosynthetic rate for shaded leaves [μmol m⁻² s⁻¹]\n\na_net_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Net photosynthetic rate for sunlit leaves [μmol m⁻² s⁻¹]\n\nϕ_f_shaded::AbstractFloat\n\n: Fluorescence quantum yield for shaded leaves [-]\n\nϕ_f_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Fluorescence quantum yield for sunlit leaves [-]\n\n_cp::AbstractFloat\n\n: Combined specific heat capacity of leaf per area [J K⁻¹ m⁻²]\n\n_g_CO₂_shaded::AbstractFloat\n\n: Total leaf diffusive conductance to CO₂ for shaded leaves [mol m⁻² s⁻¹]\n\n_g_CO₂_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Total leaf diffusive conductance to CO₂ for sunlit leaves [mol m⁻² s⁻¹]\n\n_p_CO₂_i_shaded::AbstractFloat\n\n: Leaf internal CO₂ partial pressure for shaded leaves [Pa]\n\n_p_CO₂_i_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Leaf internal CO₂ partial pressure for sunlit leaves [Pa]\n\n_p_CO₂_s_shaded::AbstractFloat\n\n: Leaf surface CO₂ partial pressure for shaded leaves [Pa]\n\n_p_CO₂_s_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Leaf surface CO₂ partial pressure for sunlit leaves [Pa]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#Stomatal-Models","page":"ClimaCache","title":"Stomatal Models","text":"","category":"section"},{"location":"modules/ClimaCache/","page":"ClimaCache","title":"ClimaCache","text":"AbstractBetaParameter\nBetaParameterG1\nBetaParameterKleaf\nBetaParameterKsoil\nBetaParameterPleaf\nBetaParameterPsoil\nBetaParameterVcmax\nBetaParameterΘ\nBetaFunction\nAbstractStomataModel\nAndereggSM\nBallBerrySM\nEllerSM\nGentineSM\nLeuningSM\nMedlynSM\nSperrySM\nWangSM\nWang2SM","category":"page"},{"location":"modules/ClimaCache/#ClimaCache.AbstractBetaParameter","page":"ClimaCache","title":"ClimaCache.AbstractBetaParameter","text":"abstract type AbstractBetaParameter\n\nHierarchy of AbstractBetaParameter:\n\nBetaParameterG1 PARAM_Y\nBetaParameterKleaf PARAM_X\nBetaParameterKsoil PARAM_X\nBetaParameterPleaf PARAM_X\nBetaParameterPsoil PARAM_X\nBetaParameterVcmax PARAM_Y\nBetaParameterΘ PARAM_X\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BetaParameterG1","page":"ClimaCache","title":"ClimaCache.BetaParameterG1","text":"Empty struct indicating that the function tunes G1 parameter of an empirical model \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BetaParameterKleaf","page":"ClimaCache","title":"ClimaCache.BetaParameterKleaf","text":"Empty struct indicating that the beta function is based on Kleaf \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BetaParameterKsoil","page":"ClimaCache","title":"ClimaCache.BetaParameterKsoil","text":"Empty struct indicating that the beta function is based on Ksoil \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BetaParameterPleaf","page":"ClimaCache","title":"ClimaCache.BetaParameterPleaf","text":"Empty struct indicating that the beta function is based on Pleaf \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BetaParameterPsoil","page":"ClimaCache","title":"ClimaCache.BetaParameterPsoil","text":"Empty struct indicating that the beta function is based on Psoil \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BetaParameterVcmax","page":"ClimaCache","title":"ClimaCache.BetaParameterVcmax","text":"Empty struct indicating that the function tunes Vcmax for an empirical model \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BetaParameterΘ","page":"ClimaCache","title":"ClimaCache.BetaParameterΘ","text":"Empty struct indicating that the beta function is based on soil water content \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BetaFunction","page":"ClimaCache","title":"ClimaCache.BetaFunction","text":"mutable struct BetaFunction{FT<:AbstractFloat}\n\nStruct to tune G1 or Vcmax based on leaf hydraulic conductance\n\nFields\n\nFUNC::Function\n\n: Function to turn variables to β tuning factor\n\nPARAM_X::Union{ClimaCache.BetaParameterKleaf, ClimaCache.BetaParameterKsoil, ClimaCache.BetaParameterPleaf, ClimaCache.BetaParameterPsoil, ClimaCache.BetaParameterΘ}\n\n: Input parameter to base on\n\nPARAM_Y::Union{ClimaCache.BetaParameterG1, ClimaCache.BetaParameterVcmax}\n\n: Target parameter to tune\n\nβ₁::AbstractFloat\n\n: Tuning factor computed\n\nβ₂::AbstractFloat\n\n: Tuning factor computed for HS2\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractStomataModel","page":"ClimaCache","title":"ClimaCache.AbstractStomataModel","text":"abstract type AbstractStomataModel{FT<:AbstractFloat}\n\nHierarchy of AbstractStomataModel:\n\nAndereggSM\nBallBerrySM\nEllerSM\nGentineSM\nLeuningSM\nMedlynSM\nSperrySM\nWangSM\nWang2SM\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AndereggSM","page":"ClimaCache","title":"ClimaCache.AndereggSM","text":"mutable struct AndereggSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Anderegg stomatal model. The equation used for Anderegg type model is\n\ndfracΘE = dfrac2aP + bK\n\nwhere K is dfracEP.\n\nFields\n\nA::AbstractFloat\n\n: Quadratic equation parameter [μmol m⁻² s⁻¹ MPa⁻²]\n\nB::AbstractFloat\n\n: Quadratic equation parameter [μmol m⁻² s⁻¹ MPa⁻¹]\n\nK::AbstractFloat\n\n: Slope constant [mol² m⁻² s⁻¹ μmol⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BallBerrySM","page":"ClimaCache","title":"ClimaCache.BallBerrySM","text":"mutable struct BallBerrySM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Ball Berry stomatal model. The equation used for Ball-Berry type model is\n\ngs = g0 + g1  RH  dfracACs\n\nFields\n\nG0::AbstractFloat\n\n: Minimal stomatal conductance [mol m⁻² s⁻¹]\n\nG1::AbstractFloat\n\n: Slope of conductance-photosynthesis correlation [-]\n\nβ::ClimaCache.BetaFunction\n\n: Beta function to force stomatal response to soil moisture\n\nτ::AbstractFloat\n\n: Time constant for the prognostic stomatal conductance [s]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.EllerSM","page":"ClimaCache","title":"ClimaCache.EllerSM","text":"mutable struct EllerSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nEmpty struct for Eller stomatal model. The equation used for Eller type model is\n\ndfracΘE = -dfracKE  dfracAK\n\nwhere K is dfracEP.\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.GentineSM","page":"ClimaCache","title":"ClimaCache.GentineSM","text":"mutable struct GentineSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Gentine stomatal model. The equation used for Gentine type model is\n\ngs = g0 + g1  dfrack_leafk_max  dfracACi\n\nFields\n\nG0::AbstractFloat\n\n: Minimal stomatal conductance [mol m⁻² s⁻¹]\n\nG1::AbstractFloat\n\n: Slope of conductance-photosynthesis correlation [-]\n\nβ::ClimaCache.BetaFunction\n\n: Beta function to force stomatal response to soil moisture\n\nτ::AbstractFloat\n\n: Time constant for the prognostic stomatal conductance [s]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.LeuningSM","page":"ClimaCache","title":"ClimaCache.LeuningSM","text":"mutable struct LeuningSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Leuning stomatal model. The equation used for Leuning type model is\n\ngs = g0 + g1  dfracACs - Γ^*  dfrac11 + dfracVPDd0\n\nFields\n\nD0::AbstractFloat\n\n: Fitting parameter of d/d0 below the fraction, same unit as vpd [Pa]\n\nG0::AbstractFloat\n\n: Minimal stomatal conductance [mol m⁻² s⁻¹]\n\nG1::AbstractFloat\n\n: Slope of conductance-photosynthesis correlation [-]\n\nβ::ClimaCache.BetaFunction\n\n: Beta function to force stomatal response to soil moisture\n\nτ::AbstractFloat\n\n: Time constant for the prognostic stomatal conductance [s]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.MedlynSM","page":"ClimaCache","title":"ClimaCache.MedlynSM","text":"mutable struct MedlynSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Medlyn stomatal model. The equation used for Medlyn type model is\n\ngs = g0 + 16  left( 1 + dfracg1sqrtVPD right)  dfracACa\n\nFields\n\nG0::AbstractFloat\n\n: Minimal stomatal conductance [mol m⁻² s⁻¹]\n\nG1::AbstractFloat\n\n: Slope of conductance-photosynthesis correlation [sqrt(Pa)]\n\nβ::ClimaCache.BetaFunction\n\n: Beta function to force stomatal response to soil moisture\n\nτ::AbstractFloat\n\n: Time constant for the prognostic stomatal conductance [s]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.SperrySM","page":"ClimaCache","title":"ClimaCache.SperrySM","text":"mutable struct SperrySM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nEmpty struct for Sperry stomatal model. The equation used for Sperry type model is\n\ndfracΘE = -dfracKE  dfracA_maxK_max\n\nwhere K is dfracEP.\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.WangSM","page":"ClimaCache","title":"ClimaCache.WangSM","text":"mutable struct WangSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nEmpty struct for Wang stomatal model. The equation used for Wang type model is\n\ndfracΘE = dfracAE_crit - E\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Wang2SM","page":"ClimaCache","title":"ClimaCache.Wang2SM","text":"mutable struct Wang2SM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nEmpty struct for a new Wang stomatal model modified from Anderegg model. The equation used for new Wang2SM type model is\n\ndfracΘE = dfracaAPK\n\nwhere K is dfracEP.\n\nFields\n\nA::AbstractFloat\n\n: Quadratic equation parameter [MPa⁻²]\n\nK::AbstractFloat\n\n: Slope constant [mol² m⁻² s⁻¹ μmol⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#Radiation","page":"ClimaCache","title":"Radiation","text":"","category":"section"},{"location":"modules/ClimaCache/","page":"ClimaCache","title":"ClimaCache","text":"WaveLengthSet\nAbstractRadiation\nBroadbandRadiation\nHyperspectralRadiation\nHyperspectralAbsorption\nSunSensorGeometry\nHyperspectralMLCanopyOpticalProperty\nAbstractCanopyRadiationProfile\nBroadbandSLCanopyRadiationProfile\nHyperspectralMLCanopyRadiationProfile\nAbstractLIDFAlgorithm\nVerhoefLIDF\nAbstractCanopy\nBroadbandSLCanopy\nHyperspectralMLCanopy","category":"page"},{"location":"modules/ClimaCache/#ClimaCache.WaveLengthSet","page":"ClimaCache","title":"ClimaCache.WaveLengthSet","text":"struct WaveLengthSet{FT<:AbstractFloat}\n\nImmutable structure that stores wave length information.\n\nFields\n\nDATASET::String\n\n: File path to the Netcdf dataset\n\nWL_NIR::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength limits for NIR [nm]\n\nWL_PAR::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength limits for PAR [nm]\n\nWL_SIF::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength limits for SIF emission [nm]\n\nWL_SIFE::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength limits for SIF excitation [nm]\n\nΛ::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength (bins) [nm]\n\nΛ_LOWER::Vector{FT} where FT<:AbstractFloat\n\n: Lower boundary wavelength [nm]\n\nΛ_UPPER::Vector{FT} where FT<:AbstractFloat\n\n: Upper boundary wavelength [nm]\n\nIΛ_NIR::Vector{Int64}\n\n: Indicies of Λ_NIR in Λ\n\nIΛ_PAR::Vector{Int64}\n\n: Indicies of Λ_PAR in Λ\n\nIΛ_SIF::Vector{Int64}\n\n: Indicies of Λ_SIF in Λ\n\nIΛ_SIFE::Vector{Int64}\n\n: Indicies of Λ_SIFE in Λ\n\nDIM_NIR::Int64\n\n: Number of wavelength bins for NIR\n\nDIM_PAR::Int64\n\n: Number of wavelength bins for PAR\n\nDIM_SIF::Int64\n\n: Number of wavelength bins for SIF\n\nDIM_SIFE::Int64\n\n: Number of wavelength bins for SIFE\n\nDIM_WL::Int64\n\n: Number of wavelength bins\n\nΔΛ::Vector{FT} where FT<:AbstractFloat\n\n: Differential wavelength [nm]\n\nΔΛ_PAR::Vector{FT} where FT<:AbstractFloat\n\n: Differential wavelength for PAR [nm]\n\nΔΛ_SIFE::Vector{FT} where FT<:AbstractFloat\n\n: Differential wavelength for SIF excitation [nm]\n\nΛ_PAR::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength bins for PAR [nm]\n\nΛ_SIF::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength bins for SIF [nm]\n\nΛ_SIFE::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength bins for SIF excitation [nm]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractRadiation","page":"ClimaCache","title":"ClimaCache.AbstractRadiation","text":"abstract type AbstractRadiation{FT<:AbstractFloat}\n\nHierarchy of AbstractRadiation:\n\nBroadbandRadiation\nHyperspectralRadiation\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BroadbandRadiation","page":"ClimaCache","title":"ClimaCache.BroadbandRadiation","text":"mutable struct BroadbandRadiation{FT<:AbstractFloat} <: ClimaCache.AbstractRadiation{FT<:AbstractFloat}\n\nStructure that stores broadband radiation information\n\nFields\n\ne_diffuse_nir::AbstractFloat\n\n: Diffuse radiation from NIR region [W m⁻²]\n\ne_diffuse_par::AbstractFloat\n\n: Diffuse radiation from PAR region [W m⁻²]\n\ne_direct_nir::AbstractFloat\n\n: Direct radiation from NIR region [W m⁻²]\n\ne_direct_par::AbstractFloat\n\n: Direct radiation from PAR region [W m⁻²]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.HyperspectralRadiation","page":"ClimaCache","title":"ClimaCache.HyperspectralRadiation","text":"mutable struct HyperspectralRadiation{FT<:AbstractFloat} <: ClimaCache.AbstractRadiation{FT<:AbstractFloat}\n\nStructure that stores hyperspectral radiation information\n\nFields\n\ne_diffuse::Vector{FT} where FT<:AbstractFloat\n\n: Diffuse radiation [mW m⁻² nm⁻¹]\n\ne_direct::Vector{FT} where FT<:AbstractFloat\n\n: Direct radiation [mW m⁻² nm⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.HyperspectralAbsorption","page":"ClimaCache","title":"ClimaCache.HyperspectralAbsorption","text":"struct HyperspectralAbsorption{FT<:AbstractFloat}\n\nImmutable struct that contains leaf biophysical traits used to run leaf reflection and transmittance.\n\nFields\n\nDATASET::String\n\n: File path to the Netcdf dataset\n\nK_ANT::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of anthocynanin [-]\n\nK_BROWN::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of senescent material (brown pigments) [-]\n\nK_CAB::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of chlorophyll a and b [-]\n\nK_CAR_V::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of violaxanthin carotenoid [-]\n\nK_CAR_Z::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of zeaxanthin carotenoid [-]\n\nK_CBC::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of carbon-based constituents [-]\n\nK_H₂O::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of water [-]\n\nK_LMA::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of dry matter [-]\n\nK_PRO::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of protein [-]\n\nK_PS::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of PS I and II [-]\n\nNR::Vector{FT} where FT<:AbstractFloat\n\n: Refractive index [-]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.SunSensorGeometry","page":"ClimaCache","title":"ClimaCache.SunSensorGeometry","text":"mutable struct SunSensorGeometry{FT<:AbstractFloat}\n\nStructure that stores sun sensor geometry information.\n\nFields\n\nHAA::AbstractFloat\n\n: Hill facing azimuth angle [°], 0 for North, 180 for south\n\nHSA::AbstractFloat\n\n: Hill slope angle [°]\n\nsaa::AbstractFloat\n\n: Solar azimuth angle [°], a function of time\n\nsza::AbstractFloat\n\n: Solar zenith angle [°], a function of lat and time\n\nvaa::AbstractFloat\n\n: Viewing azimuth angle [°]\n\nvza::AbstractFloat\n\n: Viewing zenith angle [°]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.HyperspectralMLCanopyOpticalProperty","page":"ClimaCache","title":"ClimaCache.HyperspectralMLCanopyOpticalProperty","text":"mutable struct HyperspectralMLCanopyOpticalProperty{FT<:AbstractFloat}\n\nStructure for Verhoef LIDF algorithm\n\nFields\n\nDIM_AZI::Int64\n\n: Dimension of azimuth angles\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_SIF::Int64\n\n: Dimension of SIF wave length bins\n\nDIM_SIFE::Int64\n\n: Dimension of SIF excitation wave length bins\n\nDIM_WL::Int64\n\n: Dimension of short wave length bins\n\nddb::AbstractFloat\n\n: Backward diffuse->diffuse scatter weight\n\nddf::AbstractFloat\n\n: Forward diffuse->diffuse scatter weight\n\ndob::AbstractFloat\n\n: Backward diffuse->observer scatter weight\n\ndof::AbstractFloat\n\n: Forward diffuse->observer scatter weight\n\nfo::Matrix{FT} where FT<:AbstractFloat\n\n: Conversion factor fo for angle towards observer at different inclination and azimuth angles\n\nfs::Matrix{FT} where FT<:AbstractFloat\n\n: Conversion factor fs for angles from solar at different inclination and azimuth angles\n\nko::AbstractFloat\n\n: Observer direction beam extinction coefficient weight (diffuse)\n\nks::AbstractFloat\n\n: Solar direction beam extinction coefficient weight (direct)\n\np_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: Probability of directly viewing a leaf in solar direction at different layers\n\npo::Vector{FT} where FT<:AbstractFloat\n\n: Probability of directly viewing a leaf in observer direction at different layer boundaries\n\nps::Vector{FT} where FT<:AbstractFloat\n\n: Probability of directly viewing a leaf in solar direction at different layer boundaries\n\npso::Vector{FT} where FT<:AbstractFloat\n\n: Bi-directional probability of directly viewing a leaf at different layer boundaries (solar->canopy->observer)\n\nsdb::AbstractFloat\n\n: Directional->diffuse backscatter weight\n\nsdf::AbstractFloat\n\n: Directional->diffuse forward scatter weight\n\nsob::AbstractFloat\n\n: Solar directional->observer weight of specular2directional backscatter coefficient\n\nsof::AbstractFloat\n\n: Solar directional->observer weight of specular2directional forward coefficient\n\nϵ::Vector{FT} where FT<:AbstractFloat\n\n: Effective emissivity for different layers\n\nρ_dd::Matrix{FT} where FT<:AbstractFloat\n\n: Effective reflectance for diffuse->diffuse\n\nρ_lw::Vector{FT} where FT<:AbstractFloat\n\n: Effective reflectance for longwave radiation\n\nρ_sd::Matrix{FT} where FT<:AbstractFloat\n\n: Effective reflectance for directional->diffuse\n\nσ_ddb::Matrix{FT} where FT<:AbstractFloat\n\n: Backward scattering coefficient for diffuse->diffuse at different layers and wavelength bins\n\nσ_ddf::Matrix{FT} where FT<:AbstractFloat\n\n: Forward scattering coefficient for diffuse->diffuse at different layers and wavelength bins\n\nσ_dob::Matrix{FT} where FT<:AbstractFloat\n\n: Backward scattering coefficient for diffuse->observer at different layers and wavelength bins\n\nσ_dof::Matrix{FT} where FT<:AbstractFloat\n\n: Forward scattering coefficient for diffuse->observer at different layers and wavelength bins\n\nσ_sdb::Matrix{FT} where FT<:AbstractFloat\n\n: Backward scattering coefficient for solar directional->diffuse at different layers and wavelength bins\n\nσ_sdf::Matrix{FT} where FT<:AbstractFloat\n\n: Forward scattering coefficient for solar directional->diffuse at different layers and wavelength bins\n\nσ_so::Matrix{FT} where FT<:AbstractFloat\n\n: Bidirectional from solar to observer scattering coefficient at different layers and wavelength bins\n\nτ_dd::Matrix{FT} where FT<:AbstractFloat\n\n: Effective tranmittance for diffuse->diffuse\n\nτ_lw::Vector{FT} where FT<:AbstractFloat\n\n: Effective tranmittance for longwave radiation\n\nτ_sd::Matrix{FT} where FT<:AbstractFloat\n\n: Effective tranmittance for solar directional->diffuse\n\n_Co::Vector{FT} where FT<:AbstractFloat\n\n: cos(inclination) * cos(vza) at different inclination angles\n\n_Cs::Vector{FT} where FT<:AbstractFloat\n\n: cos(inclination) * cos(sza) at different inclination angles\n\n_So::Vector{FT} where FT<:AbstractFloat\n\n: sin(inclination) * sin(vza) at different inclination angles\n\n_Ss::Vector{FT} where FT<:AbstractFloat\n\n: sin(inclination) * sin(sza) at different inclination angles\n\n_abs_fo::Matrix{FT} where FT<:AbstractFloat\n\n: abs of fo\n\n_abs_fs::Matrix{FT} where FT<:AbstractFloat\n\n: abs of fs\n\n_abs_fs_fo::Matrix{FT} where FT<:AbstractFloat\n\n: abs of fs * fo\n\n_bf::AbstractFloat\n\n: Weighted sum of cos²(inclination)\n\n_cos_θ_azi_raa::Vector{FT} where FT<:AbstractFloat\n\n: Cosine of Θ_AZI - raa\n\n_fo_cos_θ_incl::Matrix{FT} where FT<:AbstractFloat\n\n: fo * cos Θ_INCL\n\n_fs_cos_θ_incl::Matrix{FT} where FT<:AbstractFloat\n\n: fs * cos Θ_INCL\n\n_fs_fo::Matrix{FT} where FT<:AbstractFloat\n\n: fs * fo\n\n_ko::Vector{FT} where FT<:AbstractFloat\n\n: Outgoing beam extinction coefficient weights at different inclination angles\n\n_ks::Vector{FT} where FT<:AbstractFloat\n\n: Solar beam extinction coefficient weights at different inclination angles\n\n_mat⁺::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling matrix for SIF excitation\n\n_mat⁻::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling matrix for SIF excitation\n\n_sb::Vector{FT} where FT<:AbstractFloat\n\n: Backward scattering coefficients at different inclination angles\n\n_sf::Vector{FT} where FT<:AbstractFloat\n\n: Forward scattering coefficients at different inclination angles\n\n_tmp_mat_incl_azi_1::Matrix{FT} where FT<:AbstractFloat\n\n: Temporary cache used for matrix adding up purpose (DIMINCL * DIMAZI)\n\n_tmp_mat_incl_azi_2::Matrix{FT} where FT<:AbstractFloat\n\n: Temporary cache used for matrix adding up purpose (DIMINCL * DIMAZI)\n\n_tmp_vec_azi::Vector{FT} where FT<:AbstractFloat\n\n: Temporary cache used for vector operations (DIM_AZI)\n\n_tmp_vec_layer::Vector{FT} where FT<:AbstractFloat\n\n: Temporary cache used for vector operations (DIM_LAYER)\n\n_tmp_vec_sif_1::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_2::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_3::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_4::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_5::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_6::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sife_1::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF excitation information\n\n_tmp_vec_sife_2::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF excitation information\n\n_tmp_vec_sife_3::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF excitation information\n\n_tmp_vec_λ::Vector{FT} where FT<:AbstractFloat\n\n: Temporary cache used for vector operations (DIM_WL)\n\n_ρ_dd::Matrix{FT} where FT<:AbstractFloat\n\n: Reflectance for diffuse->diffuse at each canopy layer\n\n_ρ_lw::Vector{FT} where FT<:AbstractFloat\n\n: Reflectance for longwave radiation at each canopy layer\n\n_ρ_sd::Matrix{FT} where FT<:AbstractFloat\n\n: Reflectance for solar directional->diffuse at each canopy layer\n\n_τ_dd::Matrix{FT} where FT<:AbstractFloat\n\n: Tranmittance for diffuse->diffuse at each canopy layer\n\n_τ_lw::Vector{FT} where FT<:AbstractFloat\n\n: Tranmittance for longwave radiation at each canopy layer\n\n_τ_sd::Matrix{FT} where FT<:AbstractFloat\n\n: Tranmittance for solar directional->diffuse at each canopy layer\n\n_τ_ss::AbstractFloat\n\n: Tranmittance for solar directional->directional at each canopy layer\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractCanopyRadiationProfile","page":"ClimaCache","title":"ClimaCache.AbstractCanopyRadiationProfile","text":"abstract type AbstractCanopyRadiationProfile{FT<:AbstractFloat}\n\nHierarchy of AbstractCanopy:\n\nBroadbandSLCanopyRadiationProfile\nHyperspectralMLCanopyRadiationProfile\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BroadbandSLCanopyRadiationProfile","page":"ClimaCache","title":"ClimaCache.BroadbandSLCanopyRadiationProfile","text":"mutable struct BroadbandSLCanopyRadiationProfile{FT<:AbstractFloat} <: ClimaCache.AbstractCanopyRadiationProfile{FT<:AbstractFloat}\n\nStructure to store canopy radiation profiles\n\nFields\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\napar_shaded::AbstractFloat\n\n: Mean shaded leaf APAR (per leaf area) in μmol m⁻² s⁻¹\n\napar_sunlit::AbstractFloat\n\n: Mean sunlit leaf APAR (per leaf area) in μmol m⁻² s⁻¹\n\nk_diffuse::AbstractFloat\n\n: Weighted extinction coefficient for diffuse radiation (ratio between projected area to true leaf area)\n\nk_direct::AbstractFloat\n\n: Weighted extinction coefficient for direct radiation (ratio between projected area to true leaf area)\n\nlai_shaded::AbstractFloat\n\n: Total shaded leaf area index\n\nlai_sunlit::AbstractFloat\n\n: Total sunlit leaf area index\n\npar_shaded::AbstractFloat\n\n: Mean shaded leaf PAR (per leaf area) in μmol m⁻² s⁻¹\n\npar_sunlit::AbstractFloat\n\n: Mean sunlit leaf PAR (per leaf area) in μmol m⁻² s⁻¹\n\nr_net_shaded::AbstractFloat\n\n: Net absorbed radiation for shaded leaves [W m⁻²]\n\nr_net_sunlit::AbstractFloat\n\n: Net absorbed radiation for sunlit leaves [W m⁻²]\n\n_k_diffuse::Vector{FT} where FT<:AbstractFloat\n\n: Extinction coefficient for diffuse radiation at different leaf inclination angles\n\n_k_direct::Vector{FT} where FT<:AbstractFloat\n\n: Extinction coefficient for direct radiation at different leaf inclination angles\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.HyperspectralMLCanopyRadiationProfile","page":"ClimaCache","title":"ClimaCache.HyperspectralMLCanopyRadiationProfile","text":"mutable struct HyperspectralMLCanopyRadiationProfile{FT<:AbstractFloat} <: ClimaCache.AbstractCanopyRadiationProfile{FT<:AbstractFloat}\n\nStructure to store canopy radiation profiles\n\nFields\n\nDIM_AZI::Int64\n\n: Dimension of azimuth angles\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_PAR::Int64\n\n: Dimension of PAR wave length bins\n\nDIM_SIF::Int64\n\n: Dimension of SIF wave length bins\n\nDIM_WL::Int64\n\n: Dimension of short wave length bins\n\nalbedo::Vector{FT} where FT<:AbstractFloat\n\n: Albedo towards the viewing direction\n\napar_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean APAR for shaded leaves [μmol m⁻² s⁻¹]\n\napar_sunlit::Array{FT, 3} where FT<:AbstractFloat\n\n: APAR for sunlit leaves [μmol m⁻² s⁻¹]\n\ne_diffuse_down::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling diffuse short-wave radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\n\ne_diffuse_up::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling diffuse short-wave radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\n\ne_direct::Matrix{FT} where FT<:AbstractFloat\n\n: Solar directly radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\n\ne_net_diffuse::Matrix{FT} where FT<:AbstractFloat\n\n: Net diffuse radiation at each canopy layer for APAR [mW m⁻² nm⁻¹]\n\ne_net_direct::Matrix{FT} where FT<:AbstractFloat\n\n: Net direct radiation at each canopy layer for APAR [mW m⁻² nm⁻¹]\n\ne_o::Vector{FT} where FT<:AbstractFloat\n\n: Total radiation towards the viewing direction [mW m⁻² nm⁻¹]\n\ne_sum_diffuse::Matrix{FT} where FT<:AbstractFloat\n\n: Sum diffuse radiation at each canopy layer for PAR [mW m⁻² nm⁻¹]\n\ne_sum_direct::Matrix{FT} where FT<:AbstractFloat\n\n: Sum direct radiation at each canopy layer for PAR [mW m⁻² nm⁻¹]\n\ne_v::Matrix{FT} where FT<:AbstractFloat\n\n: Radiation towards the viewing direction per layer (including soil) [mW m⁻² nm⁻¹]\n\npar_in::AbstractFloat\n\n: Total incoming radiation PAR [μmol m⁻² s⁻¹]\n\npar_in_diffuse::AbstractFloat\n\n: Diffuse incoming radiation PAR [μmol m⁻² s⁻¹]\n\npar_in_direct::AbstractFloat\n\n: Direct incoming radiation PAR [μmol m⁻² s⁻¹]\n\npar_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean PAR for shaded leaves (before absorption) [μmol m⁻² s⁻¹]\n\npar_sunlit::Array{FT, 3} where FT<:AbstractFloat\n\n: PAR for sunlit leaves (before absorption) [μmol m⁻² s⁻¹]\n\nr_lw::Vector{FT} where FT<:AbstractFloat\n\n: Longwave energy flux from leaves per leaf area (one side) [W m⁻²]\n\nr_lw_down::Vector{FT} where FT<:AbstractFloat\n\n: Downwelling longwave energy flux [W m⁻²]\n\nr_lw_up::Vector{FT} where FT<:AbstractFloat\n\n: Upwelling longwave energy flux [W m⁻²]\n\nr_net_lw::Vector{FT} where FT<:AbstractFloat\n\n: Net longwave energy absorption for all leaves [W m⁻²]\n\nr_net_sw::Vector{FT} where FT<:AbstractFloat\n\n: Net shortwave energy absorption for all leaves [W m⁻²]\n\nr_net_sw_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Net shortwave energy absorption for shaded leaves [W m⁻²]\n\nr_net_sw_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: Net shortwave energy absorption for sunlit leaves [W m⁻²]\n\ns_layer_down::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling SIF for sunlit leaves at each wavelength for a layer\n\ns_layer_up::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling SIF for sunlit leaves at each wavelength for a layer\n\nsif_down::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling SIF\n\nsif_obs::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction\n\nsif_obs_shaded::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction from shaded APAR\n\nsif_obs_scatter::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction from scattering\n\nsif_obs_soil::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction from soil reflection\n\nsif_obs_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction from sunlit APAR\n\nsif_up::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling SIF\n\n_apar_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean APAR for shaded leaves per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n\n_apar_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: APAR for sunlit leaves per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n\n_par_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean PAR for shaded leaves per wavelength (before absorption) [μmol m⁻² s⁻¹ nm⁻¹]\n\n_par_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: PAR for sunlit leaves per wavelength (before absorption) [μmol m⁻² s⁻¹ nm⁻¹]\n\n_ppar_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean APAR for shaded leaves for photosynthesis per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n\n_ppar_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: APAR for sunlit leaves for photosynthesis per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n\n_r_emit_down::Vector{FT} where FT<:AbstractFloat\n\n: Downwelling longwave energy flux cache [W m⁻²]\n\n_r_emit_up::Vector{FT} where FT<:AbstractFloat\n\n: Upwelling longwave energy flux cache [W m⁻²]\n\n_s_emit_down::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling SIF for sunlit leaves at each wavelength\n\n_s_emit_up::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling SIF for sunlit leaves at each wavelength\n\n_s_shaded_down::Vector{FT} where FT<:AbstractFloat\n\n: Downwelling SIF for shaded leaves at each wavelength\n\n_s_shaded_up::Vector{FT} where FT<:AbstractFloat\n\n: Upwelling SIF for shaded leaves at each wavelength\n\n_s_sunlit_down::Vector{FT} where FT<:AbstractFloat\n\n: Downwelling SIF for sunlit leaves at each wavelength\n\n_s_sunlit_up::Vector{FT} where FT<:AbstractFloat\n\n: Upwelling SIF for sunlit leaves at each wavelength\n\n_sif_obs_shaded::Matrix{FT} where FT<:AbstractFloat\n\n: Cache to compute SIF at observer direction from shaded APAR\n\n_sif_obs_scatter::Matrix{FT} where FT<:AbstractFloat\n\n: Cache to compute SIF at observer direction from scattering\n\n_sif_obs_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Cache to compute SIF at observer direction from sunlit APAR\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractLIDFAlgorithm","page":"ClimaCache","title":"ClimaCache.AbstractLIDFAlgorithm","text":"abstract type AbstractLIDFAlgorithm{FT<:AbstractFloat}\n\nHierarchy of AbstractLIDFAlgorithm:\n\nVerhoefLIDF\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.VerhoefLIDF","page":"ClimaCache","title":"ClimaCache.VerhoefLIDF","text":"mutable struct VerhoefLIDF{FT<:AbstractFloat} <: ClimaCache.AbstractLIDFAlgorithm{FT<:AbstractFloat}\n\nStructure for Verhoef LIDF algorithm\n\nFields\n\nA::AbstractFloat\n\n: Leaf inclination angle distribution function parameter a\n\nB::AbstractFloat\n\n: Leaf inclination angle distribution function parameter b\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractCanopy","page":"ClimaCache","title":"ClimaCache.AbstractCanopy","text":"abstract type AbstractCanopy{FT<:AbstractFloat}\n\nHierarchy of AbstractCanopy:\n\nBroadbandSLCanopy\nHyperspectralMLCanopy\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.BroadbandSLCanopy","page":"ClimaCache","title":"ClimaCache.BroadbandSLCanopy","text":"mutable struct BroadbandSLCanopy{FT<:AbstractFloat} <: ClimaCache.AbstractCanopy{FT<:AbstractFloat}\n\nStructure to save single layer broadband canopy parameters\n\nFields\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nLIDF::ClimaCache.VerhoefLIDF\n\n: Leaf inclination angle distribution function algorithm\n\nRADIATION::ClimaCache.BroadbandSLCanopyRadiationProfile\n\n: Canopy radiation profiles\n\nP_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Inclination angle distribution\n\nΘ_INCL_BNDS::Matrix{FT} where FT<:AbstractFloat\n\n: Bounds of inclination angles [°]\n\nΘ_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Mean inclination angles [°]\n\nci::AbstractFloat\n\n: Clumping index\n\nlai::AbstractFloat\n\n: Leaf area index\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.HyperspectralMLCanopy","page":"ClimaCache","title":"ClimaCache.HyperspectralMLCanopy","text":"mutable struct HyperspectralMLCanopy{FT<:AbstractFloat} <: ClimaCache.AbstractCanopy{FT<:AbstractFloat}\n\nStructure to save multiple layer hyperspectral canopy parameters\n\nFields\n\nDIM_AZI::Int64\n\n: Dimension of azimuth angles\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nHOT_SPOT::AbstractFloat\n\n: Hot spot parameter\n\nLHA::ClimaCache.HyperspectralAbsorption\n\n: Hyperspectral absorption features of different leaf components\n\nLIDF::ClimaCache.VerhoefLIDF\n\n: Leaf inclination angle distribution function algorithm\n\nWLSET::ClimaCache.WaveLengthSet\n\n: Wave length set used to paramertize other variables\n\nOPTICS::ClimaCache.HyperspectralMLCanopyOpticalProperty\n\n: Canopy optical properties\n\nRADIATION::ClimaCache.HyperspectralMLCanopyRadiationProfile\n\n: Canopy radiation profiles\n\nP_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Inclination angle distribution\n\nΘ_AZI::Vector{FT} where FT<:AbstractFloat\n\n: Mean azimuth angles [°]\n\nΘ_INCL_BNDS::Matrix{FT} where FT<:AbstractFloat\n\n: Bounds of inclination angles [°]\n\nΘ_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Mean inclination angles [°]\n\nΩ_A::AbstractFloat\n\n: Clumping structure a\n\nΩ_B::AbstractFloat\n\n: Clumping structure b\n\nci::AbstractFloat\n\n: Clumping index\n\nlai::AbstractFloat\n\n: Leaf area index\n\n_1_AZI::Vector{FT} where FT<:AbstractFloat\n\n: Ones with the length of Θ_AZI\n\n_COS_Θ_AZI::Vector{FT} where FT<:AbstractFloat\n\n: Cosine of Θ_AZI\n\n_COS²_Θ_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Square of cosine of Θ_INCL\n\n_COS²_Θ_INCL_AZI::Matrix{FT} where FT<:AbstractFloat\n\n: Square of cosine of Θ_INCL at different azimuth angles\n\n_x_bnds::Vector{FT} where FT<:AbstractFloat\n\n: Cache for level boundary locations\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#SPAC","page":"ClimaCache","title":"SPAC","text":"","category":"section"},{"location":"modules/ClimaCache/","page":"ClimaCache","title":"ClimaCache","text":"Root\nStem\nAbstractSPACSystem\nMonoElementSPAC\nMonoMLGrassSPAC\nMonoMLPalmSPAC\nMonoMLTreeSPAC","category":"page"},{"location":"modules/ClimaCache/#ClimaCache.Root","page":"ClimaCache","title":"ClimaCache.Root","text":"mutable struct Root{FT<:AbstractFloat}\n\nStructure to save root parameters\n\nFields\n\nHS::ClimaCache.RootHydraulics\n\n: RootHydraulics type root hydraulic system\n\nt::AbstractFloat\n\n: Current temperature [K]\n\ne::AbstractFloat\n\n: Total stored energy in water [J]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.Stem","page":"ClimaCache","title":"ClimaCache.Stem","text":"mutable struct Stem{FT<:AbstractFloat}\n\nStructure to save stem parameters\n\nFields\n\nHS::ClimaCache.StemHydraulics\n\n: StemHydraulics type stem hydraulic system\n\nt::AbstractFloat\n\n: Current temperature\n\ne::AbstractFloat\n\n: Total stored energy in water [J]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W]\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.AbstractSPACSystem","page":"ClimaCache","title":"ClimaCache.AbstractSPACSystem","text":"abstract type AbstractSPACSystem{FT<:AbstractFloat}\n\nHierarchy of AbstractSPACSystem:\n\nMonoElementSPAC\nMonoMLGrassSPAC\nMonoMLPalmSPAC\nMonoMLTreeSPAC\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.MonoElementSPAC","page":"ClimaCache","title":"ClimaCache.MonoElementSPAC","text":"mutable struct MonoElementSPAC{FT<:AbstractFloat} <: ClimaCache.AbstractSPACSystem{FT<:AbstractFloat}\n\nStruct for simplest SPAC system\n\nFields\n\nAIR::ClimaCache.AirLayer\n\n: Air conditions\n\nLEAF::ClimaCache.Leaf\n\n: Leaf system\n\nMETEO::ClimaCache.Meteorology\n\n: Meteorology information\n\nROOT::ClimaCache.Root\n\n: Root system\n\nSOIL::ClimaCache.Soil\n\n: Soil component\n\nSTEM::ClimaCache.Stem\n\n: Stem system\n\n_krs::Vector{FT} where FT<:AbstractFloat\n\n: Relative hydraulic conductance\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.MonoMLGrassSPAC","page":"ClimaCache","title":"ClimaCache.MonoMLGrassSPAC","text":"mutable struct MonoMLGrassSPAC{FT<:AbstractFloat} <: ClimaCache.AbstractSPACSystem{FT<:AbstractFloat}\n\nStruct for monospecies grass SPAC system\n\nFields\n\nDIM_AIR::Int64\n\n: Dimension of air layers\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_ROOT::Int64\n\n: Dimension of root layers\n\nΦ_PHOTON::Bool\n\n: Whether to convert energy to photons when computing fluorescence\n\nELEVATION::AbstractFloat\n\n: Elevation\n\nLATITUDE::AbstractFloat\n\n: Latitude\n\nLONGITUDE::AbstractFloat\n\n: Longitude\n\nLEAVES_INDEX::Vector{Int64}\n\n: Corresponding air layer per canopy layer\n\nROOTS_INDEX::Vector{Int64}\n\n: Corresponding soil layer per root layer\n\nZ::Vector{FT} where FT<:AbstractFloat\n\n: Depth and height information [m]\n\nZ_AIR::Vector{FT} where FT<:AbstractFloat\n\n: Air boundaries [m]\n\nAIR::Array{ClimaCache.AirLayer{FT}, 1} where FT<:AbstractFloat\n\n: Air for each layer (may be more than canopy layer)\n\nANGLES::ClimaCache.SunSensorGeometry\n\n: Sun sensor geometry\n\nCANOPY::ClimaCache.HyperspectralMLCanopy\n\n: Canopy used for radiation calculations\n\nLEAVES::Array{ClimaCache.Leaves2D{FT}, 1} where FT<:AbstractFloat\n\n: Leaf per layer\n\nMETEO::ClimaCache.Meteorology\n\n: Meteorology information\n\nRAD_LW::AbstractFloat\n\n: Downwelling longwave radiation [W m⁻²]\n\nRAD_SW::ClimaCache.HyperspectralRadiation\n\n: Downwelling shortwave radiation\n\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT<:AbstractFloat\n\n: Root hydraulic system\n\nSOIL::ClimaCache.Soil\n\n: Soil component\n\n_fs::Vector{FT} where FT<:AbstractFloat\n\n: Flow rate per root layer\n\n_ks::Vector{FT} where FT<:AbstractFloat\n\n: Conductances for each root layer at given flow\n\n_ps::Vector{FT} where FT<:AbstractFloat\n\n: Pressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.MonoMLPalmSPAC","page":"ClimaCache","title":"ClimaCache.MonoMLPalmSPAC","text":"mutable struct MonoMLPalmSPAC{FT<:AbstractFloat} <: ClimaCache.AbstractSPACSystem{FT<:AbstractFloat}\n\nStruct for monospecies palm SPAC system (with trunk)\n\nFields\n\nDIM_AIR::Int64\n\n: Dimension of air layers\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_ROOT::Int64\n\n: Dimension of root layers\n\nΦ_PHOTON::Bool\n\n: Whether to convert energy to photons when computing fluorescence\n\nELEVATION::AbstractFloat\n\n: Elevation\n\nLATITUDE::AbstractFloat\n\n: Latitude\n\nLONGITUDE::AbstractFloat\n\n: Longitude\n\nLEAVES_INDEX::Vector{Int64}\n\n: Corresponding air layer per canopy layer\n\nROOTS_INDEX::Vector{Int64}\n\n: Corresponding soil layer per root layer\n\nZ::Vector{FT} where FT<:AbstractFloat\n\n: Depth and height information [m]\n\nZ_AIR::Vector{FT} where FT<:AbstractFloat\n\n: Air boundaries [m]\n\nAIR::Array{ClimaCache.AirLayer{FT}, 1} where FT<:AbstractFloat\n\n: Air for each layer (more than canopy layer)\n\nANGLES::ClimaCache.SunSensorGeometry\n\n: Sun sensor geometry\n\nCANOPY::ClimaCache.HyperspectralMLCanopy\n\n: Canopy used for radiation calculations\n\nLEAVES::Array{ClimaCache.Leaves2D{FT}, 1} where FT<:AbstractFloat\n\n: Leaf per layer\n\nMETEO::ClimaCache.Meteorology\n\n: Meteorology information\n\nRAD_LW::AbstractFloat\n\n: Downwelling longwave radiation [W m⁻²]\n\nRAD_SW::ClimaCache.HyperspectralRadiation\n\n: Downwelling shortwave radiation\n\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT<:AbstractFloat\n\n: Root hydraulic system\n\nSOIL::ClimaCache.Soil\n\n: Soil component\n\nTRUNK::ClimaCache.Stem\n\n: Trunk hydraulic system\n\n_fs::Vector{FT} where FT<:AbstractFloat\n\n: Flow rate per root layer\n\n_ks::Vector{FT} where FT<:AbstractFloat\n\n: Conductances for each root layer at given flow\n\n_ps::Vector{FT} where FT<:AbstractFloat\n\n: Pressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.MonoMLTreeSPAC","page":"ClimaCache","title":"ClimaCache.MonoMLTreeSPAC","text":"mutable struct MonoMLTreeSPAC{FT<:AbstractFloat} <: ClimaCache.AbstractSPACSystem{FT<:AbstractFloat}\n\nStruct for monospecies tree SPAC system (with trunk and branches)\n\nFields\n\nDIM_AIR::Int64\n\n: Dimension of air layers\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_ROOT::Int64\n\n: Dimension of root layers\n\nΦ_PHOTON::Bool\n\n: Whether to convert energy to photons when computing fluorescence\n\nLEAVES_INDEX::Vector{Int64}\n\n: Corresponding air layer per canopy layer\n\nROOTS_INDEX::Vector{Int64}\n\n: Corresponding soil layer per root layer\n\nZ::Vector{FT} where FT<:AbstractFloat\n\n: Depth and height information [m]\n\nZ_AIR::Vector{FT} where FT<:AbstractFloat\n\n: Air boundaries [m]\n\nELEVATION::AbstractFloat\n\n: Elevation\n\nLATITUDE::AbstractFloat\n\n: Latitude\n\nLONGITUDE::AbstractFloat\n\n: Longitude\n\nAIR::Array{ClimaCache.AirLayer{FT}, 1} where FT<:AbstractFloat\n\n: Air for each layer (more than canopy layer)\n\nANGLES::ClimaCache.SunSensorGeometry\n\n: Sun sensor geometry\n\nBRANCHES::Array{ClimaCache.Stem{FT}, 1} where FT<:AbstractFloat\n\n: Branch hydraulic system\n\nCANOPY::ClimaCache.HyperspectralMLCanopy\n\n: Canopy used for radiation calculations\n\nLEAVES::Array{ClimaCache.Leaves2D{FT}, 1} where FT<:AbstractFloat\n\n: Leaf per layer\n\nMETEO::ClimaCache.Meteorology\n\n: Meteorology information\n\nRAD_LW::AbstractFloat\n\n: Downwelling longwave radiation [W m⁻²]\n\nRAD_SW::ClimaCache.HyperspectralRadiation\n\n: Downwelling shortwave radiation\n\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT<:AbstractFloat\n\n: Root hydraulic system\n\nSOIL::ClimaCache.Soil\n\n: Soil component\n\nTRUNK::ClimaCache.Stem\n\n: Trunk hydraulic system\n\n_fs::Vector{FT} where FT<:AbstractFloat\n\n: Flow rate per root layer\n\n_ks::Vector{FT} where FT<:AbstractFloat\n\n: Conductances for each root layer at given flow\n\n_ps::Vector{FT} where FT<:AbstractFloat\n\n: Pressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#Utils","page":"ClimaCache","title":"Utils","text":"","category":"section"},{"location":"modules/ClimaCache/#Colimitation-Methods","page":"ClimaCache","title":"Colimitation Methods","text":"","category":"section"},{"location":"modules/ClimaCache/","page":"ClimaCache","title":"ClimaCache","text":"AbstractColimit\nMinimumColimit\nQuadraticColimit\nSerialColimit\nSquareColimit","category":"page"},{"location":"modules/ClimaCache/#ClimaCache.AbstractColimit","page":"ClimaCache","title":"ClimaCache.AbstractColimit","text":"abstract type AbstractColimit{FT<:AbstractFloat}\n\nHierarchy of AbstractColimit\n\nMinimumColimit\nQuadraticColimit\nSerialColimit\n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.MinimumColimit","page":"ClimaCache","title":"ClimaCache.MinimumColimit","text":"Empty structure to indicate minimum colimitation: x = min(x₁, x₂) \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.QuadraticColimit","page":"ClimaCache","title":"ClimaCache.QuadraticColimit","text":"Structure to indicate quadratic colimitation (contains field CURVATURE): θ⋅x² - (x₁ + x₂)⋅x + x₁x₂ = 0 \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.SerialColimit","page":"ClimaCache","title":"ClimaCache.SerialColimit","text":"Empty structure to indicate serial colimitation: x = 1 / (1/x₁ + 1/x₂) \n\n\n\n\n\n","category":"type"},{"location":"modules/ClimaCache/#ClimaCache.SquareColimit","page":"ClimaCache","title":"ClimaCache.SquareColimit","text":"Empty structure to indicate square colimitation: x = x₁⋅x₂ / sqrt(x₁² + x₂²) \n\n\n\n\n\n","category":"type"},{"location":"modules/EmeraldConstants/#EmeraldConstants","page":"EmeraldConstants","title":"EmeraldConstants","text":"","category":"section"},{"location":"modules/EmeraldConstants/","page":"EmeraldConstants","title":"EmeraldConstants","text":"CurrentModule = EmeraldConstants","category":"page"},{"location":"modules/EmeraldConstants/#Universal-Constants","page":"EmeraldConstants","title":"Universal Constants","text":"","category":"section"},{"location":"modules/EmeraldConstants/","page":"EmeraldConstants","title":"EmeraldConstants","text":"UniversalConstants\nAVOGADRO\nCP_D\nCP_D_MOL\nCP_I\nCP_I_MOL\nCP_L\nCP_L_MOL\nCP_V\nCP_V_MOL\nF_O₂\nGAS_R\nGRAVITY\nH_PLANCK\nK_BOLTZMANN\nK_STEFAN\nK_VON_KARMAN\nLH_V₀\nLIGHT_SPEED\nM_DRYAIR\nM_H₂O\nP_ATM\nPRESS_TRIPLE\nR_V\nRT₂₅\nT₀\nT₂₅\nT_TRIPLE\nV_H₂O\nYEAR_D\nΛ_THERMAL_H₂O\nρ_H₂O\nρg_MPa","category":"page"},{"location":"modules/EmeraldConstants/#EmeraldConstants.UniversalConstants","page":"EmeraldConstants","title":"EmeraldConstants.UniversalConstants","text":"mutable struct UniversalConstants\n\nStructure to save universal constants.\n\nFields\n\nAVOGADRO::Float64\n\n: Avogadro's number [molecule mol⁻¹]\n\nCP_D::Float64\n\n: Isobaric specific heat of dry air [J kg⁻¹ K⁻¹]\n\nCP_I::Float64\n\n: Isobaric specific heat of ice water [J kg⁻¹ K⁻¹]\n\nCP_L::Float64\n\n: Isobaric specific heat of liquid water [J kg⁻¹ K⁻¹]\n\nCP_V::Float64\n\n: Isobaric specific heat of water vapor [J kg⁻¹ K⁻¹]\n\nF_O₂::Float64\n\n: O₂ fraction in air [-]\n\nGAS_R::Float64\n\n: Universal gas constant [J mol⁻¹ K⁻¹]\n\nGRAVITY::Float64\n\n: Gravity of the Earth [m s⁻²]\n\nH_PLANCK::Float64\n\n: Planck constant [m² kg s⁻¹]\n\nK_BOLTZMANN::Float64\n\n: Boltzmann constant [m² kg s⁻² K⁻¹]\n\nK_STEFAN::Float64\n\n: Stefan-Boltzmann constant [W m⁻² K⁻⁴]\n\nK_VON_KARMAN::Float64\n\n: Von Karman constant [-]\n\nLH_V₀::Float64\n\n: Latent heat vaporization at T₀ [K kg⁻¹]\n\nLIGHT_SPEED::Float64\n\n: Light speed in vacuum [m s⁻¹]\n\nM_DRYAIR::Float64\n\n: Molar mass of dry air [kg mol⁻¹]\n\nM_H₂O::Float64\n\n: Molar mass of water [kg mol⁻¹]\n\nP_ATM::Float64\n\n: Mean atmospheric pressure at sea level [Pa]\n\nPRESS_TRIPLE::Float64\n\n: Water vapor pressure at triple temperature [Pa]\n\nT₀::Float64\n\n: Freezing temperature of water [K]\n\nT_TRIPLE::Float64\n\n: Triple temperature of water [K]\n\nYEAR_D::Float64\n\n: Mean number of days per year [day]\n\nΛ_THERMAL_H₂O::Float64\n\n: Thermal conductivity of water [W m⁻¹ K⁻¹]\n\nρ_H₂O::Float64\n\n: Density of liquid water [kg m⁻³]\n\n\n\n\n\n","category":"type"},{"location":"modules/EmeraldConstants/#EmeraldConstants.AVOGADRO","page":"EmeraldConstants","title":"EmeraldConstants.AVOGADRO","text":"Avogadro's number [molecule mol⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.CP_D","page":"EmeraldConstants","title":"EmeraldConstants.CP_D","text":"Isobaric specific heat of dry air [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.CP_D_MOL","page":"EmeraldConstants","title":"EmeraldConstants.CP_D_MOL","text":"Isobaric specific heat of dry air per mole [J mol⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.CP_I","page":"EmeraldConstants","title":"EmeraldConstants.CP_I","text":"Isobaric specific heat of ice water [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.CP_I_MOL","page":"EmeraldConstants","title":"EmeraldConstants.CP_I_MOL","text":"Isobaric specific heat of ice water per mole [J mol⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.CP_L","page":"EmeraldConstants","title":"EmeraldConstants.CP_L","text":"Isobaric specific heat of liquid water [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.CP_L_MOL","page":"EmeraldConstants","title":"EmeraldConstants.CP_L_MOL","text":"Isobaric specific heat of liquid water per mole [J mol⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.CP_V","page":"EmeraldConstants","title":"EmeraldConstants.CP_V","text":"Isobaric specific heat of water vapor [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.CP_V_MOL","page":"EmeraldConstants","title":"EmeraldConstants.CP_V_MOL","text":"Isobaric specific heat of water vapor per mole [J mol⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.F_O₂","page":"EmeraldConstants","title":"EmeraldConstants.F_O₂","text":"O₂ fraction in air [-] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.GAS_R","page":"EmeraldConstants","title":"EmeraldConstants.GAS_R","text":"Universal gas constant [J mol⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.GRAVITY","page":"EmeraldConstants","title":"EmeraldConstants.GRAVITY","text":"Gravity of the Earth [m s⁻²] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.H_PLANCK","page":"EmeraldConstants","title":"EmeraldConstants.H_PLANCK","text":"Planck constant [m² kg s⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.K_BOLTZMANN","page":"EmeraldConstants","title":"EmeraldConstants.K_BOLTZMANN","text":"Boltzmann constant [m² kg s⁻² K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.K_STEFAN","page":"EmeraldConstants","title":"EmeraldConstants.K_STEFAN","text":"Stefan-Boltzmann constant [W m⁻² K⁻⁴] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.K_VON_KARMAN","page":"EmeraldConstants","title":"EmeraldConstants.K_VON_KARMAN","text":"Von Karman constant [-] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.LH_V₀","page":"EmeraldConstants","title":"EmeraldConstants.LH_V₀","text":"Latent heat vaporization at T₀ [K kg⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.LIGHT_SPEED","page":"EmeraldConstants","title":"EmeraldConstants.LIGHT_SPEED","text":"Light speed in vacuum [m s⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.M_DRYAIR","page":"EmeraldConstants","title":"EmeraldConstants.M_DRYAIR","text":"Molar mass of dry air [kg mol⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.M_H₂O","page":"EmeraldConstants","title":"EmeraldConstants.M_H₂O","text":"Molar mass of water [kg mol⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.P_ATM","page":"EmeraldConstants","title":"EmeraldConstants.P_ATM","text":"Mean atmospheric pressure at sea level [Pa] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.PRESS_TRIPLE","page":"EmeraldConstants","title":"EmeraldConstants.PRESS_TRIPLE","text":"Water vapor pressure at triple temperature [Pa] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.R_V","page":"EmeraldConstants","title":"EmeraldConstants.R_V","text":"Gas constant water vapor [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.RT₂₅","page":"EmeraldConstants","title":"EmeraldConstants.RT₂₅","text":"Gas constant times 298.15 K [J mol⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.T₀","page":"EmeraldConstants","title":"EmeraldConstants.T₀","text":"Freezing temperature of water [K] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.T₂₅","page":"EmeraldConstants","title":"EmeraldConstants.T₂₅","text":"Kelvin temperature at 25 Celcius [K] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.T_TRIPLE","page":"EmeraldConstants","title":"EmeraldConstants.T_TRIPLE","text":"Triple temperature of water [K] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.V_H₂O","page":"EmeraldConstants","title":"EmeraldConstants.V_H₂O","text":"Molar volume of liqiud water \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.YEAR_D","page":"EmeraldConstants","title":"EmeraldConstants.YEAR_D","text":"Mean number of days per year [day] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.Λ_THERMAL_H₂O","page":"EmeraldConstants","title":"EmeraldConstants.Λ_THERMAL_H₂O","text":"Thermal conductivity of water [W m⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.ρ_H₂O","page":"EmeraldConstants","title":"EmeraldConstants.ρ_H₂O","text":"Density of liquid water [kg m⁻³] \n\n\n\n\n\n","category":"function"},{"location":"modules/EmeraldConstants/#EmeraldConstants.ρg_MPa","page":"EmeraldConstants","title":"EmeraldConstants.ρg_MPa","text":"Density of water times gravity [MPa m⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"land/#Land","page":"Land","title":"Land","text":"","category":"section"},{"location":"land/","page":"Land","title":"Land","text":"CurrentModule = Land","category":"page"},{"location":"modules/LeafOptics/#LeafOptics","page":"LeafOptics","title":"LeafOptics","text":"","category":"section"},{"location":"modules/LeafOptics/","page":"LeafOptics","title":"LeafOptics","text":"CurrentModule = LeafOptics","category":"page"},{"location":"modules/LeafOptics/#Leaf-spectra","page":"LeafOptics","title":"Leaf spectra","text":"","category":"section"},{"location":"modules/LeafOptics/","page":"LeafOptics","title":"LeafOptics","text":"leaf_spectra!\nleaf_spectra!(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, lha::HyperspectralAbsorption{FT}, lwc::FT; APAR_car::Bool = true, reabsorb::Bool = true, α::FT = FT(40)) where {FT<:AbstractFloat}\nleaf_spectra!(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, ρ_par::FT, ρ_nir::FT, τ_par::FT, τ_nir::FT) where {FT<:AbstractFloat}\nleaf_spectra!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/LeafOptics/#LeafOptics.leaf_spectra!","page":"LeafOptics","title":"LeafOptics.leaf_spectra!","text":"This function updates leaf level reflectance, transmittance, and fluorescence spectra related parameters. Supported methods are\n\nUpdate leaf spectra based on pigment concentrations\nUpdate leaf spectra (reflectance and transmittance) to given broadband values\nUpdate leaf spectra based on pigment concentrations for the entire SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/LeafOptics/#LeafOptics.leaf_spectra!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralLeafBiophysics{FT}, ClimaCache.WaveLengthSet{FT}, ClimaCache.HyperspectralAbsorption{FT}, FT}} where FT<:AbstractFloat","page":"LeafOptics","title":"LeafOptics.leaf_spectra!","text":"leaf_spectra!(\n            bio::HyperspectralLeafBiophysics{FT},\n            wls::WaveLengthSet{FT},\n            lha::HyperspectralAbsorption{FT},\n            lwc::FT;\n            APAR_car::Bool = true,\n            reabsorb::Bool = true,\n            α::FT = FT(40)\n) where {FT<:AbstractFloat}\n\nUpdate leaf reflectance and transmittance spectra, and fluorescence spectrum matrices, given\n\nbio HyperspectralLeafBiophysics type struct that contains leaf biophysical parameters\nwls WaveLengthSet type struct that contain wave length bins\nlha HyperspectralAbsorption type struct that contains absorption characteristic curves\nlwc Leaf water content [mol m⁻²]\nAPAR_car If true, carotenoid absorption is accounted for in PPAR, default is true\nreabsorb If true, SIF reabsorption is enabled; otherwise, matb and matf should be based on the case with no reabsorption\nα Optimum angle of incidence (default is 40° as in PROSPECT-D, SCOPE uses 59°)\n\nExamples\n\nwls = ClimaCache.WaveLengthSet{Float64}();\nbio = ClimaCache.HyperspectralLeafBiophysics{Float64}();\nlha = ClimaCache.HyperspectralAbsorption{Float64}();\nleaf_spectra!(bio, wls, lha, 50.0);\nleaf_spectra!(bio, wls, lha, 50.0; APAR_car=false);\nleaf_spectra!(bio, wls, lha, 50.0; APAR_car=false, α=59.0);\n\n\n\n\n\n","category":"method"},{"location":"modules/LeafOptics/#LeafOptics.leaf_spectra!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralLeafBiophysics{FT}, ClimaCache.WaveLengthSet{FT}, FT, FT, FT, FT}} where FT<:AbstractFloat","page":"LeafOptics","title":"LeafOptics.leaf_spectra!","text":"leaf_spectra!(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, ρ_par::FT, ρ_nir::FT, τ_par::FT, τ_nir::FT) where {FT<:AbstractFloat}\n\nUpdate leaf reflectance and transmittance (e.g., prescribe broadband PAR and NIR values), given\n\nbio HyperspectralLeafBiophysics type struct that contains leaf biophysical parameters\nwls WaveLengthSet type struct that contain wave length bins\nρ_par Reflectance at PAR region\nρ_nir Reflectance at NIR region\nτ_par Transmittance at PAR region\nτ_nir Transmittance at NIR region\n\nExamples\n\nwls = ClimaCache.WaveLengthSet{Float64}();\nbio = ClimaCache.HyperspectralLeafBiophysics{Float64}();\nleaf_spectra!(bio, wls, 0.1, 0.45, 0.05, 0.25);\n\n\n\n\n\n","category":"method"},{"location":"modules/LeafOptics/#LeafOptics.leaf_spectra!-Union{Tuple{Union{ClimaCache.MonoMLGrassSPAC{FT}, ClimaCache.MonoMLPalmSPAC{FT}, ClimaCache.MonoMLTreeSPAC{FT}}}, Tuple{FT}} where FT<:AbstractFloat","page":"LeafOptics","title":"LeafOptics.leaf_spectra!","text":"leaf_spectra!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nUpdate leaf reflectance and transmittance for SPAC, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type SPAC\n\n\n\n\n\n","category":"method"},{"location":"modules/LeafOptics/#Leaf-PAR,-APAR,-and-PPAR","page":"LeafOptics","title":"Leaf PAR, APAR, and PPAR","text":"","category":"section"},{"location":"modules/LeafOptics/","page":"LeafOptics","title":"LeafOptics","text":"leaf_PAR","category":"page"},{"location":"modules/LeafOptics/#LeafOptics.leaf_PAR","page":"LeafOptics","title":"LeafOptics.leaf_PAR","text":"leaf_PAR(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, rad::HyperspectralRadiation{FT}; APAR_car::Bool = true) where {FT<:AbstractFloat}\n\nReturn leaf level PAR, APAR, and PPAR, given\n\nbio HyperspectralLeafBiophysics type struct that contains leaf biophysical parameters\nwls WaveLengthSet type struct that contains wave length bins\nrad HyperspectralRadiation type struct that contains incoming radiation information\nAPAR_car If true (default), account carotenoid absorption as PPAR; otherwise, PPAR is only by chlorophyll\n\n\n\nExamples\n\nwls = ClimaCache.WaveLengthSet{Float64}();\nbio = ClimaCache.HyperspectralLeafBiophysics{Float64}();\nrad = ClimaCache.HyperspectralRadiation{Float64}();\npar,apar,ppar = leaf_PAR(bio, wls, rad);\npar,apar,ppar = leaf_PAR(bio, wls, rad; APAR_car=false);\n\n\n\n\n\n","category":"function"},{"location":"modules/LeafOptics/#Leaf-SIF","page":"LeafOptics","title":"Leaf SIF","text":"","category":"section"},{"location":"modules/LeafOptics/","page":"LeafOptics","title":"LeafOptics","text":"leaf_SIF","category":"page"},{"location":"modules/LeafOptics/#LeafOptics.leaf_SIF","page":"LeafOptics","title":"LeafOptics.leaf_SIF","text":"leaf_SIF(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, rad::HyperspectralRadiation{FT}, ϕ::FT = FT(0.01); ϕ_photon::Bool = true) where {FT<:AbstractFloat}\n\nReturn the leaf level SIF at backward and forward directions, given\n\nbio HyperspectralLeafBiophysics type struct that contains leaf biophysical parameters\nwls WaveLengthSet type struct that contains wave length bins\nrad HyperspectralRadiation type struct that contains incoming radiation information\nϕ Fluorescence quantum yield\nϕ_photon If true (default), convert photon to photon when computing SIF; otherwise, convert energy to energy\n\n\n\nExamples\n\nwls = ClimaCache.WaveLengthSet{Float64}();\nbio = ClimaCache.HyperspectralLeafBiophysics{Float64}();\nrad = ClimaCache.HyperspectralRadiation{Float64}();\nsif_b,sif_f = leaf_SIF(bio, wls, rad, 0.01);\nsif_b,sif_f = leaf_SIF(bio, wls, rad, 0.01; ϕ_photon=false);\n\n\n\n\n\n","category":"function"},{"location":"modules/LeafOptics/#Utility-functions","page":"LeafOptics","title":"Utility functions","text":"","category":"section"},{"location":"modules/LeafOptics/","page":"LeafOptics","title":"LeafOptics","text":"average_transmittance\nphoton\nphoton!\nenergy\nenergy!","category":"page"},{"location":"modules/LeafOptics/#LeafOptics.average_transmittance","page":"LeafOptics","title":"LeafOptics.average_transmittance","text":"average_transmittance(α::FT, nr::FT) where {FT<:AbstractFloat}\n\nReturn the average transmittance of isotropic radiation across an interface between two dielectrics, given\n\nα angle of incidence\nnr Index of refraction\n\nReferences\n\nStern (1964) Transmission of isotropic radiation across an interface between two dielectrics. Applied Optics 3(1): 111-113.\nAllen (1973) Transmission of isotropic light across a dielectric surface in two and three dimensions. Journal of the Optical Society of America 63(6): 664-666.\n\n\n\n\n\n","category":"function"},{"location":"modules/LeafOptics/#LeafOptics.photon","page":"LeafOptics","title":"LeafOptics.photon","text":"photon(λ::FT, E::FT) where {FT<:AbstractFloat}\n\nReturn the number of moles of photons, given\n\nλ Wave length in [nm], converted to [m] by FAC\nE Joules of energy\n\n\n\n\n\n","category":"function"},{"location":"modules/LeafOptics/#LeafOptics.photon!","page":"LeafOptics","title":"LeafOptics.photon!","text":"photon!(λ::Vector{FT}, E::Vector{FT}, phot::Vector{FT}) where {FT<:AbstractFloat}\nphoton!(λ::Vector{FT}, E::Vector{FT}) where {FT<:AbstractFloat}\n\nCompute and save the number of moles of photons, given\n\nλ Wave length in [nm], converted to [m] by FAC\nE Joules of energy (will be converted to moles of photons if phot in not given)\nphot Mole of photons (variable to save)\n\n\n\n\n\n","category":"function"},{"location":"modules/LeafOptics/#LeafOptics.energy","page":"LeafOptics","title":"LeafOptics.energy","text":"energy(λ::FT, phot::FT) where {FT<:AbstractFloat}\n\nReturn the energy, given\n\nλ Wave length in [nm], converted to [m] by FAC\nphot Number of moles of photon\n\n\n\n\n\n","category":"function"},{"location":"modules/LeafOptics/#LeafOptics.energy!","page":"LeafOptics","title":"LeafOptics.energy!","text":"energy!(λ::Vector{FT}, phot::Vector{FT}, E::Vector{FT}) where {FT<:AbstractFloat}\nenergy!(λ::Vector{FT}, phot::Vector{FT}) where {FT<:AbstractFloat}\n\nCompute and save the number of moles of photons, given\n\nλ Wave length in [nm], converted to [m] by FAC\nphot Mole of photons (will be converted to moles of photons if E is not given)\nE Joules of energy (variable to save)\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomtaModels-API","page":"StomataModels","title":"StomtaModels API","text":"","category":"section"},{"location":"modules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"CurrentModule = StomataModels","category":"page"},{"location":"modules/StomataModels/#Empirical-models","page":"StomataModels","title":"Empirical models","text":"","category":"section"},{"location":"modules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"empirical_equation\nempirical_equation(sm::BallBerrySM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::BallBerrySM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::BallBerrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::BallBerrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/StomataModels/#StomataModels.empirical_equation","page":"StomataModels","title":"StomataModels.empirical_equation","text":"This function returns the stomatal conductance computed from empirical stomatal models. This is not the solution! Supported methods are for\n\nLeaf\nLeaves1D (ind=1 for sunlit, ind=2 for shaded leaves)\nLeaves2D (ind=NA for shaded, ind>1 for sunlit leaves)\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomataModels.empirical_equation-Union{Tuple{FT}, Tuple{ClimaCache.BallBerrySM{FT}, ClimaCache.Leaf{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.empirical_equation","text":"empirical_equation(sm::BallBerrySM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::GentineSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::LeuningSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::MedlynSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nReturn the stomatal conductance computed from empirical model formulation, given\n\nsm BallBerrySM, GentineSM, LeuningSM, or MedlynSM type model\nleaf Leaf type struct\nair AirLayer type environmental conditions\nβ Tuning factor for G1 (must be 1 if tuning factor is not based on G1)\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.empirical_equation-Union{Tuple{FT}, Tuple{ClimaCache.BallBerrySM{FT}, ClimaCache.Leaves1D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.empirical_equation","text":"empirical_equation(sm::BallBerrySM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::GentineSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::LeuningSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::MedlynSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nReturn the stomatal conductance computed from empirical model formulation, given\n\nsm BallBerrySM, GentineSM, LeuningSM, or MedlynSM type model\nleaves Leaves1D type struct\nair AirLayer type environmental conditions\nind Leaf index (1 for sunlit and 2 for shaded)\nβ Tuning factor for G1 (must be 1 if tuning factor is not based on G1)\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.empirical_equation-Union{Tuple{FT}, Tuple{ClimaCache.BallBerrySM{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.empirical_equation","text":"empirical_equation(sm::BallBerrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::GentineSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::LeuningSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::MedlynSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nReturn the stomatal conductance computed from empirical model formulation for the shaded leaves of Leaves2D, given\n\nsm BallBerrySM, GentineSM, LeuningSM, or MedlynSM type model\nleaves Leaves2D type struct\nair AirLayer type environmental conditions\nβ Tuning factor for G1 (must be 1 if tuning factor is not based on G1)\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.empirical_equation-Union{Tuple{FT}, Tuple{ClimaCache.BallBerrySM{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.empirical_equation","text":"empirical_equation(sm::BallBerrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::GentineSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::LeuningSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\nempirical_equation(sm::MedlynSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nReturn the stomatal conductance computed from empirical model formulation for the sunlit leaves of Leaves2D, given\n\nsm BallBerrySM, GentineSM, LeuningSM, or MedlynSM type model\nleaves Leaves2D type struct\nair AirLayer type environmental conditions\nind Sunlit leaf index within the leaf angular distribution\nβ Tuning factor for G1 (must be 1 if tuning factor is not based on G1)\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#Optimality-models","page":"StomataModels","title":"Optimality models","text":"","category":"section"},{"location":"modules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"∂A∂E\n∂R∂E\n∂T∂E\n∂Θ∂E\n∂Θ∂E(sm::AndereggSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θₙ∂E","category":"page"},{"location":"modules/StomataModels/#StomataModels.∂A∂E","page":"StomataModels","title":"StomataModels.∂A∂E","text":"∂A∂E(leaf::Leaf{FT}, air::AirLayer{FT}) where {FT<:AbstractFloat}\n∂A∂E(leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int) where {FT<:AbstractFloat}\n∂A∂E(leaves::Leaves2D{FT}, air::AirLayer{FT}) where {FT<:AbstractFloat}\n∂A∂E(leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int) where {FT<:AbstractFloat}\n\nReturn the partial derivative of A per E, given\n\nleaf Leaf type leaf\nair AirLayer type environmental conditions\nleaves Leaves1D, and Leaves2D type leaf\nind Index of the leaves (1 for sunlit and 2 for shaded for Leaves1D, all sunlit for Leaves2D)\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomataModels.∂R∂E","page":"StomataModels","title":"StomataModels.∂R∂E","text":"∂R∂E(lf::Union{Leaf{FT}, Leaves1D{FT}, Leaves2D{FT}}, air::AirLayer{FT}) where {FT<:AbstractFloat}\n\nReturns the marginal increase in leaf respiration rate per transpiration rate, given\n\nlf Leaf, Leaves1D, or Leaves2D type leaf\nair AirLayer type environmental conditions\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomataModels.∂T∂E","page":"StomataModels","title":"StomataModels.∂T∂E","text":"∂T∂E(lf::Union{Leaf{FT}, Leaves1D{FT}, Leaves2D{FT}}, air::AirLayer{FT}, f_view::FT) where {FT<:AbstractFloat}\n\nReturns the marginal increase in leaf temperature per transpiration rate, given\n\nlf Leaf, Leaves1D, or Leaves2D type leaf\nair AirLayer type environmental conditions\nf_view Ratio that leaf area is exposed to external sources/sinks (not other leaves, e.g., 2/LAI for canopy on average)\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomataModels.∂Θ∂E","page":"StomataModels","title":"StomataModels.∂Θ∂E","text":"This function returns the marginal risk for stomatal opening. This function supports a variety of optimality models for\n\nLeaf\nLeaves1D (ind=1 for sunlit leaves, ind=2 for shaded leaves)\nLeaves2D (ind=NA for shaded leaves, ind>1 for sunlit leaves)\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomataModels.∂Θ∂E-Union{Tuple{FT}, Tuple{ClimaCache.AndereggSM{FT}, ClimaCache.Leaf{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.∂Θ∂E","text":"∂Θ∂E(sm::AndereggSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::EllerSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::SperrySM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::WangSM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::Wang2SM{FT}, leaf::Leaf{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal risk for stomatal opening, given\n\nsm AndereggSM, EllerSM, SperrySM, WangSM, or Wang2SM type optimality model\nleaf Leaf type struct\nair AirLayer for environmental conditions\nδe Incremental flow rate to compute ∂E∂P\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.∂Θ∂E-Union{Tuple{FT}, Tuple{ClimaCache.AndereggSM{FT}, ClimaCache.Leaves1D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.∂Θ∂E","text":"∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::EllerSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::SperrySM{FT}, leaf::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::WangSM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::Wang2SM{FT}, leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal risk for stomatal opening, given\n\nsm AndereggSM, EllerSM, SperrySM, WangSM, or Wang2SM type optimality model\nleaves Leaves1D type struct\nair AirLayer for environmental conditions\nind Leaf index (1 for sunlit and 2 for shaded)\nδe Incremental flow rate to compute ∂E∂P\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.∂Θ∂E-Union{Tuple{FT}, Tuple{ClimaCache.AndereggSM{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.∂Θ∂E","text":"∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::EllerSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::SperrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::WangSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::Wang2SM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal risk for stomatal opening, given\n\nsm AndereggSM, EllerSM, SperrySM, WangSM, or Wang2SM type optimality model\nleaves Leaves2D type struct\nair AirLayer for environmental conditions\nδe Incremental flow rate to compute ∂E∂P\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.∂Θ∂E-Union{Tuple{FT}, Tuple{ClimaCache.AndereggSM{FT}, ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.∂Θ∂E","text":"∂Θ∂E(sm::AndereggSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::EllerSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::SperrySM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::WangSM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂Θ∂E(sm::Wang2SM{FT}, leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal risk for stomatal opening, given\n\nsm AndereggSM, EllerSM, SperrySM, WangSM, or Wang2SM type optimality model\nleaf Leaf type struct\nair AirLayer for environmental conditions\nδe Incremental flow rate to compute ∂E∂P\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.∂Θₙ∂E","page":"StomataModels","title":"StomataModels.∂Θₙ∂E","text":"This function returns the ∂Θₙ∂E for nocturnal stomatal opening. Currently this function only supports WangSM which has been published for the purpose of computing nocturnal stomatal conductance.     Supports to other optimality models will be added later when I am ready to test those.\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#Stomtal-conductance-limits","page":"StomataModels","title":"Stomtal conductance limits","text":"","category":"section"},{"location":"modules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"limit_stomatal_conductance!","category":"page"},{"location":"modules/StomataModels/#StomataModels.limit_stomatal_conductance!","page":"StomataModels","title":"StomataModels.limit_stomatal_conductance!","text":"limit_stomatal_conductance!(leaf::Leaf{FT}) where {FT<:AbstractFloat}\nlimit_stomatal_conductance!(leaves::Leaves1D{FT}) where {FT<:AbstractFloat}\nlimit_stomatal_conductance!(leaves::Leaves2D{FT}) where {FT<:AbstractFloat}\n\nLimit stomatal conductance for H₂O for\n\nleaf Leaf type struct\nleaves Leaves1D type struct\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#Prognostic-conductance","page":"StomataModels","title":"Prognostic conductance","text":"","category":"section"},{"location":"modules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"∂g∂t\n∂g∂t(leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂g∂t(leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂g∂t(leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂g∂t(leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n∂gₙ∂t\nstomatal_conductance!\nstomatal_conductance!(spac::MonoElementSPAC{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nstomatal_conductance!(spac::MonoElementSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/StomataModels/#StomataModels.∂g∂t","page":"StomataModels","title":"StomataModels.∂g∂t","text":"This function returns the stomatal conductance change slope. Supported functionalities are\n\nLeaf\nLeaves1D (ind=1 for sunlit, ind=2 for shaded leaves)\nLeaves2D (ind=NA for shaded, ind>1 for sunlit leaves)\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomataModels.∂g∂t-Union{Tuple{FT}, Tuple{ClimaCache.Leaf{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.∂g∂t","text":"∂g∂t(leaf::Leaf{FT}, air::AirLayer{FT}; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nleaf Leaf type struct\nair AirLayer type environmental conditions\nβ Tuning factor (only used for empirical models)\nδe Incremental flow rate to compute ∂E∂P (only used for optimality models)\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.∂g∂t-Union{Tuple{FT}, Tuple{ClimaCache.Leaves1D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.∂g∂t","text":"∂g∂t(leaves::Leaves1D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nleaves Leaves1D type struct\nair AirLayer type environmental conditions\nind Leaf index (1 for sunlit and 2 for shaded)\nβ Tuning factor (only used for empirical models)\nδe Incremental flow rate to compute ∂E∂P (only used for optimality models)\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.∂g∂t-Union{Tuple{FT}, Tuple{ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.∂g∂t","text":"∂g∂t(leaves::Leaves2D{FT}, air::AirLayer{FT}; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nleaves Leaves2D type struct\nair AirLayer type environmental conditions\nβ Tuning factor (only used for empirical models)\nδe Incremental flow rate to compute ∂E∂P (only used for optimality models)\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.∂g∂t-Union{Tuple{FT}, Tuple{ClimaCache.Leaves2D{FT}, ClimaCache.AirLayer{FT}, Int64}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.∂g∂t","text":"∂g∂t(leaves::Leaves2D{FT}, air::AirLayer{FT}, ind::Int; β::FT = FT(1), δe::FT = FT(1e-7)) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nleaves Leaves2D type struct\nair AirLayer type environmental conditions\nind Sunlit leaf index within the leaf angular distribution\nβ Tuning factor (only used for empirical models)\nδe Incremental flow rate to compute ∂E∂P (only used for optimality models)\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.∂gₙ∂t","page":"StomataModels","title":"StomataModels.∂gₙ∂t","text":"∂gₙ∂t(lf::Union{Leaf{FT}, Leaves1D{FT}, Leaves2D{FT}}, air::AirLayer{FT}) where {FT<:AbstractFloat}\n\nReturn the marginal increase of stomatal conductance, given\n\nlf Leaf, Leaves1D, or Leaves2D type struct\nair AirLayer type environmental conditions\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomataModels.stomatal_conductance!","page":"StomataModels","title":"StomataModels.stomatal_conductance!","text":"This function updates stomatal conductance for H₂O and CO₂. Supported functionalities are\n\nUpdate conductance for H₂O prognostically\nUpdate conductance for CO₂ based on that for H₂O\n\n\n\n\n\n","category":"function"},{"location":"modules/StomataModels/#StomataModels.stomatal_conductance!-Union{Tuple{ClimaCache.MonoElementSPAC{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.stomatal_conductance!","text":"stomatal_conductance!(spac::MonoElementSPAC{FT}; β::FT = FT(1)) where {FT<:AbstractFloat}\nstomatal_conductance!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate marginal stomatal conductance, given\n\nspac MonoElementSPAC, MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type struct\nβ Tuning factor\n\n\n\n\n\n","category":"method"},{"location":"modules/StomataModels/#StomataModels.stomatal_conductance!-Union{Tuple{FT}, Tuple{ClimaCache.MonoElementSPAC{FT}, FT}} where FT<:AbstractFloat","page":"StomataModels","title":"StomataModels.stomatal_conductance!","text":"stomatal_conductance!(spac::MonoElementSPAC{FT}, Δt::FT) where {FT<:AbstractFloat}\nstomatal_conductance!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}, Δt::FT) where {FT<:AbstractFloat}\n\nUpdate marginal stomatal conductance, given\n\nspac MonoElementSPAC, MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type struct\nΔt Time step length [s]\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer","text":"","category":"section"},{"location":"modules/CanopyRadiativeTransfer/","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer","text":"CurrentModule = CanopyRadiativeTransfer","category":"page"},{"location":"modules/CanopyRadiativeTransfer/#Leaf-Inclination-Angle","page":"CanopyRadiativeTransfer","title":"Leaf Inclination Angle","text":"","category":"section"},{"location":"modules/CanopyRadiativeTransfer/","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer","text":"lidf_cdf\ninclination_angles!","category":"page"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.lidf_cdf","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.lidf_cdf","text":"lidf_cdf(lidf::VerhoefLIDF{FT}, θ::FT) where {FT<:AbstractFloat}\n\nReturn the cumulative distribution frequency, given\n\nlidf VerhoefLIDF type algorithm\nθ Leaf inclination angle in [°]\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.inclination_angles!","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.inclination_angles!","text":"inclination_angles!(can::Union{BroadbandSLCanopy{FT}, HyperspectralMLCanopy{FT}}, lidf::VerhoefLIDF{FT}) where {FT<:AbstractFloat}\n\nUpdate the frequency of leaf inclination angles, given\n\ncan HyperspectralMLCanopy type multiple layer canopy\nlidf VerhoefLIDF type algorithm\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#Clumping-Index","page":"CanopyRadiativeTransfer","title":"Clumping Index","text":"","category":"section"},{"location":"modules/CanopyRadiativeTransfer/","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer","text":"clumping_index!","category":"page"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.clumping_index!","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.clumping_index!","text":"clumping_index!(can::HyperspectralMLCanopy, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\n\nUpdate the clumping index, given\n\ncan HyperspectralMLCanopy type canopy\nangles SunSensorGeometry type angles\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#Hyperspectral-Canopy-RT","page":"CanopyRadiativeTransfer","title":"Hyperspectral Canopy RT","text":"","category":"section"},{"location":"modules/CanopyRadiativeTransfer/","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer","text":"soil_albedo!\nextinction_coefficient\nextinction_coefficient(sza::FT, lia::FT) where {FT<:AbstractFloat}\nextinction_coefficient(lia::FT) where {FT<:AbstractFloat}\nextinction_coefficient(sza::FT, vza::FT, raa::FT, lia::FT) where {FT<:AbstractFloat}\nextinction_scattering_coefficients!\nextinction_scattering_coefficients!(can::BroadbandSLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\nextinction_scattering_coefficients!(can::HyperspectralMLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\ncanopy_optical_properties!\ncanopy_optical_properties!(can::HyperspectralMLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\ncanopy_optical_properties!(can::HyperspectralMLCanopy{FT}, albedo::BroadbandSoilAlbedo{FT}) where {FT<:AbstractFloat}\ncanopy_optical_properties!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, soil::Soil{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!\ncanopy_radiation!(can::BroadbandSLCanopy{FT}, leaf::Leaves1D{FT}, rad::BroadbandRadiation{FT}, soil::Soil{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(can::HyperspectralMLCanopy{FT}, albedo::BroadbandSoilAlbedo{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, rad::HyperspectralRadiation{FT}, soil::Soil{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\ncanopy_fluorescence!","category":"page"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.soil_albedo!","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.soil_albedo!","text":"soil_albedo!(can::HyperspectralMLCanopy{FT}, soil::Soil{FT}) where {FT<:AbstractFloat}\n\nUpdates lower soil boundary reflectance, given\n\ncan HyperspectralMLCanopy type struct\nsoil Soil type struct\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.extinction_coefficient","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.extinction_coefficient","text":"This function compute the extinction coefficients for direct and diffuse radiation for given leaf inclination. Supported methods are to\n\nCompute the coefficient for given direct solar zenith angle (SZA) and leaf inclination angle (LIA)\nCompute the coefficient for diffuse light at given LIA\nCompute the coefficients for given sun-sensor geometry\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.extinction_coefficient-Union{Tuple{FT}, Tuple{FT, FT}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.extinction_coefficient","text":"extinction_coefficient(sza::FT, lia::FT) where {FT<:AbstractFloat}\n\nReturn the extinction coefficient for direct radiation, given\n\nsza Solar zenith angle in °\nlia Leaf inclination angle in °\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.extinction_coefficient-Tuple{FT} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.extinction_coefficient","text":"extinction_coefficient(lia::FT) where {FT<:AbstractFloat}\n\nReturn the extinction coefficient for diffuse radiation (unifrom 18 average angles from 2.5° to 87.5°), given\n\nsza Solar zenith angle in °\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.extinction_coefficient-Union{Tuple{FT}, NTuple{4, FT}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.extinction_coefficient","text":"extinction_coefficient(sza::FT, vza::FT, raa::FT, lia::FT) where {FT<:AbstractFloat}\n\nReturn the extinction and scattering coefficients (extinction coefficients from solar and viewing directions, and scattering coefficients for backward and forward directions, and some sin and cos     products: _Co, _Cs, _So, _Ss), given\n\nsza Solar zenith angle in °\nvza Viewing zenith angle in °\nraa Relative azimuth angle in °\nlia Leaf inclination angle in °\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.extinction_scattering_coefficients!","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.extinction_scattering_coefficients!","text":"This function updates the extinction (and scattering) coefficients for canopy. Supported methods are to\n\nUpdate coefficients for broadband single layer canopy\nUpdate coefficients for hyperspectral mutiple layers canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.extinction_scattering_coefficients!-Union{Tuple{FT}, Tuple{ClimaCache.BroadbandSLCanopy{FT}, ClimaCache.SunSensorGeometry{FT}}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.extinction_scattering_coefficients!","text":"extinction_scattering_coefficients!(can::BroadbandSLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\n\nUpdate the extinction and scattering coefficients, given\n\ncan BroadbandSLCanopy type canopy\nangles SunSensorGeometry type angles\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.extinction_scattering_coefficients!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, ClimaCache.SunSensorGeometry{FT}}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.extinction_scattering_coefficients!","text":"extinction_scattering_coefficients!(can::HyperspectralMLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\n\nUpdate the extinction and scattering coefficients, given\n\ncan HyperspectralMLCanopy type canopy\nangles SunSensorGeometry type angles\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_optical_properties!","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_optical_properties!","text":"This function updates canopy optical properties for canopy. The supported methods are to\n\nUpdate the extinction coefficients\nUpdate the soil boundary conditions (not public function)\nUpdate scattering coefficient matrices\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_optical_properties!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, ClimaCache.SunSensorGeometry{FT}}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_optical_properties!","text":"canopy_optical_properties!(can::HyperspectralMLCanopy{FT}, angles::SunSensorGeometry{FT}) where {FT<:AbstractFloat}\n\nUpdates canopy optical properties (extinction coefficients for direct and diffuse light) based on the SAIL model, given\n\ncan HyperspectralMLCanopy type struct\nangles SunSensorGeometry type struct\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_optical_properties!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, ClimaCache.BroadbandSoilAlbedo{FT}}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_optical_properties!","text":"canopy_optical_properties!(can::HyperspectralMLCanopy{FT}, albedo::BroadbandSoilAlbedo{FT}) where {FT<:AbstractFloat}\ncanopy_optical_properties!(can::HyperspectralMLCanopy{FT}, albedo::HyperspectralSoilAlbedo{FT}) where {FT<:AbstractFloat}\n\nUpdates lower soil boundary reflectance, given\n\ncan HyperspectralMLCanopy type struct\nalbedo BroadbandSoilAlbedo or HyperspectralSoilAlbedo type soil albedo\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_optical_properties!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, Array{ClimaCache.Leaves2D{FT}, 1}, ClimaCache.Soil{FT}}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_optical_properties!","text":"canopy_optical_properties!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, soil::Soil{FT}) where {FT<:AbstractFloat}\n\nUpdates canopy optical properties (scattering coefficient matrices), given\n\ncan HyperspectralMLCanopy type struct\nleaves Vector of Leaves2D\nsoil Bottom soil boundary layer\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_radiation!","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"This function updates canopy radiation profiles. The supported methods are to\n\nUpdate shortwave radiation profile for broadband or hyperspectral canopy\nUpdates soil shortwave radiation profiles\nUpdate longwave radation profile for broadband or hyperspectral canopy\nUpdate radiation profile for SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_radiation!-Union{Tuple{FT}, Tuple{ClimaCache.BroadbandSLCanopy{FT}, ClimaCache.Leaves1D{FT}, ClimaCache.BroadbandRadiation{FT}, ClimaCache.Soil{FT}}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"canopy_radiation!(can::BroadbandSLCanopy{FT}, leaf::Leaves1D{FT}, rad::BroadbandRadiation{FT}, soil::Soil{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(can::BroadbandSLCanopy{FT}, leaf::Leaves1D{FT}, rad::FT, soil::Soil{FT}) where {FT<:AbstractFloat}\n\nUpdates shortwave or longwave radiation profiles, given\n\ncan HyperspectralMLCanopy type struct\nleaf Leaves1D type struct\nrad Broadband shortwave or longwave radiation\nsoil Soil type struct\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_radiation!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, ClimaCache.BroadbandSoilAlbedo{FT}}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"canopy_radiation!(can::HyperspectralMLCanopy{FT}, albedo::BroadbandSoilAlbedo{FT}) where {FT<:AbstractFloat}\ncanopy_radiation!(can::HyperspectralMLCanopy{FT}, albedo::HyperspectralSoilAlbedo{FT}) where {FT<:AbstractFloat}\n\nUpdates soil shortwave radiation profiles, given\n\ncan HyperspectralMLCanopy type struct\nalbedo BroadbandSoilAlbedo or HyperspectralSoilAlbedo type soil albedo\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_radiation!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralMLCanopy{FT}, Array{ClimaCache.Leaves2D{FT}, 1}, ClimaCache.HyperspectralRadiation{FT}, ClimaCache.Soil{FT}}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"canopy_radiation!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, rad::HyperspectralRadiation{FT}, soil::Soil{FT}; APAR_CAR::Bool = true) where {FT<:AbstractFloat}\ncanopy_radiation!(can::HyperspectralMLCanopy{FT}, leaves::Vector{Leaves2D{FT}}, rad::FT, soil::Soil{FT}) where {FT<:AbstractFloat}\n\nUpdates canopy radiation profiles for shortwave or longwave radiation, given\n\ncan HyperspectralMLCanopy type struct\nleaves Vector of Leaves2D\nrad Incoming shortwave or longwave radiation\nsoil Bottom soil boundary layer\nAPAR_CAR Whether carotenoid absorption is counted in PPAR, default is true\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_radiation!-Union{Tuple{Union{ClimaCache.MonoMLGrassSPAC{FT}, ClimaCache.MonoMLPalmSPAC{FT}, ClimaCache.MonoMLTreeSPAC{FT}}}, Tuple{FT}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_radiation!","text":"canopy_radiation!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nUpdates canopy radiation profiles for shortwave and longwave radiation, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, MonoMLTreeSPAC type SPAC\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.canopy_fluorescence!","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.canopy_fluorescence!","text":"canopy_fluorescence!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}) where {FT<:AbstractFloat}\n\nUpdates canopy fluorescence, given\n\nspac MonoMLGrassSPAC, MonoMLPalmSPAC, MonoMLTreeSPAC type SPAC\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#Remote-Sensing-Applications","page":"CanopyRadiativeTransfer","title":"Remote Sensing Applications","text":"","category":"section"},{"location":"modules/CanopyRadiativeTransfer/","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer","text":"read_spectrum\nread_spectrum(x::Vector{FT}, y::Vector{FT}, target::FT) where {FT<:AbstractFloat}\nread_spectrum(x::Vector{FT}, y::Vector{FT}, x₁::FT, x₂::FT; steps::Int = 2) where {FT<:AbstractFloat}\nMODIS_BLUE\nMODIS_EVI\nMODIS_EVI2\nMODIS_LSWI\nMODIS_NDVI\nMODIS_NIR\nMODIS_NIRv\nMODIS_NIRvR\nMODIS_RED\nOCO2_SIF759\nOCO2_SIF770\nOCO3_SIF759\nOCO3_SIF770\nTROPOMI_SIF683\nTROPOMI_SIF740\nTROPOMI_SIF747\nTROPOMI_SIF751","category":"page"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.read_spectrum","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.read_spectrum","text":"This function interpolate the spectrum to give values at the target wavelength bin(s). The supported methods include\n\nInterpolate the spectrum at a given wavelength\nInterpolate the spectrum in a given wavelength range\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.read_spectrum-Union{Tuple{FT}, Tuple{Vector{FT}, Vector{FT}, FT}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.read_spectrum","text":"read_spectrum(x::Vector{FT}, y::Vector{FT}, target::FT) where {FT<:AbstractFloat}\n\nReturn the spectrum value at target wavelength bin, given\n\nx X-axis of the spectrum\ny Y-axis of the spectrum\ntarget Target x value\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.read_spectrum-Union{Tuple{FT}, Tuple{Vector{FT}, Vector{FT}, FT, FT}} where FT<:AbstractFloat","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.read_spectrum","text":"read_spectrum(x::Vector{FT}, y::Vector{FT}, x₁::FT, x₂::FT; steps::Int = 2) where {FT<:AbstractFloat}\n\nReturn the spectrum value at target wavelength bin, given\n\nx X-axis of the spectrum\ny Y-axis of the spectrum\nx₁ Lower x boundary\nx₂ Upper x boundary\nsteps The incremental Δx is (x₂ - x₁) / steps\n\n\n\n\n\n","category":"method"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_BLUE","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_BLUE","text":"MODIS_BLUE(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn blue band reflectance for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_EVI","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_EVI","text":"MODIS_EVI(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn EVI for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_EVI2","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_EVI2","text":"MODIS_EVI2(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn EVI2 for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_LSWI","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_LSWI","text":"MODIS_LSWI(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn LSWI for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_NDVI","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_NDVI","text":"MODIS_NDVI(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn NDVI for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_NIR","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_NIR","text":"MODIS_NIR(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn near infrared band reflectance for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_NIRv","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_NIRv","text":"MODIS_NIRv(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn NIRv for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_NIRvR","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_NIRvR","text":"MODIS_NIRvR(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn NIRv radiance for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.MODIS_RED","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.MODIS_RED","text":"MODIS_RED(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn red band reflectance for MODIS setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.OCO2_SIF759","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.OCO2_SIF759","text":"OCO2_SIF759(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 759 nm for OCO2 setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.OCO2_SIF770","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.OCO2_SIF770","text":"OCO2_SIF770(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 770 nm for OCO2 setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.OCO3_SIF759","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.OCO3_SIF759","text":"OCO3_SIF759(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 759 nm for OCO3 setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.OCO3_SIF770","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.OCO3_SIF770","text":"OCO3_SIF770(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 770 nm for OCO3 setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.TROPOMI_SIF683","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.TROPOMI_SIF683","text":"TROPOMI_SIF683(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 682.5 nm for TROPOMI setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.TROPOMI_SIF740","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.TROPOMI_SIF740","text":"TROPOMI_SIF740(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 740 nm for TROPOMI setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.TROPOMI_SIF747","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.TROPOMI_SIF747","text":"TROPOMI_SIF747(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 746.5 nm for TROPOMI setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/CanopyRadiativeTransfer/#CanopyRadiativeTransfer.TROPOMI_SIF751","page":"CanopyRadiativeTransfer","title":"CanopyRadiativeTransfer.TROPOMI_SIF751","text":"TROPOMI_SIF751(can::HyperspectralMLCanopy{FT}) where {FT<:AbstractFloat}\n\nReturn SIF @ 750.5 nm for TROPOMI setup, given\n\ncan HyperspectralMLCanopy type canopy\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis","page":"Photosynthesis","title":"Photosynthesis","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"CurrentModule = Photosynthesis","category":"page"},{"location":"modules/Photosynthesis/#About","page":"Photosynthesis","title":"About","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Photosynthesis models for C3 and C4 photosynthesis. Photosynthesis.jl supports three photosynthesis models and two fluorescence models. The photosynthesis models are","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"C3VJP model based on classic C3 model, which is known as FvCB model (Farquhar et al. 1980)\nC4VJP model based on classic C4 model, which is known as Collaz model (Collaz et al. 1992)\nC3Cytochrome model based on a new C3 model developed by Johnson and Berry (2021)","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"We, however, made some modifications by adding a product limited photosynthetic rate to the C3 models, and a Rubisco limited photosynthetic rate to the C4 model.","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Besides the tranditional photosynthesis model, we also included functions to compute fluorescence related parameters, such as fluorescence quantum yield and non-photochemical quenching. he two implemented fluorescence models are","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Van der Tol et al. (2013) fluorescence model to use with C3VJP and C4VJP models\nJohnson and Berry (2021) fluorescence model to use with C3Cytochrome model","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"We aim to make Photosynthesis.jl a standalone package rather than just part of the CliMA Land model. Thus, in the documentations below, we will present examples of how to use Photosynthesis.jl at the leaf level. Same logic applies to canopy scale simulations.","category":"page"},{"location":"modules/Photosynthesis/#Model-Selection","page":"Photosynthesis","title":"Model Selection","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Starting from v0.3, photosynthesis and fluorescence model selection is done by setting up the fields of a leaf. There are three types of leaf in Photosynthesis (all the structures are defined in ClimaCache.jl and shared among all CliMA Land submodules), and they are","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Leaf for a single leaf to use in leaf level research\nLeaves1D for a vector of leaves to use in big leaf models\nLeaves2D for a matrix of sunlit fractions and a shaded fraction to use along with canopy with leaf angular distribution","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"For all of the three leaf structs, there are two fields named","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"PSM for photosynthesis model\nPRC for photosynthesis reaction center","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"A C3VJPModel type PSM along with a VJPReactionCenter type PRC defines the C3VJP model; a C4VJPModel type PSM along with a VJPReactionCenter type PRC defines the C4VJP model; and a C3CytochromeModel type PSM along with a CytochromeReactionCenter type PRC defines the C3Cytochrome model. For instance, leaf_c3, leaf_c4, and leaf_cy each defines a model to use the three predefined photosynthesis models:","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using ClimaCache;\nFT = Float64;\n\nleaf_c3 = ClimaCache.Leaf{FT}();\nleaf_c4 = ClimaCache.Leaf{FT}(PSM = ClimaCache.C4VJPModel{FT}());\nleaf_cy = ClimaCache.Leaf{FT}(PSM = ClimaCache.C3CytochromeModel{FT}(), PRC = ClimaCache.CytochromeReactionCenter{FT}());\n\n# users can define the same fields for Leaves1D and Leaves2D to custoimize photosynthesis model\nleaf_d3 = ClimaCache.Leaves1D{FT}();\nleaf_d4 = ClimaCache.Leaves1D{FT}(PSM = ClimaCache.C4VJPModel{FT}());\nleaf_dy = ClimaCache.Leaves1D{FT}(PSM = ClimaCache.C3CytochromeModel{FT}(), PRC = ClimaCache.CytochromeReactionCenter{FT}());\nleaf_e3 = ClimaCache.Leaves2D{FT}();\nleaf_e4 = ClimaCache.Leaves2D{FT}(PSM = ClimaCache.C4VJPModel{FT}());\nleaf_ey = ClimaCache.Leaves2D{FT}(PSM = ClimaCache.C3CytochromeModel{FT}(), PRC = ClimaCache.CytochromeReactionCenter{FT}());","category":"page"},{"location":"modules/Photosynthesis/#Photosynthesis-Model-Procedure","page":"Photosynthesis","title":"Photosynthesis Model Procedure","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"For all three photosynthesis+fluorescence combo models, photosynthetic rates are computed using the following procedure:","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Update temperature dependent variables using photosystem_temperature_dependence!\nCalculate electron transport rate using photosystem_electron_transport!\nCalculate RubisCO limited rate using rubisco_limited_rate!\nCalculate light limited rate using light_limited_rate!\nCalculate product limited rate using product_limited_rate!\nCalculate gross and net rates using colimit_photosynthesis!\nUpdate fluorescence related variables using photosystem_coefficients!","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Yet, for convenience, all the listed steps are combined in one function leaf_photosynthesis! (see page API for all supported methods). At leaf level, one can simply call the function, for example","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using Photosynthesis\n\nair    = ClimaCache.AirLayer{FT}();\ng_mode = ClimaCache.GCO₂Mode();\np_mode = ClimaCache.PCO₂Mode();\nPhotosynthesis.leaf_photosynthesis!(leaf_c3, air, g_mode);\nPhotosynthesis.leaf_photosynthesis!(leaf_cy, air, p_mode);","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Note here that (1) we need parameters from surrounding air to compute photosynthetic rates, such as oxygen concentration, (2) GCO₂Mode mode is used when leaf total diffusive conductance for CO₂ is known, and PCO₂Mode is used when leaf internal CO₂ partial pressure is known, and (3) leaf and air conditions must be synced before calling the leaf_photosynthesis! function. For example, to construct an A-Ci curve, one will need to change the field _p_CO₂_i to proceed:","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_c3.t = 300;\nleaf_c3.ppar = 1000;\nfor _p in 5:5:100\n    leaf_c3._p_CO₂_i = _p;\n    Photosynthesis.leaf_photosynthesis!(leaf_c3, air, p_mode);\n    @info \"Photosynthetic rate at\" leaf_c3._p_CO₂_i leaf_c3.a_net;\nend","category":"page"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"In the example above, we first defined leaf temperature is 300 K (note that we use Kelvin here, not Celcius), then prescribed a PPAR of 1000 μmol m⁻² s⁻¹. PPAR is the photosynthetically active radiation (PAR) that goes to photosystems; PPAR is different from APAR (PAR absorbed by leaf, some APAR does not go to photosystems). See our technical note for the difference between PAR, APAR, and PPAR. Similarly, we can try out how Anet responds to leaf temperature and PPAR by modifying the example above.","category":"page"},{"location":"modules/Photosynthesis/#Photosynthesis-model","page":"Photosynthesis","title":"Photosynthesis model","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_photosynthesis!\nleaf_photosynthesis!(lf::Union{Leaf{FT}, Leaves2D{FT}}, air::AirLayer{FT}, g_lc::FT, ppar::FT, t::FT = lf.t) where {FT<:AbstractFloat}\nleaf_photosynthesis!(lf::Union{Leaf{FT}, Leaves1D{FT}, Leaves2D{FT}}, air::AirLayer{FT}, mode::Union{GCO₂Mode, PCO₂Mode}) where {FT<:AbstractFloat}\nleaf_photosynthesis!(spac::MonoElementSPAC{FT}, mode::Union{GCO₂Mode, PCO₂Mode}) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/Photosynthesis/#Photosynthesis.leaf_photosynthesis!","page":"Photosynthesis","title":"Photosynthesis.leaf_photosynthesis!","text":"Per refactored Photosynthesis module, the only things one need to know is the public function leaf_photosynthesis! and some construtors from ClimaCache. See the examples in the methods below for     details about how to use the function. The steps for computing photosynthetic rates are\n\nUpdate temperature dependent variables using photosystem_temperature_dependence!\nCalculate electron transport rate using photosystem_electron_transport!\nCalculate RubisCO limited rate using rubisco_limited_rate!\nCalculate light limited rate using light_limited_rate!\nCalculate product limited rate using product_limited_rate!\nCalculate gross and net rates using colimit_photosynthesis!\nUpdate fluorescence related variables using photosystem_coefficients!\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis.leaf_photosynthesis!-Union{Tuple{FT}, Tuple{Union{ClimaCache.Leaf{FT}, ClimaCache.Leaves2D{FT}}, ClimaCache.AirLayer{FT}, FT, FT}, Tuple{Union{ClimaCache.Leaf{FT}, ClimaCache.Leaves2D{FT}}, ClimaCache.AirLayer{FT}, FT, FT, FT}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.leaf_photosynthesis!","text":"leaf_photosynthesis!(lf::Union{Leaf{FT}, Leaves2D{FT}}, air::AirLayer{FT}, g_lc::FT, ppar::FT, t::FT = lf.t) where {FT<:AbstractFloat}\nleaf_photosynthesis!(lf::Leaves1D{FT}, air::AirLayer{FT}, g_lc::FT, ppar::FT, t::FT) where {FT<:AbstractFloat}\n\nUpdates leaf photosynthetic rates based on CO₂ partial pressure (for StomataModels.jl temporary use), given\n\nlf Leaf, Leaves1D, or Leaves2D type structure that stores biophysical, reaction center, and photosynthesis model structures\nair AirLayer structure for environmental conditions like O₂ partial pressure\ng_lc Leaf diffusive conductance to CO₂ in [mol m⁻² s⁻¹], default is leaf._g_CO₂\nppar APAR used for photosynthesis\nt Leaf temperature in [K]\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Photosynthesis.leaf_photosynthesis!-Union{Tuple{FT}, Tuple{Union{ClimaCache.Leaf{FT}, ClimaCache.Leaves1D{FT}, ClimaCache.Leaves2D{FT}}, ClimaCache.AirLayer{FT}, Union{ClimaCache.GCO₂Mode, ClimaCache.PCO₂Mode}}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.leaf_photosynthesis!","text":"leaf_photosynthesis!(lf::Union{Leaf{FT}, Leaves1D{FT}, Leaves2D{FT}}, air::AirLayer{FT}, mode::Union{GCO₂Mode, PCO₂Mode}) where {FT<:AbstractFloat}\n\nUpdates leaf photosynthetic rates based on CO₂ partial pressure or CO₂ conductance, given\n\nlf Leaf, Leaves1D, or Leaves2D type structure that stores biophysical, reaction center, and photosynthesis model structures\nair AirLayer structure for environmental conditions like O₂ partial pressure\nmode GCO₂Mode or PCO₂Mode that uses CO₂ conductance or partial pressure to compute photosynthetic rates\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Photosynthesis.leaf_photosynthesis!-Union{Tuple{FT}, Tuple{ClimaCache.MonoElementSPAC{FT}, Union{ClimaCache.GCO₂Mode, ClimaCache.PCO₂Mode}}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.leaf_photosynthesis!","text":"leaf_photosynthesis!(spac::MonoElementSPAC{FT}, mode::Union{GCO₂Mode, PCO₂Mode}) where {FT<:AbstractFloat}\nleaf_photosynthesis!(spac::Union{MonoMLGrassSPAC{FT}, MonoMLPalmSPAC{FT}, MonoMLTreeSPAC{FT}}, mode::Union{GCO₂Mode, PCO₂Mode}) where {FT<:AbstractFloat}\n\nUpdates leaf photosynthetic rates for SPAC, given\n\nspac MonoElementSPAC, MonoMLGrassSPAC, MonoMLPalmSPAC, or MonoMLTreeSPAC type SPAC\nmode GCO₂Mode or PCO₂Mode\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Temperature-dependency","page":"Photosynthesis","title":"Temperature dependency","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"temperature_correction\ntemperature_corrected_value\nphotosystem_temperature_dependence!\n∂R∂T","category":"page"},{"location":"modules/Photosynthesis/#Photosynthesis.temperature_correction","page":"Photosynthesis","title":"Photosynthesis.temperature_correction","text":"temperature_correction(td::Arrhenius{FT}, t::FT; t_ref::FT = td.T_REF) where {FT<:AbstractFloat}\ntemperature_correction(td::ArrheniusPeak{FT}, t::FT; t_ref::FT = td.T_REF) where {FT<:AbstractFloat}\ntemperature_correction(td::Q10{FT}, t::FT; t_ref::FT = td.T_REF) where {FT<:AbstractFloat}\ntemperature_correction(td::Q10Peak{FT}, t::FT; t_ref::FT = td.T_REF) where {FT<:AbstractFloat}\n\nReturn the correction ratio for a temperature dependent variable, given\n\ntd Arrhenius, ArrheniusPeak, Q10, or Q10Peak type temperature dependency struture\nt Target temperature in K\nt_ref Reference temperature in K, default is td.T_REF (298.15 K)\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis.temperature_corrected_value","page":"Photosynthesis","title":"Photosynthesis.temperature_corrected_value","text":"temperature_corrected_value(td::Union{Arrhenius{FT}, ArrheniusPeak{FT}, Q10{FT}, Q10Peak{FT}}, t::FT; t_ref::FT = td.T_REF) where {FT<:AbstractFloat}\n\nReturn the temperature corrected value, given\n\ntd Arrhenius, ArrheniusPeak, Q10, or Q10Peak type temperature dependency struture\nt Target temperature in K\nt_ref Reference temperature in K, default is td.T_REF (298.15 K)\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis.photosystem_temperature_dependence!","page":"Photosynthesis","title":"Photosynthesis.photosystem_temperature_dependence!","text":"photosystem_temperature_dependence!(psm::C3CytochromeModel{FT}, air::AirLayer{FT}, t::FT) where {FT<:AbstractFloat}\nphotosystem_temperature_dependence!(psm::C3VJPModel{FT}, air::AirLayer{FT}, t::FT) where {FT<:AbstractFloat}\nphotosystem_temperature_dependence!(psm::C4VJPModel{FT}, air::AirLayer{FT}, t::FT) where {FT<:AbstractFloat}\n\nUpdate the temperature dependencies of C3 photosynthesis model, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel structure for photosynthesis model\nair AirLayer structure for environmental conditions like O₂ partial pressure\nt Target temperature in K\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis.∂R∂T","page":"Photosynthesis","title":"Photosynthesis.∂R∂T","text":"∂R∂T(leaf::Leaf{FT}) where {FT<:AbstractFloat}\n∂R∂T(leaves::Leaves1D{FT}) where {FT<:AbstractFloat}\n∂R∂T(leaves::Leaves2D{FT}) where {FT<:AbstractFloat}\n\nReturn the marginal increase in respiration rate per temperature, given\n\nleaf Leaf type leaf\nleaves Leaves1D or Leaves2D type leaf\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Electron-transport","page":"Photosynthesis","title":"Electron transport","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"photosystem_electron_transport!","category":"page"},{"location":"modules/Photosynthesis/#Photosynthesis.photosystem_electron_transport!","page":"Photosynthesis","title":"Photosynthesis.photosystem_electron_transport!","text":"photosystem_electron_transport!(psm::C3CytochromeModel{FT}, rc::CytochromeReactionCenter{FT}, ppar::FT, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nphotosystem_electron_transport!(psm::C3VJPModel{FT}, rc::VJPReactionCenter{FT}, ppar::FT, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nphotosystem_electron_transport!(psm::C4VJPModel{FT}, rc::VJPReactionCenter{FT}, ppar::FT, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate the electron transport rates, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel type C3 photosynthesis model\nrc CytochromeReactionCenter or VJPReactionCenter type photosynthesis system reaction center\nppar Absorbed photosynthetically active radiation in μmol m⁻² s⁻¹\np_i Internal CO₂ partial pressure in Pa, used to compute etoc\nβ Tuning factor to downregulate effective Vmax, Jmax, and Rd\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthetic-rates","page":"Photosynthesis","title":"Photosynthetic rates","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"rubisco_limited_rate!\nrubisco_limited_rate!(psm::Union{C3CytochromeModel{FT},C3VJPModel{FT}}, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nrubisco_limited_rate!(psm::Union{C3CytochromeModel{FT}, C3VJPModel{FT}}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nlight_limited_rate!\nlight_limited_rate!(psm::Union{C3CytochromeModel{FT}, C4VJPModel{FT}}) where {FT<:AbstractFloat}\nlight_limited_rate!(psm::C3CytochromeModel{FT}, rc::CytochromeReactionCenter{FT}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nproduct_limited_rate!\nproduct_limited_rate!(psm::Union{C3CytochromeModel{FT}, C3VJPModel{FT}}, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nproduct_limited_rate!(psm::Union{C3CytochromeModel{FT}, C3VJPModel{FT}}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}","category":"page"},{"location":"modules/Photosynthesis/#Photosynthesis.rubisco_limited_rate!","page":"Photosynthesis","title":"Photosynthesis.rubisco_limited_rate!","text":"This function supports two types of calculations:\n\nCalculate the rate from internal CO₂\nCalculate the rate from CO₂ conductance by solving a quadratic function\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis.rubisco_limited_rate!-Union{Tuple{FT}, Tuple{Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}}, FT}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.rubisco_limited_rate!","text":"rubisco_limited_rate!(psm::Union{C3CytochromeModel{FT},C3VJPModel{FT}}, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nrubisco_limited_rate!(psm::C4VJPModel{FT}, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate the RubisCO limited photosynthetic rate, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel structure for photosynthesis model\np_i Internal CO₂ partial pressure in Pa\nβ Tuning factor to downregulate effective Vmax, Jmax, and Rd\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Photosynthesis.rubisco_limited_rate!-Union{Tuple{FT}, Tuple{Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}}, ClimaCache.AirLayer{FT}, FT}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.rubisco_limited_rate!","text":"rubisco_limited_rate!(psm::Union{C3CytochromeModel{FT}, C3VJPModel{FT}}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nrubisco_limited_rate!(psm::C4VJPModel{FT}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate the RubisCO limited photosynthetic rate in conductance mode, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel structure for photosynthesis model\nair AirLayer structure for environmental conditions like O₂ partial pressure\ng_lc Leaf diffusive conductance to CO₂ in [mol m⁻² s⁻¹]\nβ Tuning factor to downregulate effective Vmax, Jmax, and Rd\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Photosynthesis.light_limited_rate!","page":"Photosynthesis","title":"Photosynthesis.light_limited_rate!","text":"This function supports two types of calculations:\n\nCalculate the rate from internal CO₂\nCalculate the rate from CO₂ conductance by solving a quadratic function\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis.light_limited_rate!-Union{Tuple{Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C4VJPModel{FT}}}, Tuple{FT}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.light_limited_rate!","text":"light_limited_rate!(psm::Union{C3CytochromeModel{FT}, C4VJPModel{FT}}) where {FT<:AbstractFloat}\nlight_limited_rate!(psm::C3VJPModel{FT}) where {FT<:AbstractFloat}\n\nUpdate the electron transport limited photosynthetic rate, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel structure for C3 photosynthesis model\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Photosynthesis.light_limited_rate!-Union{Tuple{FT}, Tuple{ClimaCache.C3CytochromeModel{FT}, ClimaCache.CytochromeReactionCenter{FT}, ClimaCache.AirLayer{FT}, FT}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.light_limited_rate!","text":"light_limited_rate!(psm::C3CytochromeModel{FT}, rc::CytochromeReactionCenter{FT}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nlight_limited_rate!(psm::C3VJPModel{FT}, rc::VJPReactionCenter{FT}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nlight_limited_rate!(psm::C4VJPModel{FT}, rc::VJPReactionCenter{FT}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate the electron transport limited photosynthetic rate in conductance mode, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel structure for C3 photosynthesis model\nrc CytochromeReactionCenter or VJPReactionCenter type photosynthesis system reaction center\nair AirLayer structure for environmental conditions like O₂ partial pressure\ng_lc Leaf diffusive conductance to CO₂ in [mol m⁻² s⁻¹]\nβ Tuning factor to downregulate effective Vmax, Jmax, and Rd\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Photosynthesis.product_limited_rate!","page":"Photosynthesis","title":"Photosynthesis.product_limited_rate!","text":"This function supports two types of calculations:\n\nCalculate the rate from internal CO₂\nCalculate the rate from CO₂ conductance by solving a quadratic function\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis.product_limited_rate!-Union{Tuple{FT}, Tuple{Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}}, FT}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.product_limited_rate!","text":"product_limited_rate!(psm::Union{C3CytochromeModel{FT}, C3VJPModel{FT}}, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nproduct_limited_rate!(psm::C4VJPModel{FT}, p_i::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate the product limited photosynthetic rate, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel structure for C3 photosynthesis model\np_i Internal CO₂ partial pressure in Pa, not used in this method\nβ Tuning factor to downregulate effective Vmax, Jmax, and Rd\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Photosynthesis.product_limited_rate!-Union{Tuple{FT}, Tuple{Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}}, ClimaCache.AirLayer{FT}, FT}} where FT<:AbstractFloat","page":"Photosynthesis","title":"Photosynthesis.product_limited_rate!","text":"product_limited_rate!(psm::Union{C3CytochromeModel{FT}, C3VJPModel{FT}}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nproduct_limited_rate!(psm::C4VJPModel{FT}, air::AirLayer{FT}, g_lc::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate the electron transport limited photosynthetic rate in conductance mode, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel structure for C3 photosynthesis model\nair AirLayer structure for environmental conditions like O₂ partial pressure, not used in this method\ng_lc Leaf diffusive conductance to CO₂ in [mol m⁻² s⁻¹], not used in this method\nβ Tuning factor to downregulate effective Vmax, Jmax, and Rd\n\n\n\n\n\n","category":"method"},{"location":"modules/Photosynthesis/#Colimitation","page":"Photosynthesis","title":"Colimitation","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"colimit_photosynthesis!\ncolimited_rate","category":"page"},{"location":"modules/Photosynthesis/#Photosynthesis.colimit_photosynthesis!","page":"Photosynthesis","title":"Photosynthesis.colimit_photosynthesis!","text":"colimit_photosynthesis!(psm::Union{C3CytochromeModel{FT}, C3VJPModel{FT}, C4VJPModel{FT}}; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nColimit the photosynthesis by rubisco-, light-, and product-limited photosynthetic rates, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel type photosynthesis model\nβ Tuning factor to downregulate effective Vmax, Jmax, and Rd (default is 1)\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Photosynthesis.colimited_rate","page":"Photosynthesis","title":"Photosynthesis.colimited_rate","text":"colimited_rate(a_1::FT, a_2::FT, colim::MinimumColimit{FT}) where {FT<:AbstractFloat}\ncolimited_rate(a_1::FT, a_2::FT, colim::QuadraticColimit{FT}) where {FT<:AbstractFloat}\ncolimited_rate(a_1::FT, a_2::FT, colim::SerialColimit{FT}) where {FT<:AbstractFloat}\ncolimited_rate(a_1::FT, a_2::FT, colim::SquareColimit{FT}) where {FT<:AbstractFloat}\n\nReturn the minimum of two rates, given\n\na_1 Rate 1\na_2 Rate 2\ncolim MinimumColimit, QuadraticColimit, or SerialColimit type struct\n\n\n\n\n\n","category":"function"},{"location":"modules/Photosynthesis/#Coefficients-and-fluorescence","page":"Photosynthesis","title":"Coefficients and fluorescence","text":"","category":"section"},{"location":"modules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"photosystem_coefficients!","category":"page"},{"location":"modules/Photosynthesis/#Photosynthesis.photosystem_coefficients!","page":"Photosynthesis","title":"Photosynthesis.photosystem_coefficients!","text":"photosystem_coefficients!(psm::C3CytochromeModel{FT}, rc::CytochromeReactionCenter{FT}, ppar::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\nphotosystem_coefficients!(psm::Union{C3VJPModel{FT}, C4VJPModel{FT}}, rc::VJPReactionCenter{FT}, ppar::FT; β::FT = FT(1)) where {FT<:AbstractFloat}\n\nUpdate the rate constants and coefficients in reaction center, given\n\npsm C3CytochromeModel, C3VJPModel, or C4VJPModel type photosynthesis model\nrc CytochromeReactionCenter or VJPReactionCenter type photosynthesis system reaction center\nppar Absorbed photosynthetically active radiation in μmol m⁻² s⁻¹\nβ Tuning factor to downregulate effective Vmax, Jmax, and Rd\n\n\n\n\n\n","category":"function"},{"location":"#CliMA-Land","page":"Home","title":"CliMA Land","text":"","category":"section"},{"location":"#Install-CliMA-Land-dev-(v0.2)","page":"Home","title":"Install CliMA Land dev (v0.2)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(PackageSpec(url=\"https://github.com/CliMA/Land.git\"))","category":"page"},{"location":"#Install-CliMA-Land-v0.1","page":"Home","title":"Install CliMA Land v0.1","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(PackageSpec(url=\"https://github.com/CliMA/Land.git\", rev=\"v0.1\"))","category":"page"},{"location":"#Install-CliMA-Land-Modules-(dev)","page":"Home","title":"Install CliMA Land Modules (dev)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg;\nPkg.add(\"EmeraldConstants\");\nPkg.add(\"WaterPhysics\");\nPkg.add(\"ClimaCache\");\nPkg.add(\"LeafOptics\");\nPkg.add(\"CanopyRadiativeTransfer\");\nPkg.add(\"Photosynthesis\");\nPkg.add(\"SoilHydraulics\");\nPkg.add(\"PlantHydraulics\");\nPkg.add(\"StomataModels\");\nPkg.add(\"SoilPlantAirContinuum\");","category":"page"}]
}
