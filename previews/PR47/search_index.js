var documenterSearchIndex = {"docs":
[{"location":"submodules/CanopyLayers/#CanopyLayers","page":"CanopyLayers","title":"CanopyLayers","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"CurrentModule = Land.CanopyLayers","category":"page"},{"location":"submodules/CanopyLayers/#Structures","page":"CanopyLayers","title":"Structures","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"Canopy4RT\nCanopyOpticals\nCanopyRads\nIncomingRadiation\nLeafBios\nLeafOpticals\nRTDimensions\nSoilOpticals\nSolarAngles\nWaveLengths","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.Canopy4RT","page":"CanopyLayers","title":"Land.CanopyLayers.Canopy4RT","text":"mutable struct Canopy4RT\n\nA canopy struct for the radiation transfer module\n\nFields\n\nnLayer\nNumber of canopy layers\nLAI\nLeaf Area Index\nΩ\nClumping factor\nclump_a\nStructure factor a\nclump_b\nStructure factor b\nleaf_width\nLeaf width\nhc\nVegetation height\nLIDFa\nLeaf Inclination\nLIDFb\nVariation in leaf inclination\nhot\nHotSpot parameter (still need to check!)\nheight\nCanopy height [m]\nz0m\nCanopy roughness [m]\nz0h\nTree roughtnes [m]\nd\nCanopy displacement height [m]\nCd\nm/sqrt(s) turbulent transfer coefficient\nlitab\nList of mean inclination angles [°]\nlitab_bnd\nList of inclination angle boundaries [°]\nlazitab\nList of mean azimuth angles [°]\ncos_ttlo\nCosine of lazitab\ncos_philo\nCosine of lazitab - raa (relative azimuth angle), update with time\ncos_ttli\nCosine of litab\nsin_ttli\nSine of litab\nvol_scatt\nCache for volome scatter function\nlidf\nInclination angles weight distribution\nxl\nList of level location (level = layer + 1)\ndx\n1/nLayer\nnAzi\nNumber of azimuth angles\nnIncl\nNumber of inclination angles\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.CanopyOpticals","page":"CanopyLayers","title":"Land.CanopyLayers.CanopyOpticals","text":"mutable struct CanopyOpticals{FT}\n\nA struct for canopy optical properties\n\nFields\n\nnAzi\nNumber of azimuth angles\nnIncl\nNumber of inclination agles\nnLayer\nNumber of canopy layers\nnWL\nNumber of wave lengths\nsdb\nSolar -> Diffuse backscatter weight\nsdf\nSolar -> Diffuse forward scatter weight\ndob\nDiffuse -> Directional backscatter weight\ndof\nDiffuse -> Directional forward scatter weight\nddb\nDiffuse -> Diffuse backscatter weight\nddf\nDiffuse -> Diffuse forward scatter weight\nks\nSolar beam extinction coefficient weight\nko\nOutgoing beam extinction coefficient weight\nbf\n?\nsob\nWeight of specular2directional backscatter coefficient\nsof\nWeight of specular2directional forward coefficient\nPs\nProbability of directly viewing a leaf in solar direction\nPo\nProbability of directly viewing a leaf in viewing direction\nPso\nBi-directional probability of directly viewing a leaf (solar->canopy->viewing)\nfs\nconversion factor fs to compute irradiance on inclined leaf\nabsfs\nabs(fs)\nabsfsfo\nabs(fs*fo)\nfsfo\nfs*fo\nfo\nconversion factor fo for angle towards observer (not sun like fs)\nabsfo\nabs(fo)\ncosΘ_l\nCosine of leaf azimuths\ncos2Θ_l\ncos of leaf azimuth sqared\nsigb\ndiffuse     backscatter scattering coefficient for diffuse  incidence\nsigf\ndiffuse     forward     scattering coefficient for diffuse  incidence\nsb\ndiffuse     backscatter scattering coefficient for specular incidence\nsf\ndiffuse     forward     scattering coefficient for specular incidence\nvb\ndirectional backscatter scattering coefficient for diffuse  incidence\nvf\ndirectional forward     scattering coefficient for diffuse  incidence\nw\nbidirectional scattering coefficent (directional-directional)\na\nattenuation\nXsd\nEffective layer transmittance (direct->diffuse)\nXdd\nEffective layer transmittance (diffuse->diffuse)\nR_sd\nEffective layer reflectance (direct->diffuse)\nR_dd\nEffective layer reflectance (diffuse->diffuse)\nEs_\nSolar direct radiation per layer)\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.CanopyRads","page":"CanopyLayers","title":"Land.CanopyLayers.CanopyRads","text":"mutable struct CanopyRads{FT}\n\nA struct for canopy radiation information\n\nFields\n\nnAzi\nNumber of azimuth angles\nnIncl\nNumber of inclination agles\nnLayer\nNumber of canopy layers\nnLevel\nNumber of canopy levels\nnWL\nNumber of wave lengths\nnWLF\nNumber of wave lengths for SIF\nintEout\nIntegrated TOC outgoing flux [W m⁻²]\nincomingPAR\nIncident spectrally integrated total PAR [mol m⁻² s⁻¹]\nincomingPAR_direct\nIncident spectrally integrated direct PAR [mol m⁻² s⁻¹]\nincomingPAR_diffuse\nIncident spectrally integrated diffuse PAR [mol m⁻² s⁻¹]\nRnSoil_diffuse\nNet radiation of shaded soil [W m⁻²]\nRnSoil_direct\nNet Short-wave radiation of sunlit soil [W m⁻²]\nRnSoil\nNet Short-wave radiation of soil (shaded + sunlit) [W m⁻²]\nRnSoilLW\nNet long-wave radiation of soil (shaded + sunlit) [W m⁻²]\nabsPAR_shade\nNet PAR of shaded leaves [mol m⁻² s⁻¹]\nabsPAR_shadeCab\nNet PAR by Cab+Car of shaded leaves [moles m⁻² s⁻¹]\nintNetSW_sunlit\nSpectrally integrated net absorbed direct radiation in each layer per leaf area [W m⁻²]\nintNetSW_shade\nSpectrally integrated net absorbed diffuse radiation in each layer per leaf area [W m⁻²]\nintNetLW_sunlit\nSpectrally integrated net absorbed direct radiation in each layer per leaf area [W m⁻²]\nintNetLW_shade\nSpectrally integrated net absorbed diffuse radiation in each layer per leaf area [W m⁻²]\nT_sun\nLeaf temperature (sunlit) [K]\nT_shade\nLeaf temperature (shaded) [K]\nϕ_shade\nFluorescence yield for shaded leaves\nH_shade\nSensible Heat flux H of shaded leaves [W m⁻²]\nLE_shade\nLatent Heat flux LE of shaded leaves [W m⁻²]\nNPQ_shade\nNPQ of shaded leaves\nGPP_shade\nGPP of shaded leaves [μmol m⁻² s⁻¹]\ngs_shade\ngs of shaded leaves [mol m⁻² s⁻¹]\nψl_shade\nLeaf water potential of shaded leaves [MPa]\nCc_shade\nCc of shaded leaves [µmol/mol]\nPi_shade\ninternal CO₂ concentration of shaded leaves [µmol/mol]\nLo\nShort-wave TOC outgoing radiance in observation direction [mW m⁻² nm⁻¹ sr⁻¹]\nEout\nShort-wave TOC outgoing radiation [mW m⁻² nm⁻¹]\nalb_obs\nShort-wave Albedo in viewing direction\nalb_direct\nShort-wave Albedo for direct incoming radiation\nalb_diffuse\nShort-wave Albedo for diffuse incoming radiation\nE_up\nUpwelling diffuse short-wave radiation within canopy [mW m⁻² nm⁻¹]\nE_down\nDownwelling diffuse short-wave radiation within canopy [mW m⁻² nm⁻¹]\nnetSW_sunlit\nNet absorbed direct radiation in each layer [mW m⁻² nm⁻¹]\nnetSW_shade\nnet absorbed diffuse radiation in each layer [mW m⁻² nm⁻¹]\nabsPAR_sun\nnet PAR of sunlit leaves [mol m⁻² s⁻¹]\nabsPAR_sunCab\nnet PAR by Cab+Car of sunlit leaves [mol m⁻² s⁻¹]\nT_sun3D\nLeaf temperature (sunlit) [K]\nϕ_sun\nFluorescence yield for sunlit leaves\nH_sun\nSensible Heat flux H of sunlit leaves [W m⁻²]\nLE_sun\nLatent Heat flux LE of sunlit leaves [W m⁻²]\nNPQ_sun\nNPQ of sunlit leaves\nGPP_sun\nGPP of sunlit leaves [μmol m⁻² s⁻¹]\ngs_sun\ngs of sunlit leaves [mol m⁻² s⁻¹]\nψl_sun\nLeaf water potential of sunlit leaves [MPa]\nCc_sun\nCc of sunlit leaves [µmol/mol]\nPi_sun\nInternal CO₂ concentration of sunlit leaves [µmol/mol]\nSIF_hemi\nHemispheric total outgoing SIF flux [mW m⁻² nm⁻¹])\nSIF_obs\nObserver-direction outgoing SIF radiance (mW m⁻² nm⁻¹ sr⁻¹))\nSIF_obs_sunlit\nObserver-direction outgoing SIF radiance, sunlit leaves (mW m⁻² nm⁻¹ sr⁻¹)\nSIF_obs_shaded\nObserver-direction outgoing SIF radiance, shaded leaves (mW m⁻² nm⁻¹ sr⁻¹)\nSIF_obs_scattered\nObserver-direction outgoing SIF radiance, scattered (mW m⁻² nm⁻¹ sr⁻¹)\nSIF_obs_soil\nObserver-direction outgoing SIF radiance, soil-reflected (mW m⁻² nm⁻¹ sr⁻¹)\nSIF_sum\nTotal SIF sum of layer sources  [mW m⁻² nm⁻¹])\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.IncomingRadiation","page":"CanopyLayers","title":"Land.CanopyLayers.IncomingRadiation","text":"mutable struct IncomingRadiation{FT}\n\nIncoming radiation information\n\nFields\n\nE_direct\nDirect incoming radiation [mW m⁻² nm⁻¹]\nE_diffuse\nDiffuse incoming radiation [mW m⁻² nm⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.LeafBios","page":"CanopyLayers","title":"Land.CanopyLayers.LeafBios","text":"mutable struct LeafBios{FT}\n\nA struct of leaf biological parameters\n\nFields\n\nnWL\nNumber of wave length\nnWLE\nNumber of wave length for excitation\nnWLF\nNumber of wave length for SIF\nN\nLeaf structure parameter\nCab\nChlorophyll a+b content [µg cm⁻²]\nCar\nCarotenoid content [µg cm⁻²]\nAnt\nAnthocynanin content [µg cm⁻²]\nCs\nSenescent material fraction\nCw\nEquivalent water thickness [cm]\nCm\nDry matter content (dry leaf mass per unit area) [g cm⁻²]\nCx\nFractionation between Zeaxanthin and Violaxanthin in Car (1=all Zeaxanthin) (-)\nfqe\nLeaf fluorescence efficiency (Fo standard)\nρ_LW\nBroadband thermal reflectance (-)\nτ_LW\nBroadband thermal transmission (-)\nρ_SW\nShortwave leaf reflectance\nτ_SW\nShortwave leaf transmission\nkChlrel\nRelative absorbtion by Chlorophyll+Car\nkChlrel_old\nRelative absorbtion by Chlorophyll\nMb\nFluorescence excitation matrix backwards\nMf\nFluorescence excitation matrix forwards\nndub\nDoubling adding layers\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.LeafOpticals","page":"CanopyLayers","title":"Land.CanopyLayers.LeafOpticals","text":"mutable struct LeafOpticals{FT}\n\nStruct for leaf optical properties\n\nFields\n\nnr\nKm\nKab\nKant\nKcar\nKw\nKBrown\nphi\nKcaV\nKcaZ\nlambda\nWave length [nm], same as WL in WaveLengths`\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.RTDimensions","page":"CanopyLayers","title":"Land.CanopyLayers.RTDimensions","text":"mutable struct RTDimensions\n\nStruct that stores matrix dimension information\n\nFields\n\nnAzi\nNumber of azimuth angles\nnIncl\nNumber of inclination agles\nnLayer\nNumber of canopy layers\nnLevel\nNumber of canopy layer boundaries nLayer+1\nnPAR\nNumber of PAR wave lengths\nnWL\nNumber of wave lengths\nnWLE\nNumber of wave length for excitation\nnWLF\nNumber of wave lengths for SIF\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SoilOpticals","page":"CanopyLayers","title":"Land.CanopyLayers.SoilOpticals","text":"mutable struct SoilOpticals{FT}\n\nA struct of soil optical parameters\n\nFields\n\nalbedo_SW\nShortwave albedo\nalbedo_SW_SIF\nShortwave albedo for SIF\nemsvty_SW\nShortwave Emissivity\nalbedo_LW\nLongwave albedo\nsoil_skinT\nSoil surface temperature [K]\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SolarAngles","page":"CanopyLayers","title":"Land.CanopyLayers.SolarAngles","text":"struct SolarAngles{FT}\n\nStruct for observation and solar angles\n\nFields\n\nhza\nHill zenith angle [°], hill slope angle\nhaa\nHill azimuth angle [°], 0 for North, 180 for south\nsaa\nSolar azimuth angle [°], a function of time\nsza\nSolar zenith angle [°], a function of lat and time\nvaa\nViewing azimuth angle [°]\nvza\nViewing zenith angle [°]\nraa\nRelative azimuth angle [°], difference between saa and vaa\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.WaveLengths","page":"CanopyLayers","title":"Land.CanopyLayers.WaveLengths","text":"mutable struct WaveLengths{FT}\n\nStruct for pre-set wave length parameters\n\nFields\n\nminwlPAR\nMinimal WL for PAR [nm]\nmaxwlPAR\nMaximal WL for PAR [nm]\nminwle\nMinimal WL for SIF excitation [nm]\nmaxwle\nMaximal WL for SIF excitation [nm]\nminwlf\nMinimal WL for SIF emission/fluorescence [nm]\nmaxwlf\nMaximal WL for SIF emission/fluorescence [nm]\nsWL\nStandard wave length [nm]\ndWL\nDifferential wavelength\noptis\nLeaf optical parameter set\nWL\nWave length [nm]\niWLE\nIndex of WLE in WL\niWLF\nIndex of WLF in WL\niPAR\nindex of wlPAR in WL\nWLE\nexcitation wave length [nm]\nWLF\nFluorescence wave length [nm]\nWL_iPAR\nWave length for PAR\ndWL_iPAR\nDifferential wave length for PAR\ndWL_iWLE\nDifferential wave length for iWLE\nnPAR\nLength of WL_iPAR\nnWL\nLength of WL\nnWLE\nlength of WLE\nnWLF\nlength of WLF\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Caches","page":"CanopyLayers","title":"Caches","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"CFCache\ncreate_cf_cache\nCGCache\ncreate_cg_cache\nSFCache\ncreate_sf_cache\nSWCache\ncreate_sw_cache\nRTCache\ncreate_rt_cache","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.CFCache","page":"CanopyLayers","title":"Land.CanopyLayers.CFCache","text":"mutable struct CFCache{FT}\n\nCache to speed canopy_fluxes! by pre-allocating arrays\n\nFields\n\nabs_wave\nabsorbed energy from wave lengths\nabsfs_lidf\nabsfs' * lidf [nAzi]\nE_all\nwave length energy [same as dWL]\nE_iPAR\nwave length energy [same as iPAR]\nlPs\nlPs [nLayer]\nkChlrel\nkChlrel [same as iPAR]\nPAR_diff\ndiffusive PAR [same as iPAR]\nPAR_diffCab\ndiffusive PAR for photosynthesis [same as iPAR]\nPAR_dir\ndirect PAR [same as iPAR]\nPAR_dirCab\ndiffusive PAR for photosynthesis [same as iPAR]\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_cf_cache","page":"CanopyLayers","title":"Land.CanopyLayers.create_cf_cache","text":"create_cf_cache(FT, rt_dim::RTDimensions)\n\nCreate a CFCache type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.CGCache","page":"CanopyLayers","title":"Land.CanopyLayers.CGCache","text":"mutable struct CGCache{FT}\n\nCache to speed canopy_geometry! by pre-allocating arrays\n\nFields\n\n_Co\ncos_ttli .* cos(vza) dim: nIncl\n_Cs\ncos_ttli .* cos(sza) dim: nIncl\n_So\nsin_ttli .* sin(vza) dim: nIncl\n_Ss\nsin_ttli .* sin(sza) dim: nIncl\n_1s\nmaxtrix filled with 1 dim: (1, nAzi)\n_2d\n2D array to speed up _cds and _cdo dim: (nIncl, nAzi)\n_cdo\nCo * _1s .+ _So * cosphilo' dim: (nIncl, nAzi)\n_cds\nCs * _1s .+ _Ss * costtlo' dim: (nIncl, nAzi)\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_cg_cache","page":"CanopyLayers","title":"Land.CanopyLayers.create_cg_cache","text":"create_cg_cache(FT, rt_dim::RTDimensions)\n\nCreate a CGCache type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SFCache","page":"CanopyLayers","title":"Land.CanopyLayers.SFCache","text":"mutable struct SFCache{FT}\n\nCache to speed SIF_fluxes! by pre-allocating arrays\n\nFields\n\nM⁻_sun\nM⁺_sun\nwfEs\nsfEs\nsbEs\nM⁺⁻\nM⁺⁺\nM⁻⁺\nM⁻⁻\nsun_dwl_iWlE\ntmp_dwl_iWlE\nϕ_cosΘ_lidf\nvfEplu_shade\nvbEmin_shade\nvfEplu_sun\nvbEmin_sun\nsigfEmin_shade\nsigbEmin_shade\nsigfEmin_sun\nsigbEmin_sun\nsigfEplu_shade\nsigbEplu_shade\nsigfEplu_sun\nsigbEplu_sun\nzeroB\ntmp_1d_nWlF\ntmp_1d_nLayer\ndnorm\nτ_dd\ntransmission of diffusive light?\nρ_dd\nextinction of diffuse light?\nXdd\nRdd\nY\nU\nS⁻\nS⁺\npiLs\npiLd\nFsmin\nFsplu\nFdmin\nFdplu\nFemo\nM⁺\nM⁻\nϕ_cosΘ\nF⁻\nF⁺\nnet_diffuse\ntmp_2d_nWlF_nLayer\ntmp_2d_nWlF_nLayer_2\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_sf_cache","page":"CanopyLayers","title":"Land.CanopyLayers.create_sf_cache","text":"create_sf_cache(FT, rt_dim::RTDimensions)\n\nCreate a SFCache type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SWCache","page":"CanopyLayers","title":"Land.CanopyLayers.SWCache","text":"mutable struct SWCache{FT}\n\nCache to speed short_wave! by pre-allocating arrays\n\nFields\n\ndnorm\ndnorm?\npiLo\npi * Lo\npiLoc\npi * Lo from canopy\npiLos\npi * Lo from soil\npiLoc2\npi * Lo from canopy 2D matrix\nρ_dd\nextinction of diffuse light?\nρ_sd\nextinction of direct light?\nτ_dd\ntransmission of diffusive light?\nτ_sd\ntransmission of direct light?\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_sw_cache","page":"CanopyLayers","title":"Land.CanopyLayers.create_sw_cache","text":"create_sw_cache(FT, rt_dim::RTDimensions)\n\nCreate a CGCache type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.RTCache","page":"CanopyLayers","title":"Land.CanopyLayers.RTCache","text":"mutable struct RTCache{FT}\n\nCollection of caches to speed up RT module\n\nFields\n\ncf_con\nCFCache type cache\ncg_con\nCGCache type cache\nsf_con\nSFCache type cache\nsw_con\nSWCache type cache\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_rt_cache","page":"CanopyLayers","title":"Land.CanopyLayers.create_rt_cache","text":"create_rt_cache(FT, rt_dim::RTDimensions)\n\nCreate an RTCache, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Initialization-of-Structures","page":"CanopyLayers","title":"Initialization of Structures","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"create_canopy_opticals\ncreate_canopy_rads\ncreate_canopy_rt\ncreate_incoming_radiation\ncreate_leaf_bios\ncreate_leaf_opticals\ncreate_rt_dims\ncreate_soil_opticals\ncreate_wave_length\ninitialize_rt_module","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_canopy_opticals","page":"CanopyLayers","title":"Land.CanopyLayers.create_canopy_opticals","text":"create_canopy_opticals( FT, rt_dim::RTDimensions)\n\nCreate a CanopyOpticals struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_canopy_rads","page":"CanopyLayers","title":"Land.CanopyLayers.create_canopy_rads","text":"create_canopy_rads(FT, rt_dim::RTDimensions)\n\nCreate a CanopyRads struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_canopy_rt","page":"CanopyLayers","title":"Land.CanopyLayers.create_canopy_rt","text":"create_canopy_rt(FT; nLayer::Int = 20, LAI::Number = FT(3))\n\nCreate Canopy4RT, given\n\nFT Floating number type\nnLayer Number of canopy layers\nLAI Leaf area index\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_incoming_radiation","page":"CanopyLayers","title":"Land.CanopyLayers.create_incoming_radiation","text":"create_incoming_radiation(\n            wls::WaveLengths{FT},\n            wlfn::String = FILE_SUN\n) where {FT<:AbstractFloat}\n\nCreate an AbstractIncomingRadiation struct, given\n\nwls WaveLengths type struct\nwlfn File that saves incoming wave information\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_leaf_bios","page":"CanopyLayers","title":"Land.CanopyLayers.create_leaf_bios","text":"create_leaf_bios(FT, rt_dim::RTDimensions)\n\nCreate a LeafBios type struct, given\n\nFT Floating number type\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_leaf_opticals","page":"CanopyLayers","title":"Land.CanopyLayers.create_leaf_opticals","text":"create_leaf_opticals(\n            sWL::Array{FT,1},\n            file::String = OPTI_2021\n) where {FT<:AbstractFloat}\n\nCreate an AbstractLeafOptiPara struct, given\n\nsWL Standard wave length\nopfn File that saves optical parameters\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_rt_dims","page":"CanopyLayers","title":"Land.CanopyLayers.create_rt_dims","text":"create_rt_dims(\n            can::Canopy4RT{FT},\n            wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nCreate RTDimensions, given\n\ncan Canopy4RT type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_soil_opticals","page":"CanopyLayers","title":"Land.CanopyLayers.create_soil_opticals","text":"create_soil_opticals(wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nCreate SoilOpticals struct, given\n\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.create_wave_length","page":"CanopyLayers","title":"Land.CanopyLayers.create_wave_length","text":"create_wave_length(\n            FT,\n            sWLs = [collect(400.0:10.0: 650.1);\n                    collect(655.0: 5.0: 770.1);\n                    collect(780.0:25.0:2400.1)])\n\nCreate WaveLengths type struct, given\n\nFT Floating number type\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.initialize_rt_module","page":"CanopyLayers","title":"Land.CanopyLayers.initialize_rt_module","text":"initialize_rt_module(FT; nLayer::Int = 20, LAI::Number = FT(3))\n\nInitialize the RT module and return the sturctures, given\n\nFT Floating number type\nnLayer Number of canopy layers\nLAI Leaf area index\n\nThis function initializes and returns\n\nangles SolarAngles\ncan Canopy4RT\ncan_opt CanopyOpticals\ncan_rad CanopyRads\nin_rad IncomingRadiation\nleaves Array{LeafBios,1}\nrt_con RTCache\nrt_dim RTDimensions\nsoil SoilOpticals\nwls WaveLengths\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Big-Leaf-Model","page":"CanopyLayers","title":"Big Leaf Model","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"big_leaf_partition","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.big_leaf_partition","page":"CanopyLayers","title":"Land.CanopyLayers.big_leaf_partition","text":"big_leaf_partition(\n            lai::FT,\n            zenith::FT,\n            r_all::FT,\n            r_dir::FT = FT(0.8)\n) where {FT<:AbstractFloat}\n\nPartition the big-leaf canopy into sunlit and shaded layers, given\n\nlai Leaf area index\nzenith Zenith angle in degree\nr_all Total radiation in [W m⁻²]\nr_dir Direct radiation partition in r_all\n\nThe function returns\n\nratio ratio of sunlit leaves out of all leaves\nq_slm Mean sunlit layer PAR\nq_shm Mean shaded layer PAR\ne_sl Mean sunlit layer absorbed total energy\ne_sh Mean shaded layer absorbed total energy\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#SCOPE-Model","page":"CanopyLayers","title":"SCOPE Model","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"canopy_fluxes!\ncanopy_geometry!\ncanopy_matrices!\nclumping_factor!\ndiffusive_S\ndiffusive_S!\nfluspect!\nshort_wave!\nSIF_fluxes!\nthermal_fluxes!","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.canopy_fluxes!","page":"CanopyLayers","title":"Land.CanopyLayers.canopy_fluxes!","text":"canopy_fluxes!(\n            can::Canopy4RT{FT},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            in_rad::IncomingRadiation{FT},\n            soil::SoilOpticals{FT},\n            leaves::Array{LeafBios{FT},1},\n            wls::WaveLengths{FT},\n            rt_con::RTCache{FT}\n) where {FT<:AbstractFloat}\n\nComputes a variety of integrated fluxes from the spectrally resolved     computations in the short-wave Canopy RT (e.g. absorbed soil radiation,     absorbed direct and diffuse PAR by layer (and angles for direct), net     direct and diffuse energy balance per layer), given\n\ncan Canopy4RT type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\nin_rad IncomingRadiation type struct\nsoil SoilOpticals type struct\nleaves Array of LeafBios type struct\nwls WaveLengths type struct\nrt_con RTCache type cache\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.canopy_geometry!","page":"CanopyLayers","title":"Land.CanopyLayers.canopy_geometry!","text":"canopy_geometry!(\n            can::Canopy4RT{FT},\n            angles::SolarAngles{FT},\n            can_opt::CanopyOpticals{FT},\n            rt_con::RTCache{FT}\n) where {FT<:AbstractFloat}\n\nComputes canopy optical properties (extinction coefficients for direct and     diffuse light) based on the SAIL model. Most important input parameters are     leaf inclination and azimuth distribution functions and sun-sensor     geometry. Canopy clumping Ω is implemented as in Pinty et al (2015), given\n\ncan Canopy4RT type struct\nangles SolarAngles type struct\ncan_opt CanopyOpticals type struct\nrt_con RTCache type cache\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.canopy_matrices!","page":"CanopyLayers","title":"Land.CanopyLayers.canopy_matrices!","text":"canopy_matrices!(\n            leaves::Array{LeafBios{FT},1},\n            can_opt::CanopyOpticals{FT}\n) where {FT<:AbstractFloat}\n\nCompute scattering coefficient matrices for direct and diffuse light given     geometry dependent overall extinction coefficients and pigment dependent     leaf reflectance and transmission (computed via fluspect). This function     has to be called before short_wave! can be used.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.clumping_factor!","page":"CanopyLayers","title":"Land.CanopyLayers.clumping_factor!","text":"clumping_factor!(\n            can::Canopy4RT{FT},\n            angles::SolarAngles{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the clumping factor, given\n\ncan Canopy4RT type struct\nangles SolarAngles type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.diffusive_S","page":"CanopyLayers","title":"Land.CanopyLayers.diffusive_S","text":"diffusive_S(τ_dd::Array{FT},\n            ρ_dd::Array{FT},\n            S⁻::Array{FT},\n            S⁺::Array{FT},\n            boundary_top::Array{FT},\n            boundary_bottom::Array{FT},\n            rsoil::Array{FT}\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport (used for thermal and SIF) given:\n\nτ_dd A 2D Array with layer reflectances\nρ_dd A 2D Array with layer transmissions\nS⁻ A 2D Array with layer source terms in the downwelling direction\nS⁺ A 2D Array with layer source terms in the upwelling direction\nboundary_top A 1D array with downwelling radiation at the top (top of canopy)\nboundary_bottom A 1D array with upwnwelling radiation at the bottom (soil)\nrsoil A 1D array with soil reflectance\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.diffusive_S!","page":"CanopyLayers","title":"Land.CanopyLayers.diffusive_S!","text":"diffusive_S!(\n            sf_con::SFCache{FT},\n            soil::SoilOpticals{FT},\n            rt_dim::RTDimensions\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport (used for thermal and SIF),     given\n\nsf_con SFCache type cache\nsoil SoilOpticals type struct\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.fluspect!","page":"CanopyLayers","title":"Land.CanopyLayers.fluspect!","text":"fluspect!(leaf::LeafBios{FT},\n          wls::WaveLengths{FT};\n          APAR_car::Bool = true\n) where {FT<:AbstractFloat}\n\nComputes leaf optical properties (reflectance and transittance) based on     pigment concentrations. Also computes Fluorescence excitation matrices.     Mostly based on PROSPECT-D for leaf reflectance/transmission and FluSpec     for fluorescence.\n\nleaf LeafBios type struct\nwls WaveLengths type struct\nAPAR_car If true, include Car absorption in APAR for photosynthesis\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.short_wave!","page":"CanopyLayers","title":"Land.CanopyLayers.short_wave!","text":"short_wave!(can::Canopy4RT{FT},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            in_rad::IncomingRadiation{FT},\n            soil::SoilOpticals{FT},\n            rt_con::RTCache{FT}\n) where {FT<:AbstractFloat}\n\nSimulate the short wave radiation through the canopy, given\n\ncan Canopy4RT type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\nin_rad IncomingRadiation type struct\nsoil SoilOpticals type struct\nrt_con RTCache type cache\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_fluxes!","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_fluxes!","text":"SIF_fluxes!(leaves::Array{LeafBios{FT},1},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            can::Canopy4RT{FT},\n            soil::SoilOpticals{FT},\n            wls::WaveLengths{FT},\n            rt_con::RTCache{FT},\n            rt_dim::RTDimensions\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport for SIF radiation (calls     [diffusive_S!] internally). Layer reflectance and transmission is     computed from SW optical properties, layer sources from absorbed light and     SIF efficiencies. Boundary conditions are zero SIF incoming from atmosphere     or soil.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\ncan Canopy4RT type struct\nsoil SoilOpticals type struct\nwls WaveLengths type struct\nrt_con RTCache type cache\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.thermal_fluxes!","page":"CanopyLayers","title":"Land.CanopyLayers.thermal_fluxes!","text":"thermal_fluxes!(\n            leaves::Array{LeafBios{FT},1},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            can::Canopy4RT{FT},\n            soil::SoilOpticals{FT},\n            incLW::Array{FT},\n            wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport for thermal radiation (calls     [diffusive_S] internally). Layer reflectance and transmission is computed     from LW optical properties, layer sources from temperature and Planck law,     boundary conditions from the atmosphere and soil emissivity and     temperature. Currently only uses Stefan Boltzmann law to compute spectrally     integrated LW but can be easily adjusted to be spectrally resolved.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\ncan Canopy4RT type struct\nsoil SoilOpticals type struct\nincLW A 1D array with incoming long-wave radiation\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Indicies","page":"CanopyLayers","title":"Indicies","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"BLUE\nEVI\nEVI2\nLSWI\nNDVI\nNIR\nNIRv\nRED\nREF_WL\nSIF_740\nSIF_757\nSIF_771\nSIF_WL\nSWIR","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.BLUE","page":"CanopyLayers","title":"Land.CanopyLayers.BLUE","text":"BLUE(can_rad::CanopyRads{FT},\n     wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the BLUE @ 469 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.EVI","page":"CanopyLayers","title":"Land.CanopyLayers.EVI","text":"EVI(can_rad::CanopyRads{FT},\n    wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the EVI, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.EVI2","page":"CanopyLayers","title":"Land.CanopyLayers.EVI2","text":"EVI2(can_rad::CanopyRads{FT},\n    wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the EVI2, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.LSWI","page":"CanopyLayers","title":"Land.CanopyLayers.LSWI","text":"LSWI(can_rad::CanopyRads{FT},\n     wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the LSWI, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.NDVI","page":"CanopyLayers","title":"Land.CanopyLayers.NDVI","text":"NDVI(can_rad::CanopyRads{FT},\n     wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the NDVI, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.NIR","page":"CanopyLayers","title":"Land.CanopyLayers.NIR","text":"NIR(can_rad::CanopyRads{FT},\n    wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the NIR @ 858.5 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.NIRv","page":"CanopyLayers","title":"Land.CanopyLayers.NIRv","text":"NIRv(can_rad::CanopyRads{FT},\n     wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the NIRv, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.RED","page":"CanopyLayers","title":"Land.CanopyLayers.RED","text":"RED(can_rad::CanopyRads{FT},\n    wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the RED @ 645 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.REF_WL","page":"CanopyLayers","title":"Land.CanopyLayers.REF_WL","text":"REF_WL(wls::WaveLengths{FT},\n       can_rad::CanopyRads{FT}\n       wls::WaveLengths{FT},\n       twl::FT\n) where {FT<:AbstractFloat}\n\nReturn the Reflectance, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\ntwl Target wave length in nm\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_740","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_740","text":"SIF_740(can_rad::CanopyRads{FT},\n        wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the SIF @ 740 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_757","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_757","text":"SIF_757(can_rad::CanopyRads{FT},\n        wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the SIF @ 757 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_771","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_771","text":"SIF_771(can_rad::CanopyRads{FT},\n        wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the SIF @ 771 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_WL","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_WL","text":"SIF_WL(wls::WaveLengths{FT},\n       can_rad::CanopyRads{FT}\n       wls::WaveLengths{FT},\n       twl::FT\n) where {FT<:AbstractFloat}\n\nReturn the SIF, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\ntwl Target SIF wave length in nm\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SWIR","page":"CanopyLayers","title":"Land.CanopyLayers.SWIR","text":"SWIR(can_rad::CanopyRads{FT},\n    wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nReturn the SWIR @ 2130 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Utils","page":"CanopyLayers","title":"Utils","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"calctav\ndcum\ndladgen\ne2phot\ne2phot!\nexpint\npsofunction\nvolscatt!","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.calctav","page":"CanopyLayers","title":"Land.CanopyLayers.calctav","text":"calctav(α::FT, nr::FT) where {FT<:AbstractFloat}\n\nComputes transmission of isotropic radiation across an interface between two     dielectrics (Stern F., 1964; Allen W.A., 1973)). From calctav.m in     PROSPECT-D\n\nα angle of incidence\nnr Index of refraction\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.dcum","page":"CanopyLayers","title":"Land.CanopyLayers.dcum","text":"dcum(a::FT, b::FT, t::FT) where {FT<:AbstractFloat}\n\nTODO Add function description\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.dladgen","page":"CanopyLayers","title":"Land.CanopyLayers.dladgen","text":"dladgen(a::FT, b::FT, litab_bnd::Array{FT,2}) where {FT<:AbstractFloat}\n\nTODO Calculate the freqency of WHAT?\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.e2phot","page":"CanopyLayers","title":"Land.CanopyLayers.e2phot","text":"e2phot(λ::Array{FT}, E::Array{FT}) where {FT<:AbstractFloat}\n\nCalculates the number of moles of photons, given\n\nλ An array of wave length in [nm], converted to [m] by _FAC\nE Joules of energy\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.e2phot!","page":"CanopyLayers","title":"Land.CanopyLayers.e2phot!","text":"e2phot!(\n            λ::Array{FT,1},\n            E::Array{FT,1},\n            cache::Array{FT,1}\n) where {FT<:AbstractFloat}\n\nCalculates the number of moles of photons, given\n\nλ An array of wave length in [nm], converted to [m] by _FAC\nE Joules of energy\ncache Cache to avoid memory allocations\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.expint","page":"CanopyLayers","title":"Land.CanopyLayers.expint","text":"expint(x::FT) where {FT<:AbstractFloat}\n\nTODO add function description\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.psofunction","page":"CanopyLayers","title":"Land.CanopyLayers.psofunction","text":"psofunction(K::FT,\n            k::FT,\n            Ω::FT,\n            LAI::FT,\n            q::FT,\n            dso::FT,\n            xl::FT\n) where {FT<:AbstractFloat}\n\nTODO explain the variables\n\nReturn the probability of observing a sunlit leaf at depth xl (pso, see eq     31 in vdT 2009), given\n\nxl Leaf depth in the canopy\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.volscatt!","page":"CanopyLayers","title":"Land.CanopyLayers.volscatt!","text":"volscatt!(cache::Array{FT,1},\n          sza::FT,\n          vza::FT,\n          raa::FT,\n          ttl::FT\n) where {FT<:AbstractFloat}\n\nCalculate interception parameters (chi_s and chi_s) and leaf reflectance     multiplier (frho) and transmittance multiplier (ftau), given\n\ncache Array cache for results\nsza Solar zenith angle\nvza Viewing zenith angle\nraa Relative azimuth angle\nttl Leaf inclination angle\n\n\n\n\n\n","category":"function"},{"location":"generated/CanopyLayers/bigleaf/","page":"Big Leaf Model","title":"Big Leaf Model","text":"EditURL = \"https://github.com/CliMA/Land/blob/master/docs/src/examples/CanopyLayers/bigleaf.jl\"","category":"page"},{"location":"generated/CanopyLayers/bigleaf/#Big-Leaf-Model","page":"Big Leaf Model","title":"Big Leaf Model","text":"","category":"section"},{"location":"generated/CanopyLayers/bigleaf/","page":"Big Leaf Model","title":"Big Leaf Model","text":"# load packages\nusing Land.CanopyLayers\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/CanopyLayers/bigleaf/#Sunlit-and-shaded-layers","page":"Big Leaf Model","title":"Sunlit and shaded layers","text":"","category":"section"},{"location":"generated/CanopyLayers/bigleaf/#vs.-leaf-area-index","page":"Big Leaf Model","title":"vs. leaf area index","text":"","category":"section"},{"location":"generated/CanopyLayers/bigleaf/","page":"Big Leaf Model","title":"Big Leaf Model","text":"lais   = collect(FT, 0.1:0.1:5.0);\nlai_sl = similar(lais);\npar_sl = similar(lais); par_sh = similar(lais);\nrad_sl = similar(lais); rad_sh = similar(lais);\nfor i in eachindex(lais)\n    lai_sl[i], par_sl[i], par_sh[i], rad_sl[i], rad_sh[i] =\n        big_leaf_partition(lais[i], FT(30), FT(800));\nend\n\n_fig,_axes = create_canvas(\"vs LAI\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(lais, lai_sl, \"k-\");\n_ax2.plot(lais, par_sl, \"k-\", label=\"Sunlit\");\n_ax2.plot(lais, par_sh, \"k:\", label=\"Shaded\");\n_ax3.plot(lais, rad_sl, \"k-\", label=\"Sunlit\");\n_ax3.plot(lais, rad_sh, \"k:\", label=\"Shaded\");\n_ax2.legend(loc=\"upper right\");\n_ax3.legend(loc=\"upper right\");\nset_xlabels!(_axes, [\"Leaf area index\" for i in 1:3]);\nset_ylabels!(_axes, [\"Sunlit fraction\", \"PAR (μmol m⁻² s⁻¹)\", \"Rabs (W m⁻²)\"]);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/CanopyLayers/bigleaf/#vs.-zenith-angle","page":"Big Leaf Model","title":"vs. zenith angle","text":"","category":"section"},{"location":"generated/CanopyLayers/bigleaf/","page":"Big Leaf Model","title":"Big Leaf Model","text":"angles = collect(FT, 5:5:75);\nlai_sl = similar(angles);\npar_sl = similar(angles); par_sh = similar(angles);\nrad_sl = similar(angles); rad_sh = similar(angles);\nfor i in eachindex(angles)\n    lai_sl[i], par_sl[i], par_sh[i], rad_sl[i], rad_sh[i] =\n        big_leaf_partition(FT(3), angles[i], FT(800));\nend\n\n_fig,_axes = create_canvas(\"vs Zenith angle\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(angles, lai_sl, \"k-\");\n_ax2.plot(angles, par_sl, \"k-\", label=\"Sunlit\");\n_ax2.plot(angles, par_sh, \"k:\", label=\"Shaded\");\n_ax3.plot(angles, rad_sl, \"k-\", label=\"Sunlit\");\n_ax3.plot(angles, rad_sh, \"k:\", label=\"Shaded\");\n_ax2.legend(loc=\"upper left\");\n_ax3.legend(loc=\"upper left\");\nset_xlabels!(_axes, [\"Zenith angle (°)\" for i in 1:3]);\nset_ylabels!(_axes, [\"Sunlit fraction\", \"PAR (μmol m⁻² s⁻¹)\", \"Rabs (W m⁻²)\"]);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/CanopyLayers/bigleaf/#vs.-total-radiation","page":"Big Leaf Model","title":"vs. total radiation","text":"","category":"section"},{"location":"generated/CanopyLayers/bigleaf/","page":"Big Leaf Model","title":"Big Leaf Model","text":"rads   = collect(FT, 50:50:1000);\nlai_sl = similar(rads);\npar_sl = similar(rads); par_sh = similar(rads);\nrad_sl = similar(rads); rad_sh = similar(rads);\nfor i in eachindex(rads)\n    lai_sl[i], par_sl[i], par_sh[i], rad_sl[i], rad_sh[i] =\n        big_leaf_partition(FT(3), FT(30), rads[i]);\nend\n\n_fig,_axes = create_canvas(\"vs Total radiation\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(rads, lai_sl, \"k-\");\n_ax2.plot(rads, par_sl, \"k-\", label=\"Sunlit\");\n_ax2.plot(rads, par_sh, \"k:\", label=\"Shaded\");\n_ax3.plot(rads, rad_sl, \"k-\", label=\"Sunlit\");\n_ax3.plot(rads, rad_sh, \"k:\", label=\"Shaded\");\n_ax2.legend(loc=\"upper left\");\n_ax3.legend(loc=\"upper left\");\nset_xlabels!(_axes, [\"Total radiation (W m⁻²)\" for i in 1:3]);\nset_ylabels!(_axes, [\"Sunlit fraction\", \"PAR (μmol m⁻² s⁻¹)\", \"Rabs (W m⁻²)\"]);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/CanopyLayers/bigleaf/#vs.-direct-light-fraction","page":"Big Leaf Model","title":"vs. direct light fraction","text":"","category":"section"},{"location":"generated/CanopyLayers/bigleaf/","page":"Big Leaf Model","title":"Big Leaf Model","text":"dirs   = collect(FT, 0.2:0.05:0.8);\nlai_sl = similar(dirs);\npar_sl = similar(dirs); par_sh = similar(dirs);\nrad_sl = similar(dirs); rad_sh = similar(dirs);\nfor i in eachindex(dirs)\n    lai_sl[i], par_sl[i], par_sh[i], rad_sl[i], rad_sh[i] =\n        big_leaf_partition(FT(3), FT(30), FT(800), dirs[i]);\nend\n\n_fig,_axes = create_canvas(\"vs Direct light fraction\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(dirs, lai_sl, \"k-\");\n_ax2.plot(dirs, par_sl, \"k-\", label=\"Sunlit\");\n_ax2.plot(dirs, par_sh, \"k:\", label=\"Shaded\");\n_ax3.plot(dirs, rad_sl, \"k-\", label=\"Sunlit\");\n_ax3.plot(dirs, rad_sh, \"k:\", label=\"Shaded\");\n_ax2.legend(loc=\"upper left\");\n_ax3.legend(loc=\"upper left\");\nset_xlabels!(_axes, [\"Direct light fraction\" for i in 1:3]);\nset_ylabels!(_axes, [\"Sunlit fraction\", \"PAR (μmol m⁻² s⁻¹)\", \"Rabs (W m⁻²)\"]);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/CanopyLayers/bigleaf/","page":"Big Leaf Model","title":"Big Leaf Model","text":"","category":"page"},{"location":"generated/CanopyLayers/bigleaf/","page":"Big Leaf Model","title":"Big Leaf Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"tips/#Git-and-Julia-Tips-for-CliMA.Land","page":"Tips","title":"Git and Julia Tips for CliMA.Land","text":"","category":"section"},{"location":"tips/#Instantiate-the-project","page":"Tips","title":"Instantiate the project","text":"","category":"section"},{"location":"tips/","page":"Tips","title":"Tips","text":"The Land project\ncd .../Land to the home directory of the project\njulia --project\nusing Pkg\nPkg.instantiate()\nDelete the file Manifest.toml when encountering errors\nRedo Pkg.instantiate()\nThe docs/ project\ncd .../Land/docs\njulia --project\nusing Pkg\nPkg.instantiate()\nDelete the file Manifest.toml when encountering erros\nDelete the line Land=\"*\" in the Project.toml\nType ] in the julia REPL to enter the pkg environment\ndev .. or add .. to add the Land project\nRedo Pkg.instantiate()","category":"page"},{"location":"tips/#Run-local-tests-before-merging-into-main","page":"Tips","title":"Run local tests before merging into main","text":"","category":"section"},{"location":"tips/","page":"Tips","title":"Tips","text":"Optional: load the Land project\ncd .../Land to the home directory of the project\njulia --project\nusing Land to make sure the project can be loaded\nOptional: disable the example to save some time\nchange generate_examples = true to generate_examples = false in file docs/examples.jl\nchange the line back to generate_examples = true before commiting the changes\nOptional: initialize the project\ncd .../Land to the home directory of the project\njulia --project -e \"using Pkg; Pkg.instantiate(); Pkg.build(); Pkg.precompile();\"\njulia --project=docs/ -e \"using Pkg; Pkg.instantiate(); Pkg.build(); Pkg.precompile();\"\nTest the documentation project\njulia --project=docs/ docs/make.jl\nFix errors and warnings associated with Land project\nTest the Land project\njulia --project -e \"using Pkg; Pkg.test();\"\nResolve failed tests","category":"page"},{"location":"tips/#Rebase-the-commits-before-merging-into-main","page":"Tips","title":"Rebase the commits before merging into main","text":"","category":"section"},{"location":"tips/","page":"Tips","title":"Tips","text":"Switch to the feature branch and make sure you have a clean workspace\ngit checkout FeatureBranch\ngit status to confirm zero uncommitted changes\nBackup current branch to avoid unexpected errors\ngit checkout -b FeatureBranch_Backup\nSync the main branch\ngit checkout main\ngit pull\nSwitch to the feature branch and merge main into it\ngit checkout FeatureBranch\ngit status to confirm zero uncommitted changes\ngit merge main\nResolve conflicts and commit them if any\nReabse the feature branch\ngit reset origin/main to rewrite history\ngit diff (optional) would show all the changes\ngit add --all to add local changes on top of main\ngit commit -m \"Single commit message\"\ngit push -f to force push because of the re-written history\nCreate a Pull Request\nThrough the web\nRemove local unnecessary branch (e.g., FeatureBranch_backup)\ngit branch -d FeatureBranch_Backup\ngit branch -D FeatureBranch_Backup to force remove","category":"page"},{"location":"submodules/StomataModels/#StomtaModels-API","page":"StomataModels","title":"StomtaModels API","text":"","category":"section"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"CurrentModule = Land.StomataModels","category":"page"},{"location":"submodules/StomataModels/#Stomatal-model-schemes","page":"StomataModels","title":"Stomatal model schemes","text":"","category":"section"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"The StomataModels module relies mainly on Photosynthesis and PlantHydraulics     modules to predict stomatal behavior from plant physiology. This module has     both empirical and optimal stomatal models. These stomatal models are     abstractized to an abstract AbstractStomatalModel, which further     has subtypes EmpiricalStomatalModel and     OptimizationStomatalModel.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractStomatalModel\nEmpiricalStomatalModel\nOptimizationStomatalModel","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractStomatalModel","page":"StomataModels","title":"Land.StomataModels.AbstractStomatalModel","text":"type AbstractStomatalModel\n\nHierarchy of the AbstractStomatalModel:\n\nEmpiricalStomatalModel\nOptimizationStomatalModel\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.EmpiricalStomatalModel","page":"StomataModels","title":"Land.StomataModels.EmpiricalStomatalModel","text":"type EmpiricalStomatalModel\n\nHierarchy of the EmpiricalStomatalModel:\n\nESMBallBerry\nESMGentine\nESMLeuning\nESMMedlyn\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OptimizationStomatalModel","page":"StomataModels","title":"Land.StomataModels.OptimizationStomatalModel","text":"type OptimizationStomatalModel\n\nHierarchy of the OptimizationStomatalModel:\n\nOSMEller\nOSMSperry\nOSMWang\nOSMWAP\nOSMWAPMod\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Currently, the StomataModels module has four empirical model schemes, and they     are","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"ESMBallBerry\nESMGentine\nESMLeuning\nESMMedlyn","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.ESMBallBerry","page":"StomataModels","title":"Land.StomataModels.ESMBallBerry","text":"struct ESMBallBerry{FT}\n\nAn empirical model parameter set type for Ball-Berry type model. The equation used for Ball-Berry type model is\n\ngs = g0 + g1  RH  dfracACs\n\nFields\n\ng0\nminimal stomatal conductance g0 [mol m⁻² s⁻¹]\ng1\nslope of conductance-photosynthesis correlation [unitless]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.ESMGentine","page":"StomataModels","title":"Land.StomataModels.ESMGentine","text":"struct ESMGentine{FT}\n\nAn empirical model parameter set type for Gentine type model. The equation used for Gentine type model is\n\ngs = g0 + g1  dfrack_leafk_max  dfracACa\n\nNote it that the Gentine model does not require for a β function to tune the     soil drought response, but the use of k_leaf also does not permit     post-drought stomatal response unless k_leaf can be recovered.\n\nFields\n\ng0\nminimal stomatal conductance g0 [mol m⁻² s⁻¹]\ng1\nslope of conductance-photosynthesis correlation [unitless]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.ESMLeuning","page":"StomataModels","title":"Land.StomataModels.ESMLeuning","text":"struct ESMLeuning{FT}\n\nAn empirical model parameter set type for Leuning type model. The equation used for Leuning type model is\n\ngs = g0 + g1  dfracACs - Γ^*  dfrac11 + dfracVPDd0\n\nFields\n\ng0\nminimal stomatal conductance g0 [mol m⁻² s⁻¹]\ng1\nslope of conductance-photosynthesis correlation [unitless]\nd0\nfitting parameter of d/d0 below the fraction, same unit as vpd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.ESMMedlyn","page":"StomataModels","title":"Land.StomataModels.ESMMedlyn","text":"struct ESMMedlyn{FT}\n\nAn empirical model parameter set type for Medlyn type model. The equation used in Medlyn type model is\n\ngs = g0 + 16  left( 1 + dfracg1sqrtVPD right)  dfracACa\n\nFields\n\ng0\nminimal stomatal conductance g0 [mol m⁻² s⁻¹]\ng1\nslope of conductance-photosynthesis correlation [Pa⁽⁵⁾]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"All the empirical models rely on beta functions to make corrections over     stomatal conductance to account for the stomatal closure with drier soil.     We have the following prescribed beta function types, and they are:","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractBetaFunction","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractBetaFunction","page":"StomataModels","title":"Land.StomataModels.AbstractBetaFunction","text":"abstract type AbstractBetaFunction{FT}\n\nHierachy of AbstractBetaFunction:\n\nAbstractBetaG\nBetaGLinearKleaf\nBetaGLinearPleaf\nBetaGLinearPsoil\nBetaGLinearSWC\nAbstractBetaV\nBetaVLinearKleaf\nBetaVLinearPleaf\nBetaVLinearPsoil\nBetaVLinearSWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Some beta functions make correction over the g1 parameter as in the empitical     models, and they are:","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractBetaG\nBetaGLinearKleaf\nBetaGLinearPleaf\nBetaGLinearPsoil\nBetaGLinearSWC","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractBetaG","page":"StomataModels","title":"Land.StomataModels.AbstractBetaG","text":"abstract type AbstractBetaG{FT}\n\nHierachy of AbstractBetaG:\n\nBetaGLinearKleaf\nBetaGLinearPleaf\nBetaGLinearPsoil\nBetaGLinearSWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearKleaf","page":"StomataModels","title":"Land.StomataModels.BetaGLinearKleaf","text":"struct BetaGLinearKleaf{FT}\n\nLinear β function for g1 based on leaf hydraulic conductance.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearPleaf","page":"StomataModels","title":"Land.StomataModels.BetaGLinearPleaf","text":"mutable struct BetaGLinearPleaf{FT}\n\nLinear β function for g1 based on soil water potential.\n\nFields\n\np_max\nUpper bound of Pleaf [MPa]\np_min\nLower bound of Pleaf [MPa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearPsoil","page":"StomataModels","title":"Land.StomataModels.BetaGLinearPsoil","text":"mutable struct BetaGLinearPsoil{FT}\n\nLinear β function for g1 based on soil water potential.\n\nFields\n\np_max\nUpper bound of Psoil [MPa]\np_min\nLower bound of Psoil [MPa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearSWC","page":"StomataModels","title":"Land.StomataModels.BetaGLinearSWC","text":"mutable struct BetaGLinearSWC{FT}\n\nLinear β function for g1 based on soil water content.\n\nFields\n\nswc_max\nUpper bound of SWC\nswc_min\nLower bound of SWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Some beta functions make correction over the photosynthetic capacity as in the     Photosynthesis module, and they are:","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractBetaV\nBetaVLinearKleaf\nBetaVLinearPleaf\nBetaVLinearPsoil\nBetaVLinearSWC","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractBetaV","page":"StomataModels","title":"Land.StomataModels.AbstractBetaV","text":"abstract type AbstractBetaV{FT}\n\nHierachy of AbstractBetaV:\n\nBetaVLinearKleaf\nBetaVLinearPleaf\nBetaVLinearPsoil\nBetaVLinearSWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaVLinearKleaf","page":"StomataModels","title":"Land.StomataModels.BetaVLinearKleaf","text":"struct BetaVLinearKleaf{FT}\n\nLinear β function for g1 based on leaf hydraulic conductance.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaVLinearPleaf","page":"StomataModels","title":"Land.StomataModels.BetaVLinearPleaf","text":"mutable struct BetaVLinearPleaf{FT}\n\nLinear β function for g1 based on soil water potential.\n\nFields\n\np_max\nUpper bound of Pleaf [MPa]\np_min\nLower bound of Pleaf [MPa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaVLinearPsoil","page":"StomataModels","title":"Land.StomataModels.BetaVLinearPsoil","text":"mutable struct BetaVLinearPsoil{FT}\n\nLinear β function for Vcmax based on soil water potential.\n\nFields\n\np_max\nUpper bound of Psoil [MPa]\np_min\nLower bound of Psoil [MPa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaVLinearSWC","page":"StomataModels","title":"Land.StomataModels.BetaVLinearSWC","text":"mutable struct BetaVLinearSWC{FT}\n\nLinear β function for Vcmax based on soil water content.\n\nFields\n\nswc_max\nUpper bound of SWC\nswc_min\nLower bound of SWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"The beta functions are generalized with","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"β_factor","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.β_factor","page":"StomataModels","title":"Land.StomataModels.β_factor","text":"β_factor(hs::LeafHydraulics{FT},\n         bt::AbstractBetaFunction{FT},\n         p_leaf::FT,\n         p_soil::FT,\n         swc::FT\n) where {FT<:AbstractFloat}\n\nCalculate the β correction factor, given\n\nbt AbstractBetaFunction type struct\np_leaf Leaf water potential [MPa]\np_soil Soil water potential [MPa]\nswc Soil water content\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"The StomataModels module also contains five optimization model schemes:","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"OSMEller\nOSMSperry\nOSMWang\nOSMWAP\nOSMWAPMod","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMEller","page":"StomataModels","title":"Land.StomataModels.OSMEller","text":"struct OSMEller\n\nAn optimization model parameter set type for Eller model. The equation used for Eller model is\n\ndfracΘE = -dfracKE  dfracAK\n\nwhere K is dfracEP.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMSperry","page":"StomataModels","title":"Land.StomataModels.OSMSperry","text":"struct OSMSperry\n\nAn optimization model parameter set type for Sperry model. The equation used for Sperry model is\n\ndfracΘE = -dfracKE  dfracA_maxK_max\n\nwhere K is dfracEP.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMWang","page":"StomataModels","title":"Land.StomataModels.OSMWang","text":"struct OSMWang\n\nAn optimization model parameter set type for Eller type model. The equation used for Wang model is\n\ndfracΘE = dfracAE_crit - E\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMWAP","page":"StomataModels","title":"Land.StomataModels.OSMWAP","text":"struct OSMWAP{FT}\n\nAn optimization model parameter set type for Wolf-Anderegg-Pacala type model. The equation used for Wolf-Anderegg-Pacala model is\n\ndfracΘE = dfrac2aP + bK\n\nwhere K is ∂P/∂E.\n\nFields\n\na\nQuadratic equation parameter [μmol m⁻² s⁻¹ MPa⁻²]\nb\nQuadratic equation parameter [μmol m⁻² s⁻¹ MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMWAPMod","page":"StomataModels","title":"Land.StomataModels.OSMWAPMod","text":"struct OSMWAPMod{FT}\n\nAn optimization model parameter set type for Wolf-Anderegg-Pacala type model,     modified by adding a photosynthesis component while set b and c = 0. The equation used for modified Wolf-Anderegg-Pacala model is\n\ndfracΘE = dfracaAPK\n\nwhere P is absolute value of leaf xylem pressure.\n\nFields\n\na\nQuadratic equation parameter [mol mol⁻¹ MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#CanopyLayer","page":"StomataModels","title":"CanopyLayer","text":"","category":"section"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"The StomataModels module is designed for multi-layer canopies, and each canopy     has multiple leaves. The stomatal behaviors are modeled per layer basis,     and the layer may contain any number of leaves starting from 1.     Photosynthesis-related information is stored in CanopyLayer     struct, but be aware that the leaves have uniform photosynthetic parameters     and temperature (conductances are different in response to light     environment).","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"CanopyLayer","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.CanopyLayer","page":"StomataModels","title":"Land.StomataModels.CanopyLayer","text":"struct CanopyLayer{FT}\n\nStruct to store leaf information (multi-dimensional).\n\nFields\n\nps\nleaf photosynthesis system\nps_m\nMemory leaf photosynthesis system\nLA\nTotal leaf area [m²]\nLAI\nLeaf area index in the layer\ntLAI\nTotal leaf area index in the layer\nAPAR_m\nMemory APAR [μmol m⁻² s⁻¹]\nenvir_m\nMemory environment\nn_leaf\nH\nSensible Heat Flux [W m⁻²]\nLE\nLatent Heat Flux [W m⁻²]\nRn\nNet Radiation Balance [W m⁻²]\nLV\nLatent Heat of evaporation [J mol⁻¹]\nT\nTemperature [K]\nT_old\nOld temperature [K]\nwidth\nLeaf width [m]\ng_bc\nBoundary layer conductance to CO₂ [mol m⁻² s⁻¹]\ng_bh\nBoundary layer conductance to heat [mol m⁻² s⁻¹]\ng_bw\nBoundary layer conductance to H₂O [mol m⁻² s⁻¹]\ng_lc\nLeaf diffusive conductance to water CO₂ [mol m⁻² s⁻¹]\ng_lw\nLeaf diffusive conductance to water H₂O [mol m⁻² s⁻¹]\ng_m\nMesophyll conductance for CO₂ [mol m⁻² s⁻¹]\ng_sc\nStomatal conductance to water CO₂ [mol m⁻² s⁻¹]\ng_sw\nStomatal conductance to water H₂O [mol m⁻² s⁻¹]\ng_ias_c\nGias correction constant\ng_ias_e\nGias correction exponent\ng_max\nMaximal leaf diffusive conductance [mol m⁻² s⁻¹]\ng_max25\nMaximal leaf diffusive conductance at 298.15 K [mol m⁻² s⁻¹]\ng_min\nMinimal leaf diffusive conductance [mol m⁻² s⁻¹]\ng_min25\nMinimal leaf diffusive conductance at 298.15 K [mol m⁻² s⁻¹]\np_i\nLeaf internal CO₂ partial pressure [Pa]\np_s\nLeaf surface CO₂ partial pressure [Pa]\np_sat\nLeaf saturation vapor pressure [Pa]\nAc\nRubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\nAj\nLight limited photosynthetic rate [μmol m⁻² s⁻¹]\nAg\nGross photosynthetic rate [μmol m⁻² s⁻¹]\nAn\nNet photosynthetic rate [μmol m⁻² s⁻¹]\nAp\nProduct limited photosynthetic rate [μmol m⁻² s⁻¹]\nJ\nElectron transport [μmol m⁻² s⁻¹]\nJ_pot\nPotential Electron Transport Rate [μmol m⁻² s⁻¹]\ne2c\nTotal efficiency, incl. photorespiration [mol CO₂ mol⁻¹ e-]\nFm′\nlight adapted yield (Kp=0)\nFo′\nlight-adapted fluorescence yield in the dark (Kp=max)\nJa\nActual electron transport rate [μmol m⁻² s⁻¹]\nNPQ\nNon-Photochemical quenching\nqQ\nPhotochemical quenching\nqE\nenergy quenching\nφ\nPSII yield\nϕs\nSteady-state (light-adapted) yield (aka Fs)\nFm\ndark adapted yield (Kp=0)\nFo\ndark-adapted fluorescence yield (Kp=max)\nAPAR\nAbsorbed photosynthetic active radiation [μmol m⁻² s⁻¹]\nLAIx\nLeaf area fractions\na_max\nMaximal photosynthetic rate [μmol m⁻² s⁻¹]\ne\nFlow rate [mol m⁻² s⁻¹]\nec\nCritical flow rate [mol m⁻² s⁻¹]\nkr_max\nMaximal hydraulic conductance ratio\np_ups\nBase xylem pressre [MPa]\np_old\nBase xylem pressre memory [MPa]\nff\nFitness factor for nighttime stomtal conductance\nτ_esm\nτ for empirical stomatal models [-], Δg/Δt = (g_ss - gsw) / τ\nτ_osm\nτ for optimal stomatal models [μmol⁻¹], Δg/Δt = (∂A/∂E - ∂Θ/∂E) * τ\nτ_noc\nτ for nighttime optimal stomatal models [μmol⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Stomatal-conductance","page":"StomataModels","title":"Stomatal conductance","text":"","category":"section"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"For empirical stomatal models, the stomatal conductance is computed as the     intercept of two functions: an empirical function that describe stomatal     responses to the physiological and environmental cues and an function that     follows the diffusion nature of H₂O and CO₂. The abstractized function for     the empirical correlation is","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"stomatal_conductance","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.stomatal_conductance","page":"StomataModels","title":"Land.StomataModels.stomatal_conductance","text":"stomatal_conductance(\n            model::EmpiricalStomatalModel{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            β::FT\n) where {FT<:AbstractFloat}\nstomatal_conductance(\n            model::EmpiricalStomatalModel{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            β::FT\n) where {FT<:AbstractFloat}\nstomatal_conductance(\n            model::EmpiricalStomatalModel{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            β::FT,\n            ind::Int\n) where {FT<:AbstractFloat}\n\nSteady state gsw from empirical approach given\n\nmodel EmpiricalStomatalModel type empirical model parameter set\nleaf [Leaf] type struct\ncanopyi CanopyLayer type struct\nenvir [AirLayer] type struct\nβ Correction factor over the g1 part of an empirical model\nind Nth leaf in the canopy layer\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"For optimization stomatal models, the stomatal conductance is computed as the     point where the marginal carbon gains equals the marginal carbon risk. The     marginal carbon gain and risk are generally numerically computed by     marginally increasing transpiration rate.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"This module uses ConstrainedRootSolver module to iterate through the two     functions to find the solution. The aim is to find the stomatal conductance     when the solution_diff! function equals 0. The     solution_diff! returns the diference between real and     model-predicted conductances for empirical stomatal models, and the     difference between marginal carbon gain and risk for optimization stomatal     models.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"solution_diff!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.solution_diff!","page":"StomataModels","title":"Land.StomataModels.solution_diff!","text":"solution_diff!(x::FT,\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            psoil::FT,\n            swc::FT,\n            envir::AirLayer{FT},\n            sm::OptimizationStomatalModel{FT},\n            bt::AbstractBetaFunction{FT},\n            mode::GlcDrive,\n            ind::Int\n) where {FT<:AbstractFloat}\nsolution_diff!(x::FT,\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT},\n            sm::AbstractStomatalModel{FT},\n            mode::AbstractDrive,\n            ind::Int\n) where {FT<:AbstractFloat}\n\nCalculate the difference to be minimized for a given\n\nx Assumed leaf diffusive conductance or stomatal conductance, depending on   mode\nphoto_set[C3ParaSet] or [C4ParaSet] type parameter set\ncanopyiCanopyLayer type struct\nhs Leaf hydraulic system\npsoil Soil water potential [MPa]\nswc Soil water content\nenvir[AirLayer] type struct\nsm EmpiricalStomatalModel or OptimizationStomatalModel\nbt AbstractBetaFunction type struct\nmode GlcDrive or GswDrive mode\nind Nth leaf in the canopy layer\n\nThe former function works for all empirical stomatal models, and the latter     works for all optimization based models.\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"In the solution_diff! function, leaf photosynthetic rates is modeled     using gas_exchange!, which calculates the gas exchange     rates from a known total leaf diffusive conductance using     GlcDrive mode.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractDrive\nGlcDrive\nGswDrive","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractDrive","page":"StomataModels","title":"Land.StomataModels.AbstractDrive","text":"abstract type AbstractDrive\n\nHierarchy of AbstractDrive\n\nGlcDrive\nGswDrive\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.GlcDrive","page":"StomataModels","title":"Land.StomataModels.GlcDrive","text":"struct GlcDrive\n\nGas exchange update is driven by changes in total leaf diffusive conductance to     CO₂\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.GswDrive","page":"StomataModels","title":"Land.StomataModels.GswDrive","text":"struct GswDrive\n\nGas exchange update is driven by changes in stomtal conductance to H₂O\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"However, these functions do not force stomatal conductance to stay in its     ranges. For example, the stomatal conductance solution is set to be zero if     light is lower than the compensation point. In this case, the     solution_diff! function has to be used along with a control     function to guarantee realistic stomatal conductance.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"gsw_control!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.gsw_control!","page":"StomataModels","title":"Land.StomataModels.gsw_control!","text":"gsw_control!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            ind::Int\n) where {FT<:AbstractFloat}\ngsw_control!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nmake sure g_sw is in its physiological range limited by diffusion, given\n\nphoto_set [C3ParaSet] or [C4ParaSet] type parameter set\ncanopyi CanopyLayer type struct\nenvir [AirLayer] type struct\nind Nth leaf\n\nNote that this function is meant to use jointly with gas_exchange! when     computing optimal stomtal conductance.\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"To facilitate the use of the StomataModels module, an abstractized function is     provided for conveniently obtaining stomatal conductance from given     environmental conditions.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"gas_exchange!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.gas_exchange!","page":"StomataModels","title":"Land.StomataModels.gas_exchange!","text":"gas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            psoil::FT,\n            swc::FT,\n            envir::AirLayer{FT},\n            sm::EmpiricalStomatalModel{FT},\n            bt::AbstractBetaFunction{FT}\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            psoil::FT,\n            swc::FT,\n            envir::AirLayer{FT},\n            sm::EmpiricalStomatalModel{FT},\n            bt::AbstractBetaFunction{FT},\n            ind::Int\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT},\n            sm::AbstractStomatalModel{FT}\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT},\n            sm::AbstractStomatalModel{FT},\n            ind::Int\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::TreeSimple{FT},\n            envir::AirLayer{FT},\n            sm::OSMWang{FT}\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GlcDrive,\n            ind::Int,\n            glc::FT\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GlcDrive,\n            ind::Int\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GlcDrive\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GswDrive,\n            ind::Int,\n            gsw::FT\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GswDrive,\n            ind::Int\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GswDrive\n) where {FT<:AbstractFloat}\n\nCalculate steady state gas exchange rates, given\n\nphoto_set [C3ParaSet] or [C4ParaSet] type parameter set\ncanopyi CanopyLayer type struct\nhs Leaf hydraulic system or TreeSimple hydraulic organism\nenvir [AirLayer] type struct\nsm EmpiricalStomatalModel or OptimizationStomatalModel\nbt AbstractBetaFunction type struct\nind Nth leaf in canopyi\ndrive GlcDrive or GswDrive drive mode\nglc Given leaf diffusive conductance to CO₂\ngsw Given stomatal conductance to H₂O\n\nNote 1: When there is no drive mode in the parameter list, the function     calculates the steady state stomatal conductance first, and then the gas     exchange rates.\n\nNote 2: When using GlcDrive mode, gas exchange rates are computed using the     given glc. However, this option does not make the gsw control, so it is     not guaranteed that gsw is within the physiological range. Thus, gsw     control should be made outside this function. This option is supposed to be     used in the optimal stomatl conductance models only, because optimal     conductance can be outside the physiological stomatal conductance range.     Thus, using this option for other purposes need to be cautious. In this     case, it is recommended to use the GswDrive mode.\n\nNote 3: When using GswDrive mode, gas exchange rates are computed using the     given gsw. Moreover, gsw control so that gsw is within the     physiological range.\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"To speed up the calculations, leaf physiological parameters are updated only     if the environmental conditions changes. For example, PAR (photosyntheis     active radiation) is constant when we iterate solution_diff!, and     the electron transport is only updated once. Similar to the cases of     leaf temperature and soil moisture. This kind of functions used in the     present module are","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"update_leaf_TP!\nupdate_leaf_AK!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.update_leaf_TP!","page":"StomataModels","title":"Land.StomataModels.update_leaf_TP!","text":"update_leaf_TP!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf physiological parameters if temperature or pressure changes in the daytime, given\n\nphoto_set [C3ParaSet] or [C4ParaSet] type parameter set\ncanopyi CanopyLayer type struct\nhs Leaf hydraulic system\nenvir [AirLayer] type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.update_leaf_AK!","page":"StomataModels","title":"Land.StomataModels.update_leaf_AK!","text":"update_leaf_AK!(\n        photo_set::AbstractPhotoModelParaSet{FT},\n        canopyi::CanopyLayer{FT},\n        hs::LeafHydraulics{FT},\n        envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf maximal A and K for Sperry model, given\n\nphoto_set [C3ParaSet] or [C4ParaSet] type parameter set\ncanopyi CanopyLayer type struct\nenvir [AirLayer] type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"I'd like to emphasize it here that the gas_exchange!     function only applies to the case of constant leaf temperature because     leaf energy budget is not calculated, and thus     gas_exchange! is only applicable to (1) known leaf     temperature, and (2) prognostically modeling the non-steady state stomatal     behaviors. As to the steady state case, leaf energy budget has to be     considered. For the prognotic stomatal conductance, it is recommended to     use gas_exchange! function at GswDrive mode.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Note it here that stomtal conductance is controlled in this function, and thus     no additional control like gsw_control! is required if     gas_exchange! is used.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Other functions","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"dRdE\ndTdE\ndΘdE\nnocturnal_diff!\nprognostic_gsw!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.dRdE","page":"StomataModels","title":"Land.StomataModels.dRdE","text":"dRdE(photo_set::AbstractPhotoModelParaSet{FT},\n     clayer::CanopyLayer{FT},\n     envir::AirLayer{FT},\n     LAI::FT\n) where {FT<:AbstractFloat}\n\nCalculate the marginal decrease of respiration rate, given\n\nphoto_set AbstractPhotoModelParaSet type struct\nclayer CanopyLayer type of struct\nenvir AirLayer type struct\nLAI Total leaf area index of whole canopy\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.dTdE","page":"StomataModels","title":"Land.StomataModels.dTdE","text":"dTdE(clayer::CanopyLayer{FT},\n     envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the margian decrease in leaf temperature, given\n\nclayer CanopyLayer type of struct\nenvir AirLayer type struct\nLAI Total leaf area index of whole canopy\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.dΘdE","page":"StomataModels","title":"Land.StomataModels.dΘdE","text":"dΘdE(photo_set::AbstractPhotoModelParaSet{FT},\n     clayer::CanopyLayer{FT},\n     sm::OSMWang{FT}(),\n     g_sw::FT\n) where {FT<:AbstractFloat}\n\nCalculate the margian carbon cost related to nighttime transpiration, given\n\nphoto_set AbstractPhotoModelParaSet type struct\nclayer CanopyLayer type of struct\nsm OSMWang type stomatal model\ng_sw Given leaf level stomatal conductance\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.nocturnal_diff!","page":"StomataModels","title":"Land.StomataModels.nocturnal_diff!","text":"nocturnal_diff!(\n            x::FT,\n            photo_set::AbstractPhotoModelParaSet{FT},\n            clayer::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            sm::OSMWang{FT}()\n) where {FT<:AbstractFloat}\n\nCalculate the difference between marginal gain and risk of nighttime     transpiration, given\n\nx Given leaf level stomatal conductance\nphoto_set AbstractPhotoModelParaSet type struct\nclayer CanopyLayer type of struct\nenvir AirLayer type struct\nsm OSMWang type stomatal model\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.prognostic_gsw!","page":"StomataModels","title":"Land.StomataModels.prognostic_gsw!","text":"prognostic_gsw!(\n            clayer::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            sm::EmpiricalStomatalModel{FT},\n            β::FT,\n            Δt::FT\n) where {FT<:AbstractFloat}\nprognostic_gsw!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            clayer::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT},\n            sm::OSMWang{FT},\n            Δt::FT\n) where {FT<:AbstractFloat}\n\nUpdate g_sw prognostically, given\n\nclayer A CanopyLayer type struct\nenvir AirLayer type environmental conditions\nsm EmpiricalStomatalModel or OSMWang type stomatal model\nβ Tune factor to stomatal g1. 1 for AbstractBetaV mode\nΔt Time interval for prognostic stomatal conductance\nphoto_set AbstractPhotoModelParaSet type photosynthesis model, currently   supports OSMWang model only\nhs Leaf hydraulic system\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#API","page":"PlantHydraulics","title":"API","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"CurrentModule = Land.PlantHydraulics","category":"page"},{"location":"submodules/PlantHydraulics/#Plant-Hydraulic-System","page":"PlantHydraulics","title":"Plant Hydraulic System","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The PlantHydraulics module provides two levels of hydraulics system:     organ-level and plant-level. The organ-level hydraulic systems include     Leaf, Root, and Stem (trunk and branch). The plant-level hydraulic system     is can be any combination of the three organs (custimized definition may     apply).","category":"page"},{"location":"submodules/PlantHydraulics/#Leaf,-Root,-and-Stem-organs","page":"PlantHydraulics","title":"Leaf, Root, and Stem organs","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Plant hydraulics is segmented to three organ-level systems/structs     (LeafHydraulics, RootHydraulics, and     StemHydraulics) subject to an Abstract type     (AbstractHydraulicOrgan). The major differences among the three     structs are","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"LeafHydraulics has an extra-xylary component\nRootHydraulics has a rhizosphere component\nRootHydraulics and StemHydraulics have a gravity component","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"See the documentation for each struct for more details:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractHydraulicOrgan\nLeafHydraulics\nRootHydraulics\nStemHydraulics","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractHydraulicOrgan","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractHydraulicOrgan","text":"abstract type AbstractHydraulicOrgan{FT}\n\nHierarchy of AbstractHydraulicOrgan\n\nLeafHydraulics\nRootHydraulics\nStemHydraulics\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.LeafHydraulics","page":"PlantHydraulics","title":"Land.PlantHydraulics.LeafHydraulics","text":"mutable struct LeafHydraulics{FT}\n\nA struct that contains leaf hydraulics information.\n\nFields\n\nN::Int64\narea::Any\nLeaf area [m²]\nk_ox::Any\nMaximal extra-xylary hydraulic conductance [mol s⁻¹ MPa⁻¹ m⁻²]\nk_sla::Any\nMaximal leaf hydraulic conductance per leaf area [mol s⁻¹ MPa⁻¹ m⁻²]\nvc::Land.PlantHydraulics.AbstractXylemVC{FT} where FT\nVulnerability curve\np_crt::Any\nCritical xylem pressure [MPa]\nflow::Any\nFlow rate in the xylem [mol s⁻¹]\np_dos::Any\nLeaf xylem water pressure at the downstream end of leaf xylem [MPa]\np_leaf::Any\nLeaf end water pressure at air-water interface [MPa]\np_ups::Any\nLeaf xylem water pressure at the leaf base (upstream) [MPa]\nk_element::Vector{FT} where FT\nList of leaf k_max per element [mol s⁻¹ MPa⁻¹ m⁻²]\nk_history::Vector{FT} where FT\nList of leaf kr history per element\np_element::Vector{FT} where FT\nList of xylem water pressure [MPa]\np_history::Vector{FT} where FT\nList of xylem water pressure history (normalized to 298.15 K) [MPa]\nf_st::Any\nRelative surface tension\nf_vis::Any\nRelative viscosity\nT_old::Any\nTemperature memory [K]\nT_sap::Any\nUpstream sap temperature [K]\npv::Land.PlantHydraulics.AbstractCapacity{FT} where FT\nPressure volume curve for storage\np_storage::Any\nPressure of storage\nv_maximum::Any\nTotal capaciatance at Ψ = 0 [mol m⁻²]\nv_storage::Any\nCurrent capaciatance at Ψ_leaf [mol m⁻²]\nq_in::Any\nFlow rate into the tissue (used for non-steady state) [mol m⁻² s⁻¹]\nq_out::Any\nFlow rate out of the tissue (used for non-steady state) [mol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.RootHydraulics","page":"PlantHydraulics","title":"Land.PlantHydraulics.RootHydraulics","text":"mutable struct RootHydraulics{FT}\n\nA struct that contains root hydraulics information.\n\nFields\n\nN::Int64\narea::Any\nRoot cross-section area [m²]\nk_max::Any\nMaximal hydraulic conductance [mol s⁻¹ MPa⁻¹]\nk_s::Any\nMaximal xylem hydraulic conductivity [mol s⁻¹ MPa⁻¹ m⁻²]\nvc::Land.PlantHydraulics.AbstractXylemVC{FT} where FT\nVulnerability curve\nΔh::Any\nRoot z difference [m]\nk_rhiz::Any\nRhizosphere  conductance [mol s⁻¹ MPa⁻¹]\nsh::Land.PlantHydraulics.AbstractSoilVC{FT} where FT\nSoil hydraulics\nflow::Any\nFlow rate in the xylem [mol s⁻¹]\np_dos::Any\nXylem water pressure at the downstream end of xylem [MPa]\np_rhiz::Any\nXylem-rhizosphere interface water pressure [MPa]\np_ups::Any\nSoil matrix potential [MPa]\np_osm::Any\nSoil osmotic potential at 298.15 K `[MPa]\nk_element::Vector{FT} where FT\nList of k_max per element [mol s⁻¹ MPa⁻¹ m⁻²]\nk_history::Vector{FT} where FT\nList of kr history per element\np_element::Vector{FT} where FT\nList of xylem water pressure [MPa]\np_gravity::Vector{FT} where FT\nList of pressure drop caused by gravity [MPa]\np_history::Vector{FT} where FT\nList of xylem water pressure history (normalized to 298.15 K) [MPa]\nf_st::Any\nRelative surface tension\nf_vis::Any\nRelative viscosity\nT_old::Any\nTemperature memory [K]\nT_sap::Any\nUpstream sap temperature [K]\npv::Land.PlantHydraulics.AbstractCapacity{FT} where FT\nPressure volume curve for storage\np_storage::Vector{FT} where FT\nPressure of storage per element\nv_maximum::Vector{FT} where FT\nMaximal storage per element [mol]\nv_storage::Vector{FT} where FT\nStorage per element [mol]\nq_element::Vector{FT} where FT\nList of xylem water flow [mol m⁻²]\nq_buffer::Vector{FT} where FT\nList of buffer water flow [mol m⁻²]\nq_diff::Vector{FT} where FT\nList of diiferntial water flow [mol m⁻²]\nq_in::Any\nFlow rate into the tissue (used for non-steady state) [mol s⁻¹]\nq_out::Any\nFlow rate out of the tissue (used for non-steady state) [mol s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.StemHydraulics","page":"PlantHydraulics","title":"Land.PlantHydraulics.StemHydraulics","text":"mutable struct StemHydraulics{FT}\n\nA struct that contains stem hydraulics information.\n\nFields\n\nN::Int64\narea::Any\nStem cross-section area [m²]\nk_max::Any\nMaximal hydraulic conductance [mol s⁻¹ MPa⁻¹]\nk_s::Any\nMaximal xylem hydraulic conductivity [mol s⁻¹ MPa⁻¹ m⁻²]\nvc::Land.PlantHydraulics.AbstractXylemVC{FT} where FT\nVulnerability curve\nΔh::Any\nStem height difference [m]\nflow::Any\nFlow rate in the xylem [mol s⁻¹]\np_dos::Any\nXylem water pressure at the downstream end of xylem [MPa]\np_ups::Any\nXylem water pressure at the base (upstream) [MPa]\nk_element::Vector{FT} where FT\nList of k_max per element [mol s⁻¹ MPa⁻¹ m⁻²]\nk_history::Vector{FT} where FT\nList of kr history per element\np_element::Vector{FT} where FT\nList of xylem water pressure [MPa]\np_gravity::Vector{FT} where FT\nList of pressure drop caused by gravity [MPa]\np_history::Vector{FT} where FT\nList of xylem water pressure history (normalized to 298.15 K) [MPa]\nf_st::Any\nRelative surface tension\nf_vis::Any\nRelative viscosity\nT_old::Any\nTemperature memory [K]\nT_sap::Any\nUpstream sap temperature [K]\npv::Land.PlantHydraulics.AbstractCapacity{FT} where FT\nPressure volume curve for storage\np_storage::Vector{FT} where FT\nPressure of storage per element\nv_maximum::Vector{FT} where FT\nMaximal storage per element [mol]\nv_storage::Vector{FT} where FT\nStorage per element [mol]\nq_element::Vector{FT} where FT\nList of xylem water flow [mol m⁻²]\nq_in::Any\nFlow rate into the tissue (used for non-steady state) [mol s⁻¹]\nq_out::Any\nFlow rate out of the tissue (used for non-steady state) [mol s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"To initialize a hydraulics system, one needs to provide the floating type, for     example:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"using Land.PlantHydraulics\n\nFT = Float32;\nhs_leaf = LeafHydraulics{FT}();\nhs_root = RootHydraulics{FT}();\nhs_stem = StemHydraulics{FT}();","category":"page"},{"location":"submodules/PlantHydraulics/#Whole-plant-organism","page":"PlantHydraulics","title":"Whole-plant organism","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Plants differ in their structures, for example, some plants have a canopy far     above the ground elevated by a trunk, some plants have a structured canopy     supported by branch systems, and some plant has no trunk at all. To     represent the structural differences, several types of plant hydraulics     systems are pre-defined, and they are GrassLikeOrganism,     PalmLikeOrganism, TreeLikeOrganism, and     TreeSimple structs subject to a AbstractPlantOrganism     type. The major difference between the HSs are","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"GrassLikeOrganism has only mutiple root and canopy layers, no trunk   or branch\nPalmLikeOrganism has multiple root layers, a trunk, and multiple   canopy layers, no branch system\nTreeLikeOrganism has multiple root layers, a trunk, and multiple   branch + canopy layers, and each branch corresponds to a canopy layer\nTreeSimple has one root, one stem, and one leaf for testing purpose","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"See the documentation for each struct for more details:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractPlantOrganism\nGrassLikeOrganism\nPalmLikeOrganism\nTreeLikeOrganism\nTreeSimple","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractPlantOrganism","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractPlantOrganism","text":"abstract type AbstractPlantOrganism{FT}\n\nHierachy of AbstractPlantOrganism\n\nGrassLikeOrganism\nPalmLikeOrganism\nTreeLikeOrganism\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.GrassLikeOrganism","page":"PlantHydraulics","title":"Land.PlantHydraulics.GrassLikeOrganism","text":"mutable struct GrassLikeOrganism{FT}\n\nA plant hydraulic system like a grass, which contains multiple root layers, and multiple canopy layers. No trunk or branch system applies.\n\nFields\n\nn_root::Int64\nRoot Layers\nn_canopy::Int64\nCanopy Layers\nroots::Array{Land.PlantHydraulics.RootHydraulics{FT}, 1} where FT\nRoots system\nleaves::Array{Land.PlantHydraulics.LeafHydraulics{FT}, 1} where FT\nLeaves\nroot_index_in_soil::Vector{Int64}\nCorresponding soil layer per root layer\ncanopy_index_in_air::Vector{Int64}\nCorresponding air layer per canopy layer\ncache_k::Vector{FT} where FT\nConductances for each layer at given flow\ncache_p::Vector{FT} where FT\nPressure for each layer at given flow\ncache_q::Vector{FT} where FT\nFlow rate\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.PalmLikeOrganism","page":"PlantHydraulics","title":"Land.PlantHydraulics.PalmLikeOrganism","text":"mutable struct PalmLikeOrganism{FT}\n\nA plant hydraulic system like a palm, which contains multiple root layers, one trunk, and multiple canopy layers. No branch system applies.\n\nFields\n\nn_root::Int64\nRoot Layers\nn_canopy::Int64\nCanopy Layers\nroots::Array{Land.PlantHydraulics.RootHydraulics{FT}, 1} where FT\nRoots system\ntrunk::Land.PlantHydraulics.StemHydraulics\nTrunk\nleaves::Array{Land.PlantHydraulics.LeafHydraulics{FT}, 1} where FT\nLeaves\nroot_index_in_soil::Vector{Int64}\nCorresponding soil layer per root layer\ncanopy_index_in_air::Vector{Int64}\nCorresponding air layer per canopy layer\ncache_k::Vector{FT} where FT\nConductances for each layer at given flow\ncache_p::Vector{FT} where FT\nPressure for each layer at given flow\ncache_q::Vector{FT} where FT\nFlow rate\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.TreeLikeOrganism","page":"PlantHydraulics","title":"Land.PlantHydraulics.TreeLikeOrganism","text":"mutable struct TreeLikeOrganism{FT}\n\nA plant hydraulic system like a tree, which contains multiple root layers, one trunk, and multiple branch and canopy layers.\n\nFields\n\nn_root::Int64\nRoot Layers\nn_canopy::Int64\nCanopy Layers\nroots::Array{Land.PlantHydraulics.RootHydraulics{FT}, 1} where FT\nRoots system\ntrunk::Land.PlantHydraulics.StemHydraulics\nTrunk\nbranch::Array{Land.PlantHydraulics.StemHydraulics{FT}, 1} where FT\nBranch system\nleaves::Array{Land.PlantHydraulics.LeafHydraulics{FT}, 1} where FT\nLeaves\nroot_index_in_soil::Vector{Int64}\nCorresponding soil layer per root layer\ncanopy_index_in_air::Vector{Int64}\nCorresponding air layer per canopy layer\ncache_k::Vector{FT} where FT\nConductances for each layer at given flow\ncache_p::Vector{FT} where FT\nPressure for each layer at given flow\ncache_q::Vector{FT} where FT\nFlow rate\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.TreeSimple","page":"PlantHydraulics","title":"Land.PlantHydraulics.TreeSimple","text":"mutable struct TreeSimple{FT}\n\nA plant hydraulic system with one root, one stem, and one leaf for testing     purpose\n\nFields\n\nroot::Land.PlantHydraulics.RootHydraulics\nRoot\nstem::Land.PlantHydraulics.StemHydraulics\nStem\nleaf::Land.PlantHydraulics.LeafHydraulics\nLeaf\nkrs::Vector{FT} where FT\nRelative hydraulic conductance\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"To ease the initialization of a plant hydraulics system, a few customized     functions are provided for quick initialization. More importantly,     modifications to each field in the struct are always allowed. The quick     functions are create_grass, create_palm, and     create_tree:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"create_grass\ncreate_palm\ncreate_tree","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.create_grass","page":"PlantHydraulics","title":"Land.PlantHydraulics.create_grass","text":"create_grass(\n            z_root::FT,\n            z_canopy::FT,\n            soil_bounds::Array{FT,1},\n            air_bounds::Array{FT,1}\n) where {FT<:AbstractFloat}\n\nCreate a GrassLikeOrganism, given\n\nz_root Maximal root depth (negative value)\nz_canopy Maximal canopy height (positive value)\nsoil_bounds Array of soil layer boundaries starting from 0\nair_bounds Array of air layer boundaries starting from 0\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.create_palm","page":"PlantHydraulics","title":"Land.PlantHydraulics.create_palm","text":"create_palm(z_root::FT,\n            z_trunk::FT,\n            z_canopy::FT,\n            soil_bounds::Array{FT,1},\n            air_bounds::Array{FT,1}\n) where {FT<:AbstractFloat}\n\nCreate a PalmLikeOrganism, given\n\nz_root Maximal root depth (negative value)\nz_trunk Maximal trunk height (positive value)\nz_canopy Maximal canopy height (positive value)\nsoil_bounds Array of soil layer boundaries starting from 0\nair_bounds Array of air layer boundaries starting from 0\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.create_tree","page":"PlantHydraulics","title":"Land.PlantHydraulics.create_tree","text":"create_tree(z_root::FT,\n            z_trunk::FT,\n            z_canopy::FT,\n            soil_bounds::Array{FT,1},\n            air_bounds::Array{FT,1}\n) where {FT<:AbstractFloat}\n\nCreate a TreeLikeOrganism, given\n\nz_root Maximal root depth (negative value)\nz_trunk Maximal trunk height (positive value)\nz_canopy Maximal canopy height (positive value)\nsoil_bounds Array of soil layer boundaries starting from 0\nair_bounds Array of air layer boundaries starting from 0\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"What these functions do are to determine how many root layers and branch/canopy     layers to add based on the tree information and environmental settings. To     determine number of root layers, rooting depth and the soil layer     information are required. The z_root is the maximal root depth in     negative number, and soil_bounds is the boundaries of soil layers staring     from 0. For example, for a soil_bounds of [0.0, -1.0, -2.0, -3.0, -4.0],     a z_root of -1 gives 1 root layer, and a z_root of -1.5 or -2.0 gives 2     root layers. The z_trunk, z_canopy, and air_bounds determine how many     canopy layers to add. For example, for a air_bounds of [0.0, 1.0, 2.0,     3.0, 4.0, 5.0 ... 20.0, 21.0, 22.0], a z_trunk of 5.0 z_canopy of 7.0     give 2 canopy layers, and a z_trunk of 5.5 z_canopy of 7.0 give 2     canopy layers. Also, the root_index_in_soil and canopy_index_in_air     indicate which soil or air layer the root or canopy layer corresponds with,     respectively. For instance, a index of 7 means that the canopy layer should     use the 7th air layer.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"To initialize a whole-plant hydraulic system, checkout the example below:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"using Land.PlantHydraulics\n\nFT = Float32;\ngrass = create_grass(FT(-2.1), FT(0.5), FT(8), FT[0,-1,-2,-3], collect(FT,0:1:20));\npalm  =  create_palm(FT(-2.1), FT(0.5), FT(8), FT[0,-1,-2,-3], collect(FT,0:1:20));\ntree  =  create_tree(FT(-2.1), FT(0.5), FT(8), FT[0,-1,-2,-3], collect(FT,0:1:20));\ntreet = TreeSimple{FT}();","category":"page"},{"location":"submodules/PlantHydraulics/#Xylem-hydraulic-conductance","page":"PlantHydraulics","title":"Xylem hydraulic conductance","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Plants transport water through xylem conduits (vessels in most angiosperms,     trachieds in most gymnosperms). With the ascent of sap along the hydraulic     system, water pressure in the conduits is typically negative. The negative     xylem water pressure tends to pull air from surrounding tisses or the     atmosphere into the xylem conduits, resulting in xylem cavitation. The air     bubbles in cavitated conduits block water flow, and thus results in decline     of water transport capability (measured by xylem hydraulic conductance).","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Typically, the correlation between xylem water pressure (P leq 0) and     hydraulic conductance (k) is expressed by a Weibull function for     WeibullSingle type correlation:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"k = k_textmax cdot exp left( -left( dfrac-PB right)^C right)","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"where k_textmax is the maximal hydraulic conductance, and B and C are     the Weibull parameters. This correlation is also known as vulnerability     curve (VC) to drought stress. Sometimes, plants exhibit a segmented VC, for     example, the fibers may transport water as well and are much more resistant     to drought than vessels. Thus, a dual Weibull function is presented for     WeibullDual type correlation (P leq 0):","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"k = k_textmax cdot left f_1 cdot exp left -left( dfrac-PB_1 right)^C_1 right +\n                         (1 - f_1) cdot exp left -left( dfrac-PB_2 right)^C_2 right right","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The VC formulations are abstractized as","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractXylemVC\nWeibullDual\nWeibullSingle","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractXylemVC","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractXylemVC","text":"abstract type AbstractXylemVC{FT<:AbstractFloat}\n\nHierachy of AbstractXylemVC\n\nWeibullSingle\nWeibullDual\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.WeibullDual","page":"PlantHydraulics","title":"Land.PlantHydraulics.WeibullDual","text":"mutable struct WeibullDual{FT} <: Land.PlantHydraulics.AbstractXylemVC{FT}\n\nStruct that contains dual Weibull function parameters.\n\nFields\n\nb1::Any\nB of first part [MPa]\nc1::Any\nC of first part\nf1::Any\nF of first part\nb2::Any\nB of second part [MPa]\nc2::Any\nC of second part\nf2::Any\nF of second part\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.WeibullSingle","page":"PlantHydraulics","title":"Land.PlantHydraulics.WeibullSingle","text":"mutable struct WeibullSingle{FT} <: Land.PlantHydraulics.AbstractXylemVC{FT}\n\nStruct that contains single Weibull function parameters.\n\nFields\n\nb::Any\nB of first part [MPa]\nc::Any\nC of first part\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The function to call is","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_k_ratio","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.xylem_k_ratio","page":"PlantHydraulics","title":"Land.PlantHydraulics.xylem_k_ratio","text":"xylem_k_ratio(\n            vc::AbstractXylemVC{FT},\n            p_25::FT,\n            vis::FT\n) where {FT<:AbstractFloat}\n\nReturns the relative hydraulic conductance, given\n\nvc Xylem vulnerability curve\np Xylem pressure at 298.15 K in [MPa]\np_25 Equivalent xylem pressure at 298.15 K in [MPa]\nvis Relative viscosity. If missing, vis = 1.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Note it here that xylem_k_ratio(vc, p) calculate the k without making     temperature corrections, but the xylem_k_ratio(vc, p_25, vis) makes     correction over the viscosity (the higher the viscosity, the lower the k).     Also, p_25 means that the pressure has been corrected to 298.15 K for     surface tension (the higher the surface tension, the more resistant the     xylem).","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Meanwhile, there is a function to call to calculate the critical pressure,     beyond which leaf will decicate. The critical pressure is calculated as the     pressure at which k is 0.001 of k_textmax for     WeibullSingle (for WeibullDual, each segment need to     reach 0.001). The functions is","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_p_crit","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.xylem_p_crit","page":"PlantHydraulics","title":"Land.PlantHydraulics.xylem_p_crit","text":"xylem_p_crit(vc::AbstractXylemVC{FT}, f_st::FT) where {FT<:AbstractFloat}\n\nReturns the relative hydraulic conductance, given\n\nvc Xylem vulnerability curve\nst Relative surface tension. If missing, vis = 1.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Examples:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"using Land.PlantHydraulics\n\nFT = Float32;\nvc_1 = WeibullSingle{FT}();\nvc_2 = WeibullDual{FT}();\n\nk_1 = xylem_k_ratio(vc_1, -1.0);\nk_2 = xylem_k_ratio(vc_2, -1.0);\nk_3 = xylem_k_ratio(vc_1, -1.0, 1.2);\nk_4 = xylem_k_ratio(vc_2, -1.0, 1.2);","category":"page"},{"location":"submodules/PlantHydraulics/#Rhizosphere-hydraulic-conductance","page":"PlantHydraulics","title":"Rhizosphere hydraulic conductance","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"As mentioned above, there is a rhizosphere component in the root hydraulic     system, and thus one needs to compute the pressure dtop along the     rhizosphere. The soil properties are classified to BrooksCorey     and VanGenuchten types subjected to AbstractSoilVC:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractSoilVC\nBrooksCorey\nVanGenuchten","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractSoilVC","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractSoilVC","text":"abstract type AbstractSoilVC{FT}\n\nHierachy of AbstractSoilVC:\n\nBrooksCorey\nVanGenuchten\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.BrooksCorey","page":"PlantHydraulics","title":"Land.PlantHydraulics.BrooksCorey","text":"mutable struct BrooksCorey{FT<:AbstractFloat}\n\nBrooks Corey soil parameters\n\nFields\n\nstype::String\nSoil type\nb::Any\nSoil b\nϕs::Any\nϕ at saturation [MPa]\nΘs::Any\nSoil water content (Θ) at saturation\nΘr::Any\nResidual soil water content\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.VanGenuchten","page":"PlantHydraulics","title":"Land.PlantHydraulics.VanGenuchten","text":"mutable struct VanGenuchten{FT<:AbstractFloat}\n\nVan Gunechten soil parameters\n\nFields\n\nstype::String\nSoil type\nα::Any\nSoil α is related to the inverse of the air entry suction, α > 0\nn::Any\nSoil n is Measure of the pore-size distribution\nm::Any\nSoil m = 1 - 1/n\nΘs::Any\nSoil water content (Θ) at saturation\nΘr::Any\nResidual soil water content\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Pre-defined parameter sets are avialble, and you may quick create a soil type     struct using create_soil_VC. Note that soil type parameters are     van Genuchten type VC, and we curve fitted the curve to provide the     parameters for Brooks and Corey type VC.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"create_soil_VC\nfit_soil_VC!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.create_soil_VC","page":"PlantHydraulics","title":"Land.PlantHydraulics.create_soil_VC","text":"create_soil_VC(\n            vc::AbstractSoilVC{FT},\n            name::String,\n            α::Number,\n            n::Number,\n            Θs::Number,\n            Θr::Number\n) where {FT<:AbstractFloat}\ncreate_soil_VC(\n            vc::AbstractSoilVC{FT},\n            name::String\n) where {FT<:AbstractFloat}\n\nCreate a AbstractSoilVC type of soil VC, given\n\nvc AbstractSoilVC type identifier\nname Soil type name. Supported names include\n\"Sand\"\n\"Loamy Sand\"\n\"Sandy Loam\"\n\"Loam\"\n\"Sandy Clay Loam\"\n\"Silt Loam\"\n\"Silt\"\n\"Clay Loam\"\n\"Silty Clay Loam\"\n\"Sandy Clay\"\n\"Silty Clay\"\n\"Clay\"\nα Soil α\nn Soil n\nΘs SWC at saturation\nΘr Residual SWC\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.fit_soil_VC!","page":"PlantHydraulics","title":"Land.PlantHydraulics.fit_soil_VC!","text":"fit_soil_VC!(\n            vc_vG::VanGenuchten{FT},\n            vc_BC::BrooksCorey{FT}\n) where {FT<:AbstractFloat}\n\nUpdate BrooksCorey setup from known VanGenuchten parameters, given\n\nvc_vG VanGenuchten type soil VC\nvc_BC BrooksCorey type soil VC\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Correlations among soil relative water content, relative hydraulic conductance,     and soil matrix potential are","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"soil_erwc\nsoil_rwc\nsoil_swc\nsoil_k_ratio_erwc\nsoil_k_ratio_rwc\nsoil_k_ratio_swc\nsoil_k_ratio_p25\nsoil_p_25_erwc\nsoil_p_25_rwc\nsoil_p_25_swc","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_erwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_erwc","text":"soil_erwc(sh::AbstractSoilVC{FT}, p_25::FT) where {FT<:AbstractFloat}\n\nReturns the Effective relative water content of the soil     fracΘ - ΘrΘs - Θr, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\np_25 Matrix water potential equivalent to 25 degree C, with surface tension\n\ncorrection\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_rwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_rwc","text":"soil_rwc(sh::AbstractSoilVC{FT}, p_25::FT) where {FT<:AbstractFloat}\n\nReturns the relative soil water content, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\np_25 Matrix water potential equivalent to 25 degree C, with surface tension\n\ncorrection\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_swc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_swc","text":"soil_swc(sh::AbstractSoilVC{FT}, p_25::FT) where {FT<:AbstractFloat}\n\nReturns the soil water content, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\np_25 Matrix water potential equivalent to 25 degree C, with surface tension\n\ncorrection\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_k_ratio_erwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_k_ratio_erwc","text":"soil_k_ratio_erwc(\n            sh::AbstractSoilVC{FT},\n            erwc::FT\n) where {FT<:AbstractFloat}\n\nReturn the soil k relative to maximal k, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nerwc Effective relative soil water content (fracΘs - ΘrΘs - Θ)\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_k_ratio_rwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_k_ratio_rwc","text":"soil_k_ratio_rwc(sh::AbstractSoilVC{FT}, rwc::FT) where {FT<:AbstractFloat}\n\nReturn the soil k relative to maximal k, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nrwc Relative soil water content\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_k_ratio_swc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_k_ratio_swc","text":"soil_k_ratio_swc(sh::AbstractSoilVC{FT}, swc::FT) where {FT<:AbstractFloat}\n\nReturn the soil k relative to maximal k, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nswc Relative soil water content\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_k_ratio_p25","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_k_ratio_p25","text":"soil_k_ratio_p25(\n            sh::AbstractSoilVC{FT},\n            p_25::FT\n) where {FT<:AbstractFloat}\n\nReturn the soil k relative to maximal k, given\n\nsh AbstractSoilVC type soil hydraulics\np_25 Matrix water potential equivalent to 25 degree C, with surface tension\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_p_25_erwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_p_25_erwc","text":"soil_p_25_erwc(sh::AbstractSoilVC{FT}, erwc::FT) where {FT<:AbstractFloat}\n\nReturns the Relative water content of the soil, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nerwc Effectibe relative soil water content (fracΘs - ΘrΘs - Θ)\n\nNote that this function returns the matrix potential of water, not water potential. Also, the potential is that at 25 degree C, not yet been corrected for temperature effect on surface tension.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_p_25_rwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_p_25_rwc","text":"soil_p_25_rwc(sh::AbstractSoilVC{FT}, rwc::FT) where {FT<:AbstractFloat}\n\nReturns the Relative water content of the soil, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nrwc Relative soil water content\n\nNote that this function returns the matrix potential of water, not water potential. Also, the potential is that at 25 degree C, not yet been corrected for temperature effect on surface tension.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_p_25_swc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_p_25_swc","text":"soil_p_25_swc(sh::AbstractSoilVC{FT}, rwc::FT) where {FT<:AbstractFloat}\n\nReturns the Relative water content of the soil, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nswc Soil water content\n\nNote that this function returns the matrix potential of water, not water potential. Also, the potential is that at 25 degree C, not yet been corrected for temperature effect on surface tension.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Pressure-and-Flow","page":"PlantHydraulics","title":"Pressure and Flow","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The PlantHydraulics module is designed to run numerically for the following     reasons:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Weibull function is cannot be integrated\nThe VC is segmented, i.e., if P  0, k = k_textmax (implemented in   xylem_k_ratio)\nOnce xylem cavitation occurs, it cannot be easily recovered unless P  0,   and thus there is a drought legacy effect. This is why there are a few   fields in the LeafHydraulics, RootHydraulics, and   StemHydraulics structs to store the drought history information.\nTemperature may change along the flow path. The f_st and f_vis in the   structs help deal with these effects.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function end_pressure calculates the xylem end pressure for an     organ-level hysraulic system. As mentioned above, the     RootHydraulics and StemHydraulics has a gravity     component, and the RootHydraulics has a rhizosphere component.     Also be aware that end_pressure accounts for temperature     effects on surface tension and viscosity.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"end_pressure","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.end_pressure","page":"PlantHydraulics","title":"Land.PlantHydraulics.end_pressure","text":"end_pressure(\n            leaf::LeafHydraulics{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nend_pressure(\n            root::RootHydraulics{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nend_pressure(\n            stem::StemHydraulics{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nend_pressure(\n            tree::TreeSimple{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nend_pressure(\n            tree::TreeSimple{FT},\n            f_sl::FT,\n            f_sh::FT,\n            r_sl::FT\n) where {FT<:AbstractFloat}\n\nReturn the xylen end pressure(s) from flow rate(s), given\n\nleaf LeafHydraulics type struct\nflow Flow rate (per leaf area for LeafHydraulics)\nroot RootHydraulics type struct\nstem StemHydraulics type struct\ntree TreeSimple type struct\nf_sl Flow rate to sunlit leaves\nf_sh Flow rate to shaded leaves\nr_sl Fraction of sunlit leaves\n\nNote, gravity is accounted for in root and stem; rhizosphere conductance is     accounted for in root; extra-xylary conductance is not accounted for in     leaf here because it calculates xylem end pressure.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Noe that function end_pressure does not update the pressure     profiles or history in the xylem. To update these profiles, use     pressure_profile!, and to remove these legacy profiles, use     inititialize_legacy!:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"pressure_profile!\ninititialize_legacy!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.pressure_profile!","page":"PlantHydraulics","title":"Land.PlantHydraulics.pressure_profile!","text":"pressure_profile!(\n            leaf::LeafHydraulics{FT},\n            flow::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            root::RootHydraulics{FT},\n            flow::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            root::RootHydraulics{FT},\n            q_in::FT,\n            flow::Array{FT,1};\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            stem::StemHydraulics{FT},\n            flow::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            stem::StemHydraulics{FT},\n            flow::Array{FT,1};\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            tree::TreeSimple{FT},\n            p_soil::FT,\n            flow::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            tree::TreeSimple{FT},\n            p_soil::FT,\n            f_sl::FT,\n            f_sh::FT,\n            r_sl::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\n\nUpdate the pressure profile, given\n\nleaf LeafHydraulics type struct\nroot RootHydraulics type struct\nstem StemHydraulics type struct\ntree TreeSimple type struct\np_soil Soil water potential\nflow Flow rate (per leaf area for LeafHydraulics)\nf_sl Flow rate to sunlit leaves\nf_sh Flow rate to shaded leaves\nr_sl Fraction of sunlit leaves\nupdate Optional. If true, update drought legacy. Default is true for   TreeSimple but false for others using capacitance\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.inititialize_legacy!","page":"PlantHydraulics","title":"Land.PlantHydraulics.inititialize_legacy!","text":"inititialize_legacy!(\n            hs::Union{LeafHydraulics,RootHydraulics,StemHydraulics})\ninititialize_legacy!(tree::GrassLikeOrganism)\ninititialize_legacy!(tree::PalmLikeOrganism)\ninititialize_legacy!(tree::TreeLikeOrganism)\ninititialize_legacy!(tree::TreeSimple)\n\nInitialize the drought legacy effects in the xylem, given\n\nhs [AbstractHydraulicOrgan] type struct\ntree TreeSimple type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Examples:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"using Land.PlantHydraulics\n\nFT = Float32;\nleaf = LeafHydraulics{FT}();\np = end_pressure(leaf, FT(0.01));\n@show leaf.p_element;\npressure_profile!(leaf, FT(0.01));\n@show leaf.p_element;","category":"page"},{"location":"submodules/PlantHydraulics/#Steady-state-and-non-steady-state-mode","page":"PlantHydraulics","title":"Steady state and non-steady state mode","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractFlowMode\nNonSteadyStateMode\nSteadyStateMode\nbuffer_rate","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractFlowMode","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractFlowMode","text":"abstract type AbstractFlowMode\n\nHierarchy of AbstractFlowMode\n\nSteadyStateMode\nNonSteadyStateMode\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.NonSteadyStateMode","page":"PlantHydraulics","title":"Land.PlantHydraulics.NonSteadyStateMode","text":"struct NonSteadyStateMode <: AbstractFlowMode\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.SteadyStateMode","page":"PlantHydraulics","title":"Land.PlantHydraulics.SteadyStateMode","text":"struct SteadyStateMode <: AbstractFlowMode\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.buffer_rate","page":"PlantHydraulics","title":"Land.PlantHydraulics.buffer_rate","text":"buffer_rate(pv::AbstractCapacity{FT}) where {FT<:AbstractFloat}\n\nReturn the buffer rate, given\n\npv AbstractCapacity type struct\n\nNote that only symplastic water can be used as capacitance\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Root-Hydraulics","page":"PlantHydraulics","title":"Root Hydraulics","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function end_pressure works for the case of only 1 root layer if     one needs the plant base xylem water pressure. However, when there are     multiple root layers, end_pressure does not apply. In this     case, iterations are required to calculate the xylem end pressure for each     root layers, and then make sure all root layers have the same xylem end     pressure. A few functions are provided to realize this.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function xylem_flow uses Root Solving method to calculate     the flow rate through the RootHydraulics struct that yields the     given xylem end pressure. The ini in the function is optional. However,     using the flow rate from last instant when pressure does not differ much     will speed up the calculation.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_flow","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.xylem_flow","page":"PlantHydraulics","title":"Land.PlantHydraulics.xylem_flow","text":"xylem_flow(root::RootHydraulics{FT},\n           pressure::FT,\n           ini::FT = FT(1)\n) where {FT<:AbstractFloat}\n\nCalculate the flow rate from a given tree base pressure, given\n\nroot RootHydraulics type struct\npressure Given tree base pressure in [MPa]\nini Initial guess\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"In the plant hydraulic module design, flow rate is computed for each canopy     layer, and thus computing flow rate for each root layer is required for a     multiple layered root system. One feasible way is to do iterations using     xylem_flow function, i.e., iterate the xylem end     pressure til the total flow rate equals the given value. However, this     method is too inefficient. What I did is","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Calculate the xylem end pressure and whole root layer conductance from the   initial flow rate;\nCalculate the mean xylem end pressure, and tune the flow rates in all root   layers using the difference from mean pressure and root conductance;\nSum up the new flow rates, and calculate the difference with given total flow   rate;\nUse the calculated condutcance to weight out the differences.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The functions provided by PlantHydraulics module are","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"root_pk\nroots_flow!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.root_pk","page":"PlantHydraulics","title":"Land.PlantHydraulics.root_pk","text":"root_pk(root::RootHydraulics{FT},\n        flow::FT\n) where {FT<:AbstractFloat}\nroot_pk(root::RootHydraulics{FT},\n        q_in::FT,\n        flow::Array{FT,1}\n) where {FT<:AbstractFloat}\n\nReturn root xylem end pressure and root hydraulic conductance (reverse of     summed resistance), given\n\nroot RootHydraulics struct\nflow Given flow rate(s) in the root layer, array for non-steady state with   capacitance enabled\nq_in Flow rate into the root\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.roots_flow!","page":"PlantHydraulics","title":"Land.PlantHydraulics.roots_flow!","text":"roots_flow!(roots::Array{RootHydraulics{FT},1},\n            ks::Array{FT,1},\n            ps::Array{FT,1},\n            qs::Array{FT,1},\n            flow::FT,\n            recalculate::Bool\n) where {FT<:AbstractFloat}\nroots_flow!(roots::Array{RootHydraulics{FT},1},\n            ks::Array{FT,1},\n            ps::Array{FT,1},\n            qs::Array{FT,1},\n            flow::FT\n) where {FT<:AbstractFloat}\nroots_flow!(plant::Union{GrassLikeOrganism{FT},\n                         PalmLikeOrganism{FT},\n                         TreeLikeOrganism{FT}},\n            flow::FT\n) where {FT<:AbstractFloat}\n\nRecalculate the flow rates in the root from the pressure and conductance     profiles in each root at non-steady state, given\n\nroots Array of RootHydraulics structs\nks Container for conductance in each root layer\nps Container for end xylem pressure in each layer\nqs Container for flow rate out of each layer\nflow Total flow rate out of the roots\nrecalculate A paceholder indicator of recalculating root flow (useless)\nplant AbstractPlantOrganism type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"However, the steps above are only 1 iteration, and can only be used for the     non-steady state version of model. For the steady-state flow rates,     function roots_flow! does thw work. What the function does is to     iterate roots_flow! till the difference among the     calculated end pressures is small enough. I also emphasize that to speed up     the code, 3 containers are added to the AbstractPlantOrganism     structs, and they are cache_k, cache_p, and cache_q.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Example:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"using Land.PlantHydraulics\n\nFT = Float32;\npalm = create_palm(FT(-2.1), FT(0.5), FT(8), FT[0,-1,-2,-3], collect(FT,0:1:20));\nroots_flow!(palm.roots, palm.cache_k, palm.cache_p, palm.cache_q, FT(1));","category":"page"},{"location":"submodules/PlantHydraulics/#Leaf-Hydraulics","page":"PlantHydraulics","title":"Leaf Hydraulics","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The stomatal models often require plant hydraulics either as a correction     factor (in empirical stomatal models) or as the risk term (in optimal     stomatal models). To facilitate the calculations, a few specific functions     are provided.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function xylem_risk returns the risk in xylem hydraulic function     based on the most downstream end of the xylem. The risk of plant hydraulic     system is not only on current system, but also potential new growth (plants     don't want to risk new growth either). Thus, function     xylem_risk evaluates the risk from the xylem pressure     calculated from current system (with drought history), and then compute the     risk from the pressure (the severer the srought history, the higher the     risk):","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_risk","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.xylem_risk","page":"PlantHydraulics","title":"Land.PlantHydraulics.xylem_risk","text":"xylem_risk(hs::LeafHydraulics{FT}, flow::FT) where {FT<:AbstractFloat}\n\nEvaluate the hydraulic risk at the end of leaf xylem, given\n\nhs LeafHydraulics type struct\nflow Flow rate (per leaf area)\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Note that function xylem_risk can work on its own without having     other organ-level components. For example, by changing the p_ups of a     LeafHydraulics, one can simulate the case of drought without     caring about other hydraulic systems. Same for function     critical_flow below. However, these functions are only useful for     sensitivity analysis or when p_ups in the LeafHydraulics is     accurate.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Examples","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"using Land.PlantHydraulics\n\nFT = Float32;\nleaf = LeafHydraulics{FT}();\nrisk = xylem_risk(leaf, FT(0.01));\n@show risk;\nleaf.p_ups = FT(-1.0);\nrisk = xylem_risk(leaf, FT(0.01));\n@show risk;","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function critical_flow calculates critical leaf transpiration rate,     beyond which leaf will desicate. Function critical_flow accounts     for drought legacy effect by design, and the more severe the drought     history, the lower the critical_flow. Again, ini in the function is also     optional, but a good guess will speed up the calculations.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Examples","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"using Land.PlantHydraulics\n\nFT = Float32;\nleaf = LeafHydraulics{FT}();\nrisk = critical_flow(leaf);\n@show risk;\nleaf.p_ups = FT(-1.0);\nrisk = critical_flow(leaf);\n@show risk;","category":"page"},{"location":"submodules/PlantHydraulics/#Whole-plant-Hydraulics","page":"PlantHydraulics","title":"Whole-plant Hydraulics","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Though xylem_risk and critical_flow can work on their     own, the functions only evaluate the risks on leaf level. The more     realistic case is that when leaf transpiration rate increases, p_ups in     the LeafHydraulics gets more negative. Thus, the     xylem_risk and critical_flow tends to underestimate     the risk and overestimate the critical flow rate. To overcome this problem,     whole-plant level plant hydraulics are provided.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function end_pressure calculates the leaf xylem end pressure for     a whole-plant struct using these steps:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"calculate the plant base pressure from a given total flow rate\ncalculate the trunk end pressure (if present)\ncalculate the branch end pressure (if present)\ncalculate the leaf end pressure (if present)","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Accordingly, there is a function critical_flow to calculate the     critical flow rate for the whole plant. Be aware that Plant-level function     end_pressure and critical_flow only applies to the     case of only one canopy layer (or big-leaf model). As to the case of     multiple canopy layer, more functions are pending.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"critical_flow","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.critical_flow","page":"PlantHydraulics","title":"Land.PlantHydraulics.critical_flow","text":"critical_flow(\n            hs::LeafHydraulics{FT},\n            ini::FT = FT(0.5)\n) where {FT<:AbstractFloat}\ncritical_flow(\n            tree::TreeSimple{FT},\n            ini::FT = FT(0.5)\n) where {FT<:AbstractFloat}\n\nCalculate the critical flow rate (K ≈ 0), given\n\nhs LeafHydraulics type struct\nini Initial guess\ntree TreeSimple type struct\n\nNote, for the safety of no NaN, update critical_flow when ΔP >= -0.01\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Note that the organ level or whole-plant level conductances are different from     xylem hydraulic conductance at a given xylem slice. Also, simply computing     the conductance as the flow rate divided by pressre drop is not accurate     because of the gravity. In the PlantHydraulics module, the organ and     whole-plant level conductances are computed by firstly adding up all the     resistances in each element, and then computing the relative loss of     conductance. The function available to use is","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"plant_conductances!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.plant_conductances!","page":"PlantHydraulics","title":"Land.PlantHydraulics.plant_conductances!","text":"plant_conductances!(tree::TreeSimple{FT}) where {FT<:AbstractFloat}\n\nUpdate plant total hydraulic information in each element and whole plant, given\n\ntree TreeSimple type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Temperature-effects","page":"PlantHydraulics","title":"Temperature effects","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Plant hydraulic properties changes with temperature, due to its impacts on     surface tension and viscosity. As to surface tension, when temperature     increases, air-water interface surface tension decreases, meaning that with     the same curvature, the capillary pressure provided decreases. As a result,     soil matrix potential becomes less nagative (good for plants!), but the     conduit resistance to cavitation decreases (bad for plants!). As to     viscosity, when temperature increases, viscosity decreases, meaning that     pressure drop decreases at the same flow rate (good for plants!). To     account for these effects, we provided temperature_effects!     function:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"temperature_effects!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.temperature_effects!","page":"PlantHydraulics","title":"Land.PlantHydraulics.temperature_effects!","text":"temperature_effects!(\n            hs::LeafHydraulics{FT}\n) where {FT<:AbstractFloat}\ntemperature_effects!(\n            hs::AbstractHydraulicOrgan{FT}\n) where {FT<:AbstractFloat}\ntemperature_effects!(\n            hs::AbstractHydraulicOrgan{FT},\n            T::FT\n) where {FT<:AbstractFloat}\ntemperature_effects!(\n            tree::TreeSimple{FT}\n) where {FT<:AbstractFloat}\n\nUpdate temperature effetcs on hydralic system, given\n\nhs AbstractHydraulicOrgan type struct\nT Given temperature\ntree TreeSimple type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Keep in mind that, leaf critical pressure changes due to surface tension,     though the impact can be neglected for minor temperature change. However,     soil water content is still computed using the equivalent matrix potential     at 25 Celcius because water content is only related to the air-water     interface curvature.","category":"page"},{"location":"submodules/PlantHydraulics/#Pressure-volume-curve","page":"PlantHydraulics","title":"Pressure-volume curve","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractCapacity\nPVCurveLinear\nPVCurveSegmented\np_from_volume\nupdate_PVF!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractCapacity","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractCapacity","text":"abstract type AbstractCapacity{FT<:AbstractFloat}\n\nHierachy of AbstractCapacity\n\nPVCurveLinear\nPVCurveSegmented\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.PVCurveLinear","page":"PlantHydraulics","title":"Land.PlantHydraulics.PVCurveLinear","text":"mutable struct PVCurveLinear{FT<:AbstractFloat} <: Land.PlantHydraulics.AbstractCapacity{FT<:AbstractFloat}\n\nStruct that contains information for linear PV curve\n\nFields\n\nslope::AbstractFloat\nSlope of the linear PV curve (relative to maximum) [MPa⁻¹]\nk_refill::AbstractFloat\nConductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.PVCurveSegmented","page":"PlantHydraulics","title":"Land.PlantHydraulics.PVCurveSegmented","text":"mutable struct PVCurveSegmented{FT} <: Land.PlantHydraulics.AbstractCapacity{FT}\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.p_from_volume","page":"PlantHydraulics","title":"Land.PlantHydraulics.p_from_volume","text":"p_from_volume(\n            pv::AbstractCapacity{FT},\n            rvol::FT,\n            T::FT\n) where {FT<:AbstractFloat}\n\nCalculate equilibrium pressure from relative volume, given\n\npv AbstractCapacity type of struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.update_PVF!","page":"PlantHydraulics","title":"Land.PlantHydraulics.update_PVF!","text":"update_PVF!(hs::LeafHydraulics{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(hs::StemHydraulics{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(hs::RootHydraulics{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(hs::RootHydraulics{FT},\n            Δt::FT,\n            nss::Bool\n) where {FT<:AbstractFloat}\nupdate_PVF!(roots::Array{RootHydraulics{FT},1},\n            ks::Array{FT,1},\n            ps::Array{FT,1},\n            qs::Array{FT,1},\n            q_sum::FT,\n            Δt::FT\n) where {FT<:AbstractFloat}\nupdate_PVF!(tree::GrassLikeOrganism{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(tree::PalmLikeOrganism{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(tree::TreeLikeOrganism{FT}, Δt::FT) where {FT<:AbstractFloat}\n\nUpdate pressure, capacitance, and flow rates in hydraulic system, given\n\nhs AbstractHydraulicOrgan or AbstractPlantOrganism type   struct\nΔt Time interval\nnss NonSteadyStateMode placeholder (useless)\nks Container for conductance in each root layer\nps Container for end xylem pressure in each layer\nqs Container for flow rate out of each layer\nq_sum Total flow rate out of the roots\ntree GrassLikeOrganism, PalmLikeOrganism, or   TreeLikeOrganism type struct\n\nNote that this function only updates the equilibrium pressure in the tissue,     but not the xylem flow pressure. The difference between the two pressures     is used to drive water exchange between xylem and capacictance tissues.\n\n\n\n\n\n","category":"function"},{"location":"generated/CanopyLayers/fluspect/","page":"Leaf Spectrum","title":"Leaf Spectrum","text":"EditURL = \"https://github.com/CliMA/Land/blob/master/docs/src/examples/CanopyLayers/fluspect.jl\"","category":"page"},{"location":"generated/CanopyLayers/fluspect/#Fluspect","page":"Leaf Spectrum","title":"Fluspect","text":"","category":"section"},{"location":"generated/CanopyLayers/fluspect/","page":"Leaf Spectrum","title":"Leaf Spectrum","text":"# load packages\nusing Land.CanopyLayers\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/CanopyLayers/fluspect/#Excitation-wavelength","page":"Leaf Spectrum","title":"Excitation wavelength","text":"","category":"section"},{"location":"generated/CanopyLayers/fluspect/","page":"Leaf Spectrum","title":"Leaf Spectrum","text":"wls    = create_wave_length(FT);\ncan    = create_canopy_rt(FT);\nrt_dim = create_rt_dims(can, wls);\nleaf   = create_leaf_bios(FT, rt_dim);\nfluspect!(leaf, wls);\n\n_fig,_axes = create_canvas(\"Fluspect example\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(wls.WL, leaf.ρ_SW, \"k-\", label=\"Reflectance\");\n_ax1.plot(wls.WL, leaf.τ_SW, \"k:\", label=\"Transmittance\");\n_ax2.contourf(wls.WLE, wls.WLF, leaf.Mb);\n_ax3.contourf(wls.WLE, wls.WLF, leaf.Mf);\n_ax1.legend(loc=\"upper right\");\n_ax1.set_ylim(0,0.65);\nset_xlabels!(_axes, [\"Wavelength (nm)\", \"Excitation wavelength (nm)\",\n                     \"Excitation wavelength (nm)\"], fontsize=12);\nset_ylabels!(_axes, [\"Reflectance or Transmittance\", \"SIF wavelength (nm)\",\n                     \"SIF wavelength (nm)\"], fontsize=12);\nset_titles!(_axes; labels=[\"Spectrum\", \"Backward matrix\", \"Forward matrix\"],\n                   usetex=false);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/CanopyLayers/fluspect/#Change-leaf-properties","page":"Leaf Spectrum","title":"Change leaf properties","text":"","category":"section"},{"location":"generated/CanopyLayers/fluspect/","page":"Leaf Spectrum","title":"Leaf Spectrum","text":"# here we change all the properties at the same time as an example\nleaf.N   = 2.0;\nleaf.Cab = 50.0;\nleaf.Car = 15.0;\nleaf.Ant = 0.1;\nleaf.Cs  = 0.1;\nleaf.Cw  = 0.02;\nleaf.Cm  = 0.02;\nleaf.Cx  = 0.1;\nleaf.fqe = 0.8;\nfluspect!(leaf, wls);\n\n_fig,_axes = create_canvas(\"Change leaf properties\"; ncol=3);\n_ax1,_ax2,_ax3 = _axes;\n_ax1.plot(wls.WL, leaf.ρ_SW, \"k-\", label=\"Reflectance\");\n_ax1.plot(wls.WL, leaf.τ_SW, \"k:\", label=\"Transmittance\");\n_ax2.contourf(wls.WLE, wls.WLF, leaf.Mb);\n_ax3.contourf(wls.WLE, wls.WLF, leaf.Mf);\n_ax1.legend(loc=\"upper right\");\n_ax1.set_ylim(0,0.65);\nset_xlabels!(_axes, [\"Wavelength (nm)\", \"Excitation wavelength (nm)\",\n                     \"Excitation wavelength (nm)\"], fontsize=12);\nset_ylabels!(_axes, [\"Reflectance or Transmittance\", \"SIF wavelength (nm)\",\n                     \"SIF wavelength (nm)\"], fontsize=12);\nset_titles!(_axes; labels=[\"Spectrum\", \"Backward matrix\", \"Forward matrix\"],\n                   usetex=false);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/CanopyLayers/fluspect/","page":"Leaf Spectrum","title":"Leaf Spectrum","text":"","category":"page"},{"location":"generated/CanopyLayers/fluspect/","page":"Leaf Spectrum","title":"Leaf Spectrum","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Photosynthesis/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"EditURL = \"https://github.com/CliMA/Land/blob/master/docs/src/examples/Photosynthesis/photosynthesis.jl\"","category":"page"},{"location":"generated/Photosynthesis/photosynthesis/#Temperature-dependencies","page":"Photosynthesis","title":"Temperature dependencies","text":"","category":"section"},{"location":"generated/Photosynthesis/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"# load packages\nusing Land.Photosynthesis\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/Photosynthesis/photosynthesis/#Simple-example","page":"Photosynthesis","title":"Simple example","text":"","category":"section"},{"location":"generated/Photosynthesis/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"# define photosynthesis system and leaf (C3 and C4), and envir\nc3_set = C3CLM(FT);\nc4_set = C4CLM(FT);\nleaf_3 = Leaf{FT}(APAR=1000);\nleaf_4 = Leaf{FT}(APAR=1000);\nenvir  = AirLayer{FT}();\n\n# define leaf temperature, total leaf conductance to CO₂, and internal CO₂\nT   = FT(300);\nglc = FT(0.1);\np_i = rand(FT) + 20;\n\n# remember to update the temperature dependencies when temperature changes\nprintln(\"initialize temperature dependencies\");\nleaf_temperature_dependence!(c3_set, leaf_3, envir, T);\nleaf_temperature_dependence!(c4_set, leaf_4, envir, T);\n\nprintln(\"calculate photosynthesis from known internal CO₂ partial pressure\");\nleaf_photosynthesis!(c3_set, leaf_3, envir, PCO₂Mode(), p_i);\nleaf_photosynthesis!(c4_set, leaf_4, envir, PCO₂Mode(), p_i);\n@show leaf_3.An;\n@show leaf_4.An;\n\nprintln(\"calculate photosynthesis from known leaf conductance to CO₂\");\nleaf_photosynthesis!(c3_set, leaf_3, envir, GCO₂Mode(), glc);\nleaf_photosynthesis!(c4_set, leaf_4, envir, GCO₂Mode(), glc);\n@show leaf_3.An;\n@show leaf_4.An;\nnothing #hide","category":"page"},{"location":"generated/Photosynthesis/photosynthesis/#A-Ci-curve","page":"Photosynthesis","title":"A-Ci curve","text":"","category":"section"},{"location":"generated/Photosynthesis/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Here we show an example of the A-Ci curves for C3 and C4 photosynthesis. As     stomatal conductance may differ when other environmental conditions     change, we leave the examples of photosynthesis responses to the     environment for StomataModels package.","category":"page"},{"location":"generated/Photosynthesis/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"# temperature not changing, no temperature dependencies update required\n_p3 = collect(FT, 5:1:200);\n_p4 = collect(FT, 0:0.1:15.01);\n_a3 = similar(_p3);\n_a4 = similar(_p4);\nfor i in eachindex(_p3)\n    leaf_photosynthesis!(c3_set, leaf_3, envir, PCO₂Mode(), _p3[i]);\n    _a3[i] = leaf_3.An;\nend\nfor i in eachindex(_p4)\n    leaf_photosynthesis!(c4_set, leaf_4, envir, PCO₂Mode(), _p4[i]);\n    _a4[i] = leaf_4.An;\nend\n\n_fig,_axes = create_canvas(\"A-Ci curve\"; ncol=2);\n_ax1,_ax2 = _axes;\n_ax1.plot(_p3, _a3, \"k-\", label=\"C3\");\n_ax2.plot(_p4, _a4, \"k-\", label=\"C4\");\n_ax1.set_xlabel(\"Leaf internal CO₂ (Pa)\");\n_ax1.set_ylabel(\"Anet (μmol m⁻² s⁻¹)\");\n_ax2.set_xlabel(\"Leaf internal CO₂ (Pa)\");\n_ax1.legend(loc=\"lower right\");\n_ax2.legend(loc=\"lower right\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"","category":"page"},{"location":"generated/Photosynthesis/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/CanopyLayers/scope/","page":"SCOPE Model","title":"SCOPE Model","text":"EditURL = \"https://github.com/CliMA/Land/blob/master/docs/src/examples/CanopyLayers/scope.jl\"","category":"page"},{"location":"generated/CanopyLayers/scope/#SCOPE-Model","page":"SCOPE Model","title":"SCOPE Model","text":"","category":"section"},{"location":"generated/CanopyLayers/scope/","page":"SCOPE Model","title":"SCOPE Model","text":"# load packages\nusing Land.CanopyLayers\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/CanopyLayers/scope/#Initialization","page":"SCOPE Model","title":"Initialization","text":"","category":"section"},{"location":"generated/CanopyLayers/scope/","page":"SCOPE Model","title":"SCOPE Model","text":"Besides the individual functions to initialize parameters for CanopyLayers,     a general function is provided to initialize all the parameters directly.","category":"page"},{"location":"generated/CanopyLayers/scope/","page":"SCOPE Model","title":"SCOPE Model","text":"angles, can, can_opt, can_rad, in_rad, leaves, rt_con, rt_dim, soil, wls =\n    initialize_rt_module(FT; nLayer=20, LAI=3);\nnothing #hide","category":"page"},{"location":"generated/CanopyLayers/scope/#Steps","page":"SCOPE Model","title":"Steps","text":"","category":"section"},{"location":"generated/CanopyLayers/scope/","page":"SCOPE Model","title":"SCOPE Model","text":"# 1. Update canopy optical properties (required)\ncanopy_geometry!(can, angles, can_opt, rt_con);\n# 2. Update scattering coefficients (required)\ncanopy_matrices!(leaves, can_opt);\n# 3. Simulate short wave simulation (required)\nshort_wave!(can, can_opt, can_rad, in_rad, soil, rt_con);\n# 4. Update integrated radiation fluxes (required for photosynthesis)\ncanopy_fluxes!(can, can_opt, can_rad, in_rad, soil, leaves, wls, rt_con);\n# 5. Update SIF related spectrum (required for SIF)\nSIF_fluxes!(leaves, can_opt, can_rad, can, soil, wls, rt_con, rt_dim);\n# 6. Update thermo fluxes (required for leaf energy budget)\nthermal_fluxes!(leaves, can_opt, can_rad, can, soil, [FT(400.0)], wls);\n\n_fig,_axes = create_canvas(\"SIF example\"; ncol=2);\n_ax1,_ax2 = _axes;\n_ax1.plot(wls.WL , can_rad.alb_obs, \"k-\");\n_ax2.plot(wls.WLF, can_rad.SIF_obs, \"k-\");\nset_xlabels!(_axes, [\"Wave length (nm)\" for i in 1:2], fontsize=12);\nset_ylabels!(_axes, [\"Albedo\", \"obs SIF (mW m⁻² nm⁻¹ sr⁻¹)\"], fontsize=12);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/CanopyLayers/scope/#Change-FQE","page":"SCOPE Model","title":"Change FQE","text":"","category":"section"},{"location":"generated/CanopyLayers/scope/","page":"SCOPE Model","title":"SCOPE Model","text":"for leaf in leaves\n    leaf.Cx = 0.5;\n    leaf.fqe = 0.004;\n    fluspect!(leaf, wls);\nend\ncan.Ω = 0.48\ncanopy_geometry!(can, angles, can_opt, rt_con);\ncanopy_matrices!(leaves, can_opt);\nshort_wave!(can, can_opt, can_rad, in_rad, soil, rt_con);\ncanopy_fluxes!(can, can_opt, can_rad, in_rad, soil, leaves, wls, rt_con);\nSIF_fluxes!(leaves, can_opt, can_rad, can, soil, wls, rt_con, rt_dim);\nthermal_fluxes!(leaves, can_opt, can_rad, can, soil, [FT(400.0)], wls);\n\n_fig,_axes = create_canvas(\"SIF example FQE\"; ncol=2);\n_ax1,_ax2 = _axes;\n_ax1.plot(wls.WL , can_rad.alb_obs, \"k-\");\n_ax2.plot(wls.WLF, can_rad.SIF_obs, \"k-\");\nset_xlabels!(_axes, [\"Wave length (nm)\" for i in 1:2], fontsize=12);\nset_ylabels!(_axes, [\"Albedo\", \"obs SIF (mW m⁻² nm⁻¹ sr⁻¹)\"], fontsize=12);\n_fig.set_tight_layout(true);\n_fig","category":"page"},{"location":"generated/CanopyLayers/scope/","page":"SCOPE Model","title":"SCOPE Model","text":"","category":"page"},{"location":"generated/CanopyLayers/scope/","page":"SCOPE Model","title":"SCOPE Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Photosynthesis/temperature/","page":"Temperature","title":"Temperature","text":"EditURL = \"https://github.com/CliMA/Land/blob/master/docs/src/examples/Photosynthesis/temperature.jl\"","category":"page"},{"location":"generated/Photosynthesis/temperature/#Temperature-dependencies","page":"Temperature","title":"Temperature dependencies","text":"","category":"section"},{"location":"generated/Photosynthesis/temperature/","page":"Temperature","title":"Temperature","text":"# load packages\nusing Land.Photosynthesis\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/Photosynthesis/temperature/#Arrhenius-correction","page":"Temperature","title":"Arrhenius correction","text":"","category":"section"},{"location":"generated/Photosynthesis/temperature/#Without-deactivation-term","page":"Temperature","title":"Without deactivation term","text":"","category":"section"},{"location":"generated/Photosynthesis/temperature/","page":"Temperature","title":"Temperature","text":"# KcTDCLM is a ArrheniusTD type struct, use it as an example here\n_td = KcTDCLM(FT);\n_ts = collect(FT, 273:1:323);\n_ks = temperature_correction.([_td], _ts);\n\n_fig,_axes = create_canvas(\"Arrhenius correction without deactivation\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _ks, \"k-\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Relative to 25 °C\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/temperature/#With-deactivation-term","page":"Temperature","title":"With deactivation term","text":"","category":"section"},{"location":"generated/Photosynthesis/temperature/","page":"Temperature","title":"Temperature","text":"# VcmaxTDCLM is a ArrheniusPeakTD type struct, use it as an example here\n_td = VcmaxTDCLM(FT);\n_ts = collect(FT, 273:1:323);\n_ks = temperature_correction.([_td], _ts);\n\n_fig,_axes = create_canvas(\"Arrhenius correction with deactivation\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _ks, \"k-\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Relative to 25 °C\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/temperature/#Q10-correction","page":"Temperature","title":"Q10 correction","text":"","category":"section"},{"location":"generated/Photosynthesis/temperature/","page":"Temperature","title":"Temperature","text":"_td = Q10TD{FT}(1.0, 273.15, 1.7);\n_ts = collect(FT, 273:1:323);\n_ks = temperature_correction.([_td], _ts);\n\n_fig,_axes = create_canvas(\"Q10 correction\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _ks, \"k-\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Relative to 25 °C\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/temperature/","page":"Temperature","title":"Temperature","text":"","category":"page"},{"location":"generated/Photosynthesis/temperature/","page":"Temperature","title":"Temperature","text":"This page was generated using Literate.jl.","category":"page"},{"location":"submodules/Land/#Land","page":"Land","title":"Land","text":"","category":"section"},{"location":"submodules/Land/","page":"Land","title":"Land","text":"CurrentModule = Land","category":"page"},{"location":"submodules/Land/","page":"Land","title":"Land","text":"VerticalLayers\nvertical_layers!","category":"page"},{"location":"submodules/Land/#Land.VerticalLayers","page":"Land","title":"Land.VerticalLayers","text":"mutable struct VerticalLayers{FT}\n\nStruct that store trace gas information along vertical layers.\n\nFields\n\nn_layer\nNumber of layers\nd_layer\nThickness per layer\nx_layer\nVertical distances among layers (0.5 for boundaries)\nT\nTemperature at each layer\nd_CO₂\nDiffusion coefficient array\np_CO₂\nVertical CO₂ partial pressure\nΔ_CO₂\nderivative operator for CO₂ partial pressure\n\n\n\n\n\n","category":"type"},{"location":"submodules/Land/#Land.vertical_layers!","page":"Land","title":"Land.vertical_layers!","text":"vertical_layers!(vls::VerticalLayers{FT}, t::FT) where {FT<:AbstractFloat}\n\nUpdate vertical trace gas information with time, given\n\nvls VerticalLayers type struct\nt Time since last update\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#SoilPlantAirContinuum","page":"SPAC","title":"SoilPlantAirContinuum","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"CurrentModule = Land.SoilPlantAirContinuum","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Types","page":"SPAC","title":"Types","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"SPACContainer1L\nSPACContainer2L\nSPACMono\nSPACSimple","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.SPACContainer1L","page":"SPAC","title":"Land.SoilPlantAirContinuum.SPACContainer1L","text":"mutable struct SPACContainer1L{FT}\n\nStruct that contains 1-layer gas exchange information.\n\nFields\n\nag\nMean gross photosynthetic rate [μmol m⁻² s⁻¹]\nan\nMean net photosynthetic rate [μmol m⁻² s⁻¹]\nc\nLeaf internal CO₂ partial pressure [Pa]\ne\nFlow rate per basal area [mol s⁻¹ m⁻²]\ngh\nLeaf diffusive conductance to H₂O [mol m⁻² s⁻¹]\np\nXylem end pressure [MPa]\nt\nLeaf temperature [K]\n\n\n\n\n\n","category":"type"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.SPACContainer2L","page":"SPAC","title":"Land.SoilPlantAirContinuum.SPACContainer2L","text":"mutable struct SPACContainer2L{FT}\n\nStruct that contains 2-layer gas exchange information.\n\nFields\n\ncont_sh\ncont_sl\nfrac_sh\nShaded layer fraction\nfrac_sl\nSunlit layer fraction\nla_sh\nShaded layer leaf area [m²]\nla_sl\nSunlit layer leaf area [m²]\nlai_sh\nShaded layer LAI\nlai_sl\nSunlit layer LAI\npar_sh\nShaded layer PAR [μmol m⁻² s⁻¹]\npar_sl\nSunlit layer PAR [μmol m⁻² s⁻¹]\nrad_sh\nShaded layer absorbed energy [W m⁻²]\nrad_sl\nSunlit layer absorbed energy [W m⁻²]\n\n\n\n\n\n","category":"type"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.SPACMono","page":"SPAC","title":"Land.SoilPlantAirContinuum.SPACMono","text":"mutable struct SPACMono{FT}\n\nStruct that mono species SoilPlantAirContinuum system.\n\nFields\n\nsoil_bounds\nSoil layers bounds [m]\nair_bounds\nAir layers bounds [m]\nz_root\nRoot depth [m]\nz_canopy\nCanopy maximal height [m]\nplant_hs\nPlant hydraulic system\nn_canopy\nNumber of canopy layers\nn_root\nNumber of root layers\nplant_ps\nPlant photosynthesis systems\nba\nBasal area [m²]\nga\nGround area [m²]\nla\nLeaf area [m²]\nenvirs\nAir layers\nwind_z0\nAerodynamic roughness [m]\nwind_d\nZero plane displacement [m]\nwind_zs\nMean layer height [m]\nwinds\nWind speed per layer [m s⁻¹]\nmswc\nMaximal soil water content\nswc\nCurrent soil water content\np_soil\nArray of soil matric potential [MPa]\nh_soil\nMaximal soil depth [m]\nlatitude\nLatitude [°]\nlongitude\nLongitude [°]\nelevation\nElevation [m]\nphoto_set\nPhotosynthesis parameter set\nstomata_model\nStomatal behavior scheme\nangles\nSolar angle container\ncanopy_rt\nCanopy4RT container\nwl_set\nWave length container\nrt_dim\nRT dimensions\ncan_rad\nCanopyRads container\ncan_opt\nCanopyOpticals container\nleaves_rt\nArray of LeafBios container\nsoil_opt\nSoilOpticals container\nin_rad\nIncoming radiation container\nrt_con\nRT container\nf_SL\nContainer for sunlit leaf area fraction in each layer\nf_gpp\nCanopy GPP per ground area\nf_npp\nCanopy GPP per ground area\nf_H₂O\nCanopy water flux per ground area\n\n\n\n\n\n","category":"type"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.SPACSimple","page":"SPAC","title":"Land.SoilPlantAirContinuum.SPACSimple","text":"mutable struct SPACSimple{FT}\n\nStruct that simplest mono species SoilPlantAirContinuum system, with 1 root,     stem, and leaf.\n\nFields\n\nhs\nHydraulic systems\nec\nCritical flow rate\nps\nPhotosynthesis system\nvtoj\nRatio between Vcmax25 and Jmax25\nenvir\nEnvironmental conditions\ncontainer1L\nContainer for gas exchange for a layer\ncontainer2L\nContainer for gas exchange of sunlit and shaded layers\ncontainerKS\nContainer for default hydraulic conductance\ncontainerOP\nContainer for optimizer\nopt_f_sl\nContainer for optimal sunlit layer flow rate\nopt_f_sh\nContainer for optimal shaded layer flow rate\nopt_laba\nContainer for optimal leaf area per basal area\nopt_vmax\nContainer for optimal Vcmax25\nlai\nLeaf area index\nlaba\nLeaf area per basal area\ng_max\nMaximal stomatal conductance limit at 25 °C\ngaba\nGround area per basal area\nwidth\nLeaf width\nmswc\nMaximal soil water content\nswc\nCurrent soil water content\np_soil\nSoil matrical water potential\nh_soil\nSoil depth, 2X mean root depth\nc_cons\nLeaf construction cost per leaf area\nc_vmax\nLeaf nutrient cost per Vcmax25 per leaf area\nlatitude\nLatitude [°]\nlongitude\nLongitude [°]\nelevation\nElevation [m]\n\n\n\n\n\n","category":"type"},{"location":"submodules/SoilPlantAirContinuum/#Soil","page":"SPAC","title":"Soil","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"soil_moisture_swc!\nsoil_moisture_p!\nsoil_moisture_p25!\nsoil_moisture!","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.soil_moisture_swc!","page":"SPAC","title":"Land.SoilPlantAirContinuum.soil_moisture_swc!","text":"soil_moisture_swc!(node::SPACSimple{FT}, swc::FT) where {FT<:AbstractFloat}\n\nUpdate soil moisture and soil matrix potential, given\n\nnode SPACSimple type struct\nswc Given soil water content\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.soil_moisture_p!","page":"SPAC","title":"Land.SoilPlantAirContinuum.soil_moisture_p!","text":"soil_moisture_p!(node::SPACSimple{FT}, p::FT) where {FT<:AbstractFloat}\n\nUpdate soil moisture and soil matrix potential, given\n\nnode SPACSimple type struct\np Given soil maxtrix potential\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.soil_moisture_p25!","page":"SPAC","title":"Land.SoilPlantAirContinuum.soil_moisture_p25!","text":"soil_moisture_p25!(\n            node::SPACSimple{FT},\n            p_25::FT\n) where {FT<:AbstractFloat}\n\nUpdate soil moisture and soil matrix potential, given\n\nnode SPACSimple type struct\np_25 Given soil maxtrix potential at 25 Celcius\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.soil_moisture!","page":"SPAC","title":"Land.SoilPlantAirContinuum.soil_moisture!","text":"soil_moisture!(\n            node::SPACSimple{FT},\n            flow::FT,\n            Δt::FT = FT(1)\n) where {FT<:AbstractFloat}\n\nUpdate soil moisture and soil matrix potential, given\n\nnode SPACSimple type struct\nflow Mean outlet flow rate in [Kg h⁻¹]\nΔt Time period in [h]\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Planet","page":"SPAC","title":"Planet","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"atmospheric_pressure_ratio\natmospheric_pressure\nppm_to_Pa\nzenith_angle","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.atmospheric_pressure_ratio","page":"SPAC","title":"Land.SoilPlantAirContinuum.atmospheric_pressure_ratio","text":"atmospheric_pressure(h::FT)\n\nCalculate the atmospheric pressure, given\n\nh elevation in [m]\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.atmospheric_pressure","page":"SPAC","title":"Land.SoilPlantAirContinuum.atmospheric_pressure","text":"atmospheric_pressure(h::FT)\n\nCalculate the atmospheric pressure, given\n\nh elevation in [m]\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.ppm_to_Pa","page":"SPAC","title":"Land.SoilPlantAirContinuum.ppm_to_Pa","text":"ppm_to_Pa(h::FT)\n\nConvert ppm to Pa, given\n\nh elevation in [m]\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.zenith_angle","page":"SPAC","title":"Land.SoilPlantAirContinuum.zenith_angle","text":"zenith_angle(\n            latd::FT,\n            decd::FT,\n            lhad::FT\n) where {FT<:AbstractFloat}\nzenith_angle(\n            latd::FT,\n            day::FT,\n            hour::FT,\n            minute::FT\n) where {FT<:AbstractFloat}\n\nCalculate the zenith angle, given\n\nlatd Latitude in degree\ndecd Declination of the Sun in degree\nlhad Local hour angle in degree\nday Day of year\nhour Hour of day\nminute Minute of hour\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Big-leaf-model","page":"SPAC","title":"Big-leaf model","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"gain_risk_map\nleaf_gas_exchange_nonopt!\nleaf_gas_exchange!\noptimize_flows!\nbig_leaf_partition!\nradiative_conductance\nblack_body_emittance\nboundary_layer_conductance\nleaf_temperature\nleaf_temperature_sunlit\nleaf_temperature_shaded\nannual_profit\nannual_simulation!\ncreate_dataframe\ninitialize_spac_canopy!","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.gain_risk_map","page":"SPAC","title":"Land.SoilPlantAirContinuum.gain_risk_map","text":"gain_risk_map(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT}\n) where {FT<:AbstractFloat}\n\nReturn the matrix of optimizers at different sunlit and shaded layer flow     rates, given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type photosynthesis parameter set\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.leaf_gas_exchange_nonopt!","page":"SPAC","title":"Land.SoilPlantAirContinuum.leaf_gas_exchange_nonopt!","text":"leaf_gas_exchange_nonopt!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            flow::FT,\n            par::FT,\n            rad::FT,\n            la::FT,\n            container::SPACContainer1L{FT}\n) where {FT<:AbstractFloat}\nleaf_gas_exchange_nonopt!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nleaf_gas_exchange_nonopt!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            f_sl::FT,\n            f_sh::FT\n) where {FT<:AbstractFloat}\n\nSimulate leaf level gas exchange and fill it into the container for 1-layer     or 2-layer canopy, given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type struct\nflow Flow rate per basal area into the leaves (e.g., for sunlit leaves)\nf_sl Flow rate per basal area into the sunlit leaves\nf_sh Flow rate per basal area into the shaded leaves\npar Leaf-level photosynthetic active radiation\nrad Leaf-level absorbed radiative energy\nla Leaf area of the leaves (total or each layer)\ncontainer [SPACContainer1L] type container\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.leaf_gas_exchange!","page":"SPAC","title":"Land.SoilPlantAirContinuum.leaf_gas_exchange!","text":"leaf_gas_exchange!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            flow::FT,\n            par::FT,\n            rad::FT,\n            la::FT,\n            container::SPACContainer1L{FT}\n) where {FT<:AbstractFloat}\nleaf_gas_exchange!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nleaf_gas_exchange!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            f_sl::FT,\n            f_sh::FT\n) where {FT<:AbstractFloat}\n\nSimulate leaf level gas exchange and fill it into the container for 1-layer     or 2-layer canopy, given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type struct\nflow Flow rate per basal area into the leaves (e.g., for sunlit leaves)\nf_sl Flow rate per basal area into the sunlit leaves\nf_sh Flow rate per basal area into the shaded leaves\npar Leaf-level photosynthetic active radiation\nrad Leaf-level absorbed radiative energy\nla Leaf area of the leaves (total or each layer)\ncontainer [SPACContainer1L] type container\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.optimize_flows!","page":"SPAC","title":"Land.SoilPlantAirContinuum.optimize_flows!","text":"optimize_flows!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT}\n) where {FT<:AbstractFloat}\n\nOptimize the flow rates in sunlit and shaded layers, given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.big_leaf_partition!","page":"SPAC","title":"Land.SoilPlantAirContinuum.big_leaf_partition!","text":"big_leaf_partition!(\n            node::SPACSimple{FT},\n            zenith::FT,\n            r_all::FT\n) where {FT <:AbstractFloat}\n\nPartition the big-leaf canopy into sunlit and shaded layers, given\n\npartition Container for partition\nzenith Zenith angle in degree\nr_all Total radiation in [W m⁻²]\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.radiative_conductance","page":"SPAC","title":"Land.SoilPlantAirContinuum.radiative_conductance","text":"radiative_conductance(T::FT) where {FT<:AbstractFloat}\n\nReturn the radiative conductance of leaf, given\n\nT leaf temperature\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.black_body_emittance","page":"SPAC","title":"Land.SoilPlantAirContinuum.black_body_emittance","text":"black_body_emittance(T::FT) where {FT<:AbstractFloat}\n\nReturn the energy been radiated out, given\n\nT leaf temperature\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.boundary_layer_conductance","page":"SPAC","title":"Land.SoilPlantAirContinuum.boundary_layer_conductance","text":"boundary_layer_conductance(wind::FT, width::FT) where {FT<:AbstractFloat}\n\nReturn the boundary layer conductance, given\n\nwind Wind speed\nwidth Leaf width\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.leaf_temperature","page":"SPAC","title":"Land.SoilPlantAirContinuum.leaf_temperature","text":"leaf_temperature(\n            node::SPACSimple{FT},\n            rad::FT,\n            e_rad::FT,\n            epla::FT\n) where {FT<:AbstractFloat}\nleaf_temperature(\n            node::SPACSimple{FT},\n            rad::FT,\n            flow::FT\n) where {FT<:AbstractFloat}\n\nReturn leaf temperature, given\n\nnode SPACSimple type struct\nrad Absorbed solar radiation per leaf area\ne_rad Emitted absorbed radiation per leaf area\nepla Flow rate per leaf area\nflow Total flow rate per basal area\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.leaf_temperature_sunlit","page":"SPAC","title":"Land.SoilPlantAirContinuum.leaf_temperature_sunlit","text":"leaf_temperature_sunlit(\n            node::SPACSimple{FT},\n            rad::FT,\n            f_sl::FT\n) where {FT<:AbstractFloat}\n\nReturn leaf temperature, given\n\nnode SPACSimple type struct\nrad Absorbed solar radiation per leaf area\nf_sl Total flow rate per basal area into sunlit leaves\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.leaf_temperature_shaded","page":"SPAC","title":"Land.SoilPlantAirContinuum.leaf_temperature_shaded","text":"leaf_temperature_shaded(\n            node::SPACSimple{FT},\n            rad::FT,\n            f_sh::FT\n) where {FT<:AbstractFloat}\n\nReturn leaf temperature, given\n\nnode SPACSimple type struct\nrad Absorbed solar radiation per leaf area\nf_sh Total flow rate per basal area into shaded leaves\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.annual_profit","page":"SPAC","title":"Land.SoilPlantAirContinuum.annual_profit","text":"annual_profit(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            weather::Array{FT,2}\n) where {FT<:AbstractFloat}\n\nCalculate the profit in the growing season so as to optimize leaf investment,     given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type struct\nweather Weather profile in a growing season\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.annual_simulation!","page":"SPAC","title":"Land.SoilPlantAirContinuum.annual_simulation!","text":"annual_simulation!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            weather::DataFrame,\n            output::DataFrame\n) where {FT<:AbstractFloat}\n\nRun annual simulation for a growing season, given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type struct\nweather Weather profile in a growing season\noutput The predefined output result\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.create_dataframe","page":"SPAC","title":"Land.SoilPlantAirContinuum.create_dataframe","text":"function create_dataframe(FT, weather::DataFrame)\n\nCreate a data frame to store simulation output, given\n\nFT Floating number type\nweather Weather profile in a growing season\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.initialize_spac_canopy!","page":"SPAC","title":"Land.SoilPlantAirContinuum.initialize_spac_canopy!","text":"initialize_spac_canopy!(node::SPACMono{FT}) where {FT<:AbstractFloat}\n\nInitialize the RT parameters for a given\n\nnode SPACMono type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Optimal-investment","page":"SPAC","title":"Optimal investment","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"leaf_allocation!\noptimize_leaf!\noptimize_hs!","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.leaf_allocation!","page":"SPAC","title":"Land.SoilPlantAirContinuum.leaf_allocation!","text":"leaf_allocation!(\n            node::SPACSimple{FT},\n            laba::FT\n) where {FT<:AbstractFloat}\nleaf_allocation!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            vmax::FT\n) where {FT<:AbstractFloat}\nleaf_allocation!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            laba::FT,\n            vmax::FT\n) where {FT<:AbstractFloat}\n\nUpdate leaf area and maximal carboxylation rate, given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type struct\nlaba Given leaf area per basal area\nvmax Given Vcmax25\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.optimize_leaf!","page":"SPAC","title":"Land.SoilPlantAirContinuum.optimize_leaf!","text":"optimize_leaf!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            weather::Array{FT,2},\n            printing::Bool\n) where {FT<:AbstractFloat}\n\nOptimize leaf area (LAI within 0-20) and photosynthetic capacity (within     5-200), given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type struct\nweather Weather profile in a growing season\nprinting Optional. If true, printing progress\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.optimize_hs!","page":"SPAC","title":"Land.SoilPlantAirContinuum.optimize_hs!","text":"optimize_hs!(\n            node::SPACSimple{FT},\n            photo_set::AbstractPhotoModelParaSet{FT},\n            weather::Array{FT,2}\n) where {FT<:AbstractFloat}\n\nOptimize hydraulic conductance and leaf investment, given\n\nnode [SPACSimple] type struct\nphoto_set [AbstractPhotoModelParaSet] type struct\nweather Weather profile in a growing season\n\n\n\n\n\n","category":"function"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"EditURL = \"https://github.com/CliMA/Land/blob/master/docs/src/examples/Photosynthesis/parasets.jl\"","category":"page"},{"location":"generated/Photosynthesis/parasets/#Predefined-parameter-sets","page":"Parameter Sets","title":"Predefined parameter sets","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"# load packages\nusing Land.Photosynthesis\nusing PlotPlants\nFT = Float32;\nnothing #hide","category":"page"},{"location":"generated/Photosynthesis/parasets/#Jmax","page":"Parameter Sets","title":"Jmax","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = JmaxTDBernacchi(FT);\n_td_2 = JmaxTDCLM(FT);\n_td_3 = JmaxTDLeuning(FT);\n_ts   = collect(FT, 273:1:323);\n_jm_1 = photo_TD_from_val.([_td_1], FT(100), _ts);\n_jm_2 = photo_TD_from_val.([_td_2], FT(100), _ts);\n_jm_3 = photo_TD_from_val.([_td_3], FT(100), _ts);\n\n_fig,_axes = create_canvas(\"Jmax\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _jm_1, \"k-\", label=\"Bernacchi\");\n_ax1.plot(_ts .- 273.15, _jm_2, \"k:\", label=\"CLM\");\n_ax1.plot(_ts .- 273.15, _jm_3, \"k--\", label=\"Leuning\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Jcmax (μmol m⁻² s⁻¹)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/#Kc","page":"Parameter Sets","title":"Kc","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = KcTDBernacchi(FT);\n_td_2 = KcTDCLM(FT);\n_ts   = collect(FT, 273:1:323);\n_kc_1 = photo_TD_from_set.([_td_1], _ts);\n_kc_2 = photo_TD_from_set.([_td_2], _ts);\n\n_fig,_axes = create_canvas(\"Kc\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _kc_1, \"k-\", label=\"Bernacchi\");\n_ax1.plot(_ts .- 273.15, _kc_2, \"k:\", label=\"CLM\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Kc (Pa)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/#Ko","page":"Parameter Sets","title":"Ko","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = KoTDBernacchi(FT);\n_td_2 = KoTDCLM(FT);\n_ts   = collect(FT, 273:1:323);\n_ko_1 = photo_TD_from_set.([_td_1], _ts);\n_ko_2 = photo_TD_from_set.([_td_2], _ts);\n\n_fig,_axes = create_canvas(\"Ko\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _ko_1, \"k-\", label=\"Bernacchi\");\n_ax1.plot(_ts .- 273.15, _ko_2, \"k:\", label=\"CLM\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Ko (Pa)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/#Kpep","page":"Parameter Sets","title":"Kpep","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = KpepTDBoyd(FT);\n_td_2 = KpepTDCLM(FT);\n_ts   = collect(FT, 273:1:323);\n_kp_1 = photo_TD_from_set.([_td_1], _ts);\n_kp_2 = photo_TD_from_set.([_td_2], _ts);\n\n_fig,_axes = create_canvas(\"Kpep\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _kp_1, \"k-\", label=\"Boyd\");\n_ax1.plot(_ts .- 273.15, _kp_2, \"k:\", label=\"CLM\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Kpep (Pa)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/#Respiration","page":"Parameter Sets","title":"Respiration","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = RespirationTDBernacchi(FT);\n_td_2 = RespirationTDCLM(FT);\n_td_3 = Q10TDAngiosperm(FT);\n_td_4 = Q10TDGymnosperm(FT);\n_ts   = collect(FT, 273:1:323);\n_rd_1 = photo_TD_from_val.([_td_1], FT(1), _ts);\n_rd_2 = photo_TD_from_val.([_td_2], FT(1), _ts);\n_rd_3 = photo_TD_from_val.([_td_3], FT(1), _ts);\n_rd_4 = photo_TD_from_val.([_td_4], FT(1), _ts);\n\n_fig,_axes = create_canvas(\"Respiration\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _rd_1, \"k-\", label=\"Bernacchi\");\n_ax1.plot(_ts .- 273.15, _rd_2, \"k:\", label=\"CLM\");\n_ax1.plot(_ts .- 273.15, _rd_3, \"r-\", label=\"Q10 Angiosperm\");\n_ax1.plot(_ts .- 273.15, _rd_4, \"r:\", label=\"Q10 Gymnosperm\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Respiration (μmol m⁻² s⁻¹)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/#Vcmax","page":"Parameter Sets","title":"Vcmax","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = VcmaxTDBernacchi(FT);\n_td_2 = VcmaxTDCLM(FT);\n_td_3 = VcmaxTDLeuning(FT);\n_ts   = collect(FT, 273:1:323);\n_vc_1 = photo_TD_from_val.([_td_1], FT(100), _ts);\n_vc_2 = photo_TD_from_val.([_td_2], FT(100), _ts);\n_vc_3 = photo_TD_from_val.([_td_3], FT(100), _ts);\n\n_fig,_axes = create_canvas(\"Vcmax\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _vc_1, \"k-\", label=\"Bernacchi\");\n_ax1.plot(_ts .- 273.15, _vc_2, \"k:\", label=\"CLM\");\n_ax1.plot(_ts .- 273.15, _vc_3, \"k--\", label=\"Leuning\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Vcmax (μmol m⁻² s⁻¹)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/#Vomax","page":"Parameter Sets","title":"Vomax","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = VomaxTDBernacchi(FT);\n_ts   = collect(FT, 273:1:323);\n_vo_1 = photo_TD_from_val.([_td_1], FT(100), _ts);\n\n_fig,_axes = create_canvas(\"Vomax\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _vo_1, \"k-\", label=\"Bernacchi\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Vomax (μmol m⁻² s⁻¹)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/#Vpmax","page":"Parameter Sets","title":"Vpmax","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = VpmaxTDBoyd(FT);\n_ts   = collect(FT, 273:1:323);\n_vp_1 = photo_TD_from_val.([_td_1], FT(100), _ts);\n\n_fig,_axes = create_canvas(\"Vpmax\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _vp_1, \"k-\", label=\"Boyd\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Vpmax (μmol m⁻² s⁻¹)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/#Γ*","page":"Parameter Sets","title":"Γ*","text":"","category":"section"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"_td_1 = ΓStarTDBernacchi(FT);\n_td_2 = ΓStarTDCLM(FT);\n_ts   = collect(FT, 273:1:323);\n_Γs_1 = photo_TD_from_set.([_td_1], _ts);\n_Γs_2 = photo_TD_from_set.([_td_2], _ts);\n\n_fig,_axes = create_canvas(\"Γ*\");\n_ax1 = _axes[1];\n_ax1.plot(_ts .- 273.15, _Γs_1, \"k-\", label=\"Bernacchi\");\n_ax1.plot(_ts .- 273.15, _Γs_2, \"k:\", label=\"CLM\");\n_ax1.set_xlabel(\"Leaf temperature (°C)\");\n_ax1.set_ylabel(\"Γ* (Pa)\");\n_ax1.legend(loc=\"upper left\");\n_fig","category":"page"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"","category":"page"},{"location":"generated/Photosynthesis/parasets/","page":"Parameter Sets","title":"Parameter Sets","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#CliMA-Land-Model","page":"Home","title":"CliMA Land Model","text":"","category":"section"},{"location":"#Install-CliMA-Land-Model","page":"Home","title":"Install CliMA Land Model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(PackageSpec(url=\"https://github.com/CliMA/Land.git\"))\njulia> using Land","category":"page"},{"location":"submodules/Photosynthesis/#Photosynthesis","page":"Photosynthesis","title":"Photosynthesis","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"CurrentModule = Land.Photosynthesis","category":"page"},{"location":"submodules/Photosynthesis/#Leaf-and-Environment-Structures","page":"Photosynthesis","title":"Leaf and Environment Structures","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"To model photosynthesis more efficiently, we use a container (Leaf     struct) to store the photosynthesis-related information. For example, many     of the physiological parameters are temperature-dependent, but these     temperature-dependent values only need to be updated when leaf temperature     changes. Therefore, use of the container significantly reduces the time     required when programing leaf gas exchange prognostically. The     Leaf struct has the following fields:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Leaf","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.Leaf","page":"Photosynthesis","title":"Land.Photosynthesis.Leaf","text":"mutable struct Leaf{FT}\n\nStruct to store leaf information.\n\nFields\n\nT\nTemperature [K]\nT_old\nOld Temperature [K], if not T, run leaftemperaturedependence!\nKd\nRate constant for thermal dissipation\nKf\nRate constant for fluorescence (const)\nKr\nReversible NPQ rate constant (initially zero)\nKs\nSustained NPQ rate constant (for seasonal changes, default is zero)\nKp\nRate constant for photochemistry (all reaction centers open)\nKp_max\nMaximal Kp\nmaxPSII\nmax PSII yield (Kr=0, all RC open)\nPSII_frac\nFraction of absorbed light used by PSII ETR\np_i\nLeaf internal CO₂ partial pressure [Pa]\np_s\nLeaf surface CO₂ partial pressure [Pa]\np_sat\nSaturation H₂O vapor pressure [Pa]\ng_bc\nLeaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\ng_lc\nLeaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\nAc\nRubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\nAj\nLight limited photosynthetic rate [μmol m⁻² s⁻¹]\nAg\nGross photosynthetic rate [μmol m⁻² s⁻¹]\nAn\nNet photosynthetic rate [μmol m⁻² s⁻¹]\nAp\nProduct limited photosynthetic rate [μmol m⁻² s⁻¹]\nJ\nElectron transport [μmol m⁻² s⁻¹]\nJ_pot\nPotential Electron Transport Rate [μmol m⁻² s⁻¹]\nJmax\nMaximal electron transport rate [μmol m⁻² s⁻¹]\nJmax25\nMaximal electron transport rate at 298.15 K [μmol m⁻² s⁻¹]\nKc\nRubisCO coefficient Kc [Pa]\nKo\nRubisCO coefficient Ko [Pa]\nKpep\nPEP coefficient Ko [Pa]\nKm\nMichaelis-Menten's coefficient [Pa]\nRd\nRespiration rate [μmol m⁻² s⁻¹]\nRd25\nRespiration rate at 298.15 K [μmol m⁻² s⁻¹]\nVcmax\nMaximal carboxylation rate [μmol m⁻² s⁻¹]\nVcmax25\nMaximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nVpmax\nMaximal PEP carboxylation rate [μmol m⁻² s⁻¹]\nVpmax25\nMaximal PEP carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nΓ_star\nCO₂ compensation point with the absence of Rd [Pa]\nJmax25WW\nWell watered maximal electron transport rate at 298.15 K [μmol m⁻² s⁻¹]\nRd25WW\nWell watered respiration rate at 298.15 K [μmol m⁻² s⁻¹]\nVcmax25WW\nWell watered maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nVpmax25WW\nWell watered maximal PEP carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\ne2c\nTotal efficiency, incl. photorespiration [mol CO₂ mol⁻¹ e-]\nFm\ndark adapted yield (Kp=0)\nFm′\nlight adapted yield (Kp=0)\nFo\ndark-adapted fluorescence yield (Kp=max)\nFo′\nlight-adapted fluorescence yield in the dark (Kp=max)\nJa\nActual electron transport rate [μmol m⁻² s⁻¹]\nNPQ\nNon-Photochemical quenching\nqQ\nPhotochemical quenching\nqE\nenergy quenching\nφ\nPSII yield\nϕs\nSteady-state (light-adapted) yield (aka Fs)\nAPAR\nAbsorbed photosynthetic active radiation [μmol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Also, environmental conditions are required to compute photosynthetic rate, and     these conditions are stored in AirLayer struct. An     AirLayer struct further allows for more conveniently modeling     photosynthesis the vertical CO₂ and H₂O gradients in the canopy. The     AirLayer structs has the following fields:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AirLayer","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AirLayer","page":"Photosynthesis","title":"Land.Photosynthesis.AirLayer","text":"mutable struct AirLayer{FT}\n\nStruct to store environmental conditions in each air layer corresponds to one     canopy layer.\n\nFields\n\nt_air\nAir temperature [K]\np_a\nAtmospheric CO₂ partial pressure [Pa]\np_atm\nAtmospheric pressure [Pa]\np_H₂O\nAtmospheric vapor pressure [Pa]\np_O₂\nAtmospheric O₂ partial pressure [Pa]\np_sat\nSaturation vapor pressure [Pa]\nRH\nRelatiev humidity\nvpd\nVapor pressure deficit [Pa]\nwind\nWind speed [m s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"See exmaples below for how to create the structs","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using Land.Photosynthesis\n\nFT = Float32;\nleaf = Leaf{FT}();\nenvir = AirLayer{FT}();","category":"page"},{"location":"submodules/Photosynthesis/#Temperature-Dependency-Structs","page":"Photosynthesis","title":"Temperature Dependency Structs","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The temperature-dependent (TD) photosynthetic parameters include","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"J_textmax Maximal electron transport rate\nK_textc Michaelis constant for CO₂\nK_textm Michaelis-Menten's coefficient\nK_texto Michaelis constant for O₂\nK_textpep Michaelis constant for PEP carboxylation\nR_textd Dark respiration\nV_textcmax Maximal RuBP carboxylation rate\nV_textomax Maximal RuBP oxygenation rate\nV_textpmax Maximal PEP carboxylation rate\nΓ^* CO₂ compensation point with the absence of dark respiration","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"There are two typical types of temperature dependencies using the classic     Arrhenius equation. We define the three types as ArrheniusTD,     ArrheniusPeakTD, and Q10TD subject to     AbstractTDParameterSet type:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AbstractTDParameterSet\nArrheniusTD\nArrheniusPeakTD\nQ10TD","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AbstractTDParameterSet","page":"Photosynthesis","title":"Land.Photosynthesis.AbstractTDParameterSet","text":"abstract type AbstractTDParameterSet{FT}\n\nHierarchy of the AbstractTDParameterSet:\n\nArrheniusTD\nArrheniusPeakTD\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.ArrheniusTD","page":"Photosynthesis","title":"Land.Photosynthesis.ArrheniusTD","text":"struct ArrheniusTD{FT}\n\nAn AbstractTDParameterSet type struct using\n\ncorr = exp left( dfracΔHaR T_0 - dfracΔHaR T_1 right)\n\nFields\n\nVAL_25\nUncorrected value at 298.15 K\nΔHa_to_R\nRatio between ΔHa and R [K]\nΔHa_to_RT25\nRatio between ΔHa and R*K_25\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.ArrheniusPeakTD","page":"Photosynthesis","title":"Land.Photosynthesis.ArrheniusPeakTD","text":"struct ArrheniusPeakTD{FT}\n\nAn AbstractTDParameterSet type struct using\n\ncorr = exp left( dfracΔHaR T_0 - dfracΔHaR T_1 right)\n       cdot\n       dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n               1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nFields\n\nΔHa_to_RT25\nRatio between ΔHa and R*K_25\nΔHd_to_R\nRatio between ΔHd and R\nΔSv_to_R\nRatio between ΔSv and R\nC\nCorrection factor C = 1 + exp( Sv/R + Hd/(RT0) )\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.Q10TD","page":"Photosynthesis","title":"Land.Photosynthesis.Q10TD","text":"struct Q10TD{FT}\n\nAn AbstractTDParameterSet type struct using\n\nVAL = VAL_REF left( dfracT_1 - T_REF10 right)^Q_10\n\nFields\n\nVAL_REF\nUncorrected value at reference temperature\nT_REF\nReference temperature [K]\nQ_10\nPower of Q10 correction\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"There are many published parameter sets for the various temperature     dependencies, and to ease the modeling we predefined most of the structs:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"JmaxTDBernacchi\nJmaxTDCLM\nJmaxTDLeuning\nKcTDBernacchi\nKcTDCLM\nKoTDBernacchi\nKoTDCLM\nKpepTDBoyd\nKpepTDCLM\nQ10TDAngiosperm\nQ10TDGymnosperm\nRespirationTDBernacchi\nRespirationTDCLM\nVcmaxTDBernacchi\nVcmaxTDCLM\nVcmaxTDLeuning\nVomaxTDBernacchi\nVpmaxTDBoyd\nΓStarTDBernacchi\nΓStarTDCLM","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.JmaxTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.JmaxTDBernacchi","text":"ArrheniusPeakTD type Jmax TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.JmaxTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.JmaxTDCLM","text":"ArrheniusPeakTD type Jmax TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.JmaxTDLeuning","page":"Photosynthesis","title":"Land.Photosynthesis.JmaxTDLeuning","text":"ArrheniusPeakTD type Jmax TD from Leuning's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KcTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.KcTDBernacchi","text":"ArrheniusTD type Kc TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KcTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.KcTDCLM","text":"ArrheniusTD type Kc TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KoTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.KoTDBernacchi","text":"ArrheniusTD type Ko TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KoTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.KoTDCLM","text":"ArrheniusTD type Ko TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KpepTDBoyd","page":"Photosynthesis","title":"Land.Photosynthesis.KpepTDBoyd","text":"ArrheniusTD type Kpep TD from Boyd's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KpepTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.KpepTDCLM","text":"ArrheniusTD type Kpep TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.Q10TDAngiosperm","page":"Photosynthesis","title":"Land.Photosynthesis.Q10TDAngiosperm","text":"Q10TD type Respiration TD for angiosperms per biomass \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.Q10TDGymnosperm","page":"Photosynthesis","title":"Land.Photosynthesis.Q10TDGymnosperm","text":"Q10TD type Respiration TD for symnosperms per biomass \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.RespirationTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.RespirationTDBernacchi","text":"ArrheniusTD type Respiration TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.RespirationTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.RespirationTDCLM","text":"ArrheniusPeakTD type Respiration TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VcmaxTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.VcmaxTDBernacchi","text":"ArrheniusTD type Vcmax TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VcmaxTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.VcmaxTDCLM","text":"ArrheniusPeakTD type Vcmax TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VcmaxTDLeuning","page":"Photosynthesis","title":"Land.Photosynthesis.VcmaxTDLeuning","text":"ArrheniusPeakTD type Vcmax TD from Leuning's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VomaxTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.VomaxTDBernacchi","text":"ArrheniusTD type Vomax TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VpmaxTDBoyd","page":"Photosynthesis","title":"Land.Photosynthesis.VpmaxTDBoyd","text":"ArrheniusPeakTD type Vpmax TD from Boyd's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.ΓStarTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.ΓStarTDBernacchi","text":"ArrheniusTD type Γ^* TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.ΓStarTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.ΓStarTDCLM","text":"ArrheniusTD type Γ* TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The TDs can be easily created using commands like","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using Land.Photosynthesis\n\nFT = Float32;\n_td_1 = JmaxTDBernacchi(FT);\n_td_2 = VcmaxTDCLM(FT);","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"However, be aware that these pre-defined TD structs are not mutable, to create     customized TD struct, code like this will be useful","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using Land.Photosynthesis\n\nFT = Float32;\n_td_1 = ArrheniusTD{FT}(1, 10000, 30);\n_td_1 = ArrheniusPeakTD{FT}(1, 10000, 30, 1);","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"To further simplify the use of Photosynthesis module, we provide a few     collections/structs of temperature dependencies as well as other parameter     sets like FluoParaSet. The structs are catergorized to     C3ParaSet and C4ParaSet subject to an     AbstractPhotoModelParaSet type, and the structs are meant for     modeling C3 photosynthesis and C4 photosynthesis, respectively.","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AbstractPhotoModelParaSet\nC3ParaSet\nC4ParaSet","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AbstractPhotoModelParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.AbstractPhotoModelParaSet","text":"abstract type AbstractPhotoModelParaSet{FT}\n\nHierarchy of the AbstractPhotoModelParaSet:\n\nC3ParaSet\nC4ParaSet\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C3ParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.C3ParaSet","text":"mutable struct C3Paraset{FT}\n\nParameter sets for C3 photosynthesis.\n\nFields\n\nJT\nJmax temperature dependency\nKcT\nKc temperature dependency\nKoT\nKo temperature dependency\nReT\nRespiration temperature dependency\nVcT\nVcmax temperature dependency\nΓsT\nΓ_star temperature dependency\nFlu\nFluorescence model\nVR\nVcmax25 and respiration correlation\nEff_1\nCoefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\nEff_2\nCoefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C4ParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.C4ParaSet","text":"mutable struct C4ParaSet{FT}\n\nParameter sets for C3 photosynthesis.\n\nFields\n\nKpT\nKpep temperature dependency\nReT\nRespiration temperature dependency\nVcT\nVcmax temperature dependency\nVpT\nVpmax temperature dependency\nFlu\nFluorescence model\nVR\nVcmax25 and respiration correlation\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Again, to guarantee a quick start, we provided a few pre-defined parameter     sets:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"C3Bernacchi\nC3CLM\nC4CLM","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C3Bernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.C3Bernacchi","text":"C3ParaSet type C3 photosynthesis using Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C3CLM","page":"Photosynthesis","title":"Land.Photosynthesis.C3CLM","text":"C3ParaSet type C3 photosynthesis using CLM5's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C4CLM","page":"Photosynthesis","title":"Land.Photosynthesis.C4CLM","text":"C4ParaSet type C4 photosynthesis using CLM5's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Examples:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using Land.Photosynthesis\n\nFT = Float32;\nset_b = C3Bernacchi(FT);\nset_3 = C3CLM(FT);\nset_4 = C4CLM(FT);","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Note it here that the C3ParaSet and C4ParaSet structs are     mutable, and the fields can be changed to another non-mutable TD struct.     We'd like to mention that in some cases, leaf respiration rate is not     measured, and in this case, the dark respiration rate will be computed from     V_textcmax using a multiplier","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"VtoRCollatz\nVtoRDefault","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VtoRCollatz","page":"Photosynthesis","title":"Land.Photosynthesis.VtoRCollatz","text":"A constant of 0.01 \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VtoRDefault","page":"Photosynthesis","title":"Land.Photosynthesis.VtoRDefault","text":"A constant of 0.015 \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Temperature-Dependency","page":"Photosynthesis","title":"Temperature Dependency","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"As mentioned above, temperature corrections only need to be done once per     temperature change, and storing the temperature corrected values will     significantly boost the code speed. Here we provide a few functions to     change the stored values. First of all, all the temperature corrections are     made with temperature_correction:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"temperature_correction","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.temperature_correction","page":"Photosynthesis","title":"Land.Photosynthesis.temperature_correction","text":"temperature_correction(\n            td_set::AbstractTDParameterSet{FT},\n            T::FT\n) where {FT<:AbstractFloat}\n\nA correction factor based on arrhenius's fitting procedure, given\n\ntd_set ArrheniusTD or ArrheniusPeakTD type struct\nT Leaf temperature in [K]\n\nThe equation used for ArrheniusTD is\n\ncorr = exp left( dfracΔHaR T_0 - dfracΔHaR T_1 right)\n\nThe equations used for ArrheniusPeakTD are\n\ncorr = exp left( dfracΔHaR T_0 - dfracΔHaR T_1 right)\n       cdot\n       dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n               1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nThe equation used for Q10TD is\n\ncorr = left( dfracT_1 - T_REF10 right)^Q_10\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Second, depending on which physiological parameter to correct, some corrections     use the VAL_25 field in the ArrheniusTD, like K_textc,     K_texto, and K_textpep:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"photo_TD_from_set","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.photo_TD_from_set","page":"Photosynthesis","title":"Land.Photosynthesis.photo_TD_from_set","text":"photo_TD_from_set(td_set::ArrheniusTD{FT}, T::FT) where {FT<:AbstractFloat}\nphoto_TD_from_set(td_set::Q10TD{FT}, T::FT) where {FT<:AbstractFloat}\n\nMake temperature correction from parameter set, given\n\ntd_set ArrheniusTD type parameter set, which has a VAL_25 field\nT Leaf temperature\n\nUseful for Kc, Ko, Kpep, and Γ^*.\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Some corrections use the reference values from the Leaf struct, like     V_textcmax and J_textmax:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"photo_TD_from_val","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.photo_TD_from_val","page":"Photosynthesis","title":"Land.Photosynthesis.photo_TD_from_val","text":"photo_TD_from_val(\n            td_set::AbstractTDParameterSet{FT},\n            val::FT,\n            T::FT\n) where {FT<:AbstractFloat}\n\nMake temperature correction from a given value, given\n\ntd_set ArrheniusTD or ArrheniusPeakTD type struct\nval Uncorrected value at 298.15 K\nT Leaf temperature\n\nUseful for Vcmax, Vomax, Vpmax, Jmax, and Respiration.\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The functions to make temperature corrections to each individual variables are","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_jmax!\nleaf_kc!\nleaf_km!\nleaf_ko!\nleaf_kpep!\nleaf_rd!\nleaf_vcmax!\nleaf_vpmax!\nleaf_Γstar!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_jmax!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_jmax!","text":"leaf_jmax!(td_set::AbstractTDParameterSet{FT},\n           leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate maximal electron transport rate at leaf temperature, given\n\ntd_set AbstractTDParameterSet type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_kc!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_kc!","text":"leaf_kc!(td_set::ArrheniusTD{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\n\nUpdate Kc at leaf temperature, given\n\ntd_set ArrheniusTD type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_km!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_km!","text":"leaf_km!(photo_set::C3ParaSet{FT},\n         leaf::Leaf{FT},\n         envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nUpdate Ko at leaf temperature, given\n\nphoto_set C3ParaSet type photosynthesis parameter set\nleaf Leaf type struct\nenvir AirLayer type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_ko!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_ko!","text":"leaf_ko!(td_set::ArrheniusTD{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\n\nUpdate Ko at leaf temperature, given\n\ntd_set ArrheniusTD type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_kpep!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_kpep!","text":"leaf_kpep!(td_set::ArrheniusTD{FT},\n           leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate Kpep at leaf temperature, given\n\ntd_set ArrheniusTD type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_rd!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_rd!","text":"leaf_rd!(td_set::AbstractTDParameterSet{FT},\n         leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf dark respiration rate at leaf temperature, given\n\ntd_set AbstractTDParameterSet type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_vcmax!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_vcmax!","text":"leaf_vcmax!(td_set::AbstractTDParameterSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf maximal carboxylation rate at leaf temperature, given\n\ntd_set AbstractTDParameterSet type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_vpmax!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_vpmax!","text":"leaf_vpmax!(td_set::AbstractTDParameterSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf maximal PEP carboxylation rate at leaf temperature, given\n\ntd_set AbstractTDParameterSet type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_Γstar!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_Γstar!","text":"leaf_Γstar!(td_set::ArrheniusTD{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate Γ^* at leaf temperature, given\n\ntd_set ArrheniusTD type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Again to ease the coding, we provide a function to run all the temperature     dependencies:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_temperature_dependence!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_temperature_dependence!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_temperature_dependence!","text":"leaf_temperature_dependence!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\nleaf_temperature_dependence!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            T::FT\n) where {FT<:AbstractFloat}\n\nUpdate the temperature dependent photosynthesis only, given\n\nphoto_set AbstractPhotoModelParaSet type parameter set\nleaf Leaf type struct\nenvir AirLayer type struct\nT Given leaf temperature\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Note it here that function leaf_temperature_dependence! updates     saturated vapor pressure from leaf temperature as well.","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Example:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using Land.Photosynthesis\n\nFT = Float32;\nleaf = Leaf{FT}();\nenvir = AirLayer{FT}();\nset_3 = C3CLM(FT);\n\nleaf_temperature_dependence!(c3_set, leaf, envir);\nleaf_temperature_dependence!(c3_set, leaf, envir, FT(300));","category":"page"},{"location":"submodules/Photosynthesis/#RubisCO-limited-Photosynthesis","page":"Photosynthesis","title":"RubisCO-limited Photosynthesis","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"By default, Photosynthesis module computes gross photosynthetic rate as the     minimal of the three:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"A_textc RubisCO-limited photosynthetic rate\nA_textj Light-limited photosynthetic rate\nA_textp Product-limited photosynthetic rate","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If leaf internal CO₂ is known, A_textc (gross rate) can be computed using","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"rubisco_limited_rate!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.rubisco_limited_rate!","page":"Photosynthesis","title":"Land.Photosynthesis.rubisco_limited_rate!","text":"rubisco_limited_rate!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nrubisco_limited_rate!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nrubisco_limited_rate!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the RubisCO limited photosynthetic rate, given\n\nphoto_set C3ParaSet or C4ParaSet type struct\nleaf Leaf type struct\nenvir AirLayer type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If total leaf diffusive conductance to CO₂ is known, A_textc can be     computed analytically by solving the quadratic function. The calculation is     done by adding an envir to the function parameter list. Note it here that     analytical solution using leaf diffusive conductance only applies to C3     photosynthesis as the RubisCO-limited rate for C4 plants is     V_textcmax.","category":"page"},{"location":"submodules/Photosynthesis/#Light-limited-Photosynthesis","page":"Photosynthesis","title":"Light-limited Photosynthesis","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If leaf internal CO₂ is known, A_textj (gross rate) can be computed using","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"light_limited_rate!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.light_limited_rate!","page":"Photosynthesis","title":"Land.Photosynthesis.light_limited_rate!","text":"light_limited_rate!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nlight_limited_rate!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nlight_limited_rate!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the light limited photosynthetic rate, given\n\nphoto_set C3ParaSet or C4ParaSet type struct\nleaf Leaf type struct\nenvir AirLayer type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If total leaf diffusive conductance to CO₂ is known, A_textj can be     computed analytically using the same function by adding an envir to the     parameter list. Note that this analytical solution using leaf diffusive     conductance to CO2 only applies to C3 photosynthesis as the RubisCO-limited     rate for C4 plants is the electron transport rate.","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Be aware that leaf electron transport rate needs to be calculated before the     light-limited rate:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_ETR!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_ETR!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_ETR!","text":"leaf_ETR!(photo_set::AbstractPhotoModelParaSet{FT},\n          leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate the electron transport variables in the leaf struct, given\n\nphoto_set C3ParaSet or C4ParaSet type struct\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Product-limited-Photosynthesis","page":"Photosynthesis","title":"Product-limited Photosynthesis","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If leaf internal CO₂ is known, A_textp (gross rate) can be computed using","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"product_limited_rate!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.product_limited_rate!","page":"Photosynthesis","title":"Land.Photosynthesis.product_limited_rate!","text":"product_limited_rate!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nproduct_limited_rate!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nproduct_limited_rate!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the product limited photosynthetic rate, given\n\nphoto_set C3ParaSet or C4ParaSet type struct\nleaf Leaf type struct\nenvir AirLayer type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If total leaf diffusive conductance to CO₂ is known, A_textp can be     computed analytically by adding an envir to the parameter list. Note it     here that the calculation using leaf diffusive conductance to CO2 only     applies to C4 photosynthesis as the RubisCO-limited rate for C4 plants is     V_textcmax/2.","category":"page"},{"location":"submodules/Photosynthesis/#Photosynthetic-Rates","page":"Photosynthesis","title":"Photosynthetic Rates","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"For empirical and optimization stomatal models, iterations are required to get     the final solution as in StomataModels module. In this case, more     conveniently computing photosynthetic rates for each leaf is preferable. In     this case, leaf_photosynthesis! is a better option:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AbstractCalculationMode\nGCO₂Mode\nPCO₂Mode\nleaf_photosynthesis!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AbstractCalculationMode","page":"Photosynthesis","title":"Land.Photosynthesis.AbstractCalculationMode","text":"abstract type AbstractCalculationMode\n\nHierarchy of AbstractCalculationMode\n\nGCO₂Mode\nPCO₂Mode\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.GCO₂Mode","page":"Photosynthesis","title":"Land.Photosynthesis.GCO₂Mode","text":"struct GCO₂Mode <: AbstractCalculationMode\n\nCalculate leaf photosynthesis using leaf internal CO₂ partial pressure\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.PCO₂Mode","page":"Photosynthesis","title":"Land.Photosynthesis.PCO₂Mode","text":"struct PCO₂Mode <: AbstractCalculationMode\n\nCalculate leaf photosynthesis using total leaf diffusive conductance to CO₂\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_photosynthesis!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_photosynthesis!","text":"leaf_photosynthesis!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::PCO₂Mode\n) where {FT<:AbstractFloat}\nleaf_photosynthesis!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::PCO₂Mode,\n            p_i::FT\n) where {FT<:AbstractFloat}\nleaf_photosynthesis!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::GCO₂Mode\n) where {FT<:AbstractFloat}\nleaf_photosynthesis!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::GCO₂Mode\n) where {FT<:AbstractFloat}\nleaf_photosynthesis!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::GCO₂Mode,\n            g_lc::FT\n) where {FT<:AbstractFloat}\n\nCompute leaf photosynthetic rates, given\n\nphoto_set AbstractPhotoModelParaSet type parameter set\nleaf Leaf type struct\np_i Given leaf internal CO₂\nenvir AirLayer type struct\ng_lc Given leaf diffusive conductance to CO₂\n\nThe C3 photosynthesis model is from Farquhar et al. (1980) \"A biochemical model     of photosynthetic CO₂ assimilation in leaves of C3 species.\"\n\nThe C4 photosynthesis model is adapted from Collatz et al. (1992) \"Coupled     photosynthesis-stomatal conductance model for leaves of C4 plants.\"\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Fluorescence","page":"Photosynthesis","title":"Fluorescence","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Photosynthesis module also provide ways to compute leaf fluorescence. By     default, the modules uses fluorescence parameters from van del Tol et al.     (2014) with struct FluorescenceVanDerTol:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AbstractFluoModelParaSet\nFluoParaSet\nFluorescenceVanDerTol\nFluorescenceVanDerTolDrought","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AbstractFluoModelParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.AbstractFluoModelParaSet","text":"abstract type AbstractFluoModelParaSet{FT}\n\nHierarchy of the AbstractFluoModelParaSet:\n\nFluoParaSet\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.FluoParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.FluoParaSet","text":"mutable struct FluoParaSet{FT}\n\nA AbstractFluoModelParaSet type paramter set.\n\nFields\n\nKr1\nFluorescence model coefficient\nKr2\nFluorescence model coefficient\nKr3\nFluorescence model coefficient\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.FluorescenceVanDerTol","page":"Photosynthesis","title":"Land.Photosynthesis.FluorescenceVanDerTol","text":"FluoParaSet type parameter set using all data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.FluorescenceVanDerTolDrought","page":"Photosynthesis","title":"Land.Photosynthesis.FluorescenceVanDerTolDrought","text":"FluoParaSet type parameter set using Flexas's data (drought) \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The function that is used to compute fluorescene is","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_fluorescence!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_fluorescence!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_fluorescence!","text":"leaf_fluorescence!(\n            fluo_set::FluoParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nCompute fluorescence yield, Kr, Ks, and Kp for leaf, given\n\nfluo_set FluoParaSet type parameter set\nleaf Leaf struct\n\n\n\n\n\n","category":"function"}]
}
